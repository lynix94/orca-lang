
def var_table := type.map();

parse def foo(str)
{
	stmt_done:	stmt_list
			;

	stmt_list : stmt_list stmt ';'
		| stmt ';'
		;

	stmt : add 
			%c{
				print: argv[0];
			}
		| assign
			%c{
				print: argv[0];
			}
		;

	assign: name '=' add
				%c{
					..owner.var_table[argv[0]] = argv[2];
					return argv[2];
				}
		;

	add : add '+' mul
				%c{
					return argv[0] + argv[2];
				}
		| add '-' mul
				%c{
					return argv[0] - argv[2];
				}
		| mul
				%c{
					return argv[0];
				}
		;

	mul : mul '*' primary
				%c{
					return argv[0] * argv[2];
				}
		|  mul '/' primary
				%c{
					return argv[0] / argv[2];
				}
		| primary
				%c{
					return argv[0];
				}
		;

	primary: '(' add ')'
				%c{
					return argv[1];
				}
		| number
				%c{
					return argv[0];
				}
		| var
				%c{
					return argv[0];
				}
		;


	var : name
				%c{
					return ..owner.var_table[argv[0]];
				}
		;
	

	name : r'[a-zA-Z_][a-zA-Z_0-9]*'
				%c{
					return argv[0];
				}
		;

	number : r'[0-9]+'
				%c{
					return argv[0].integer();
				}
		;

	~ : r'[ \t\r\n]+'
		;
}

str = 
"""
a=10;
b=20;
a + 2*b;
""";

print: str;
print: my.foo(str);
print: 'done';
		

