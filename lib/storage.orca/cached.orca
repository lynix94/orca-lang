using socket;
using thread;
using time;
using pack;
using fun;

using distribute.fs;
using distribute.dfsd;
using storage.cached;

print: '## cached start';

def hash_size;
def sock;
def cache;
static def magic;

.magic = 'orca.ds_0.4:';
.cache = type.tuple();

.hash_size = 1000;
for i in [1..my.hash_size] {
	.cache.push_back( type.list() );
}

.sock = socket.create();
.sock.bind(argv[0]);
.sock.listen();

do {
	sock = .sock.accept();
	cl = .client.clone(sock, .cache);
	thread.run(cl.run);
} while(true);

.sock.close();
return;




def client
{
	def cache;
	def sock;
	def obj_stack;


	def init(s, c)
	{
		..sock = s;
		..cache = c;
	}


	def header(msg)
	{
		len = msg.length();
		head = cached.magic + len.string('%5d');

		return head + msg;
	}

	def send(msg)
	{
		msg = ..header(msg);
		print: ' >> ', msg;
		..sock.send(msg);
	}

	def recv()
	{
		header = ..sock.recv(cached.magic.length() + 5);
		if header.starts_with(cached.magic) {
			len = header[-5:-1).integer();
		}
		else {
			..sock.recv(0, 0);
		}
		
		msg = ..sock.recv_all(len, 2);
		print: '<<', header, msg;
		return msg;
	}

	def run()
	{
		print: 'thread ${my.ID} launced';

		do {
			try {
				print:'## wait...';

				cmd = ..recv();
				..do_what(cmd);
			}
			catch io.socket {
				print: 'socket disconnected';
				..sock.close();
				break;
			}
		} while(true);

		print: 'thread ${my.ID} done';
	}

	def find_val(key)
	{
		print: '# find: ', key, key.hash(cached.hash_size);
		list = ..cache[key.hash(cached.hash_size)];

		it = list.find(key);

		for a in list {
			if a[0] == key {
				return a[1];
			}
		}

		return nil;
	}

	def add_val(key, value)
	{
		print: '# add: ', key, key.hash(cached.hash_size), value;
		list = ..cache[key.hash(cached.hash_size)];

		it = list.find(key);

		for a in list {
			if a[0] == key {
				a[1] = value;
			}

			return true;
		}

		list.push_back( (key, value) );
		return true;
	}

	def remove_val(key)
	{
		print: '# remove: ', key, key.hash(cached.hash_size);
		list = ..cache[key.hash(cached.hash_size)];

		for it in list.iter() {
			if it()[0] == key {
				it.erase();
			}

			return true;
		}

		return false;
	}

	def do_what(msg)
	{
		decode msg
		{
			case '<fs1>', 'remove', ',', %path:
				ret = ..remove_val(path);
				..send: pack.save(ret);

			case '<fs1>', 'file_size', ',', %path:
				value = ..find_val(path);
				..send: pack.save(value.length());

			case '<fs1>', 'isexists', ',', %path:
				result = false;
				value = ..find_val(path);
				if value != nil {
					result = true;
				}

				..send: pack.save(result);

			# mkdir, ls, isfile, isdir
			case '<fs1>', %cmd, ',', %path:
				print: '## invalid command';
				..send: pack.save(nil);

			case '<read>', %path, ',', %size, ',', %offset:
				if size == 'nil' {
					size = '1000000000';
				}

				if offset == 'nil' {
					offset = '0';
				}

				size = size.integer();
				offset = offset.integer();

				value = ..find_val(path);
				if value == nil {
					..send: pack.save(value); 
					return;
				}

				..send: pack.save(value[offset:offset+size]);

			case '<write>', %path, ',', %offset, ',', %data:
				if offset == 'nil' {
					offset = '0';
				}

				offset = offset.integer();
				obj = ..add_val(path, data, offset);
				..send: pack.save(obj);

			case '<rename>', %src, ',', %dest:
				print: '## invalid command';
				..send: pack.save(nil);

			case '<ping>':
				..send: '<ack>';
		}
	}
}



