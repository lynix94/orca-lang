
using datetime;
using encoding.resp;


def handle;
def buffer := '';

def init(handle)
{
	..handle = handle;
}


def read_line(timeout)
{
	start = datetime.now().timestamp();
	while true {
		idx = ..buffer.find('\n');

		if idx > 0 {
			line = ..buffer[:idx+1];
			..buffer = ..buffer[idx+1:];
			return line;
		}

		..buffer += ..handle.read(4096, timeout);

		if timeout != nil {
			now = datetime.now().timestamp();
			if now - start > timeout {
				return '';
			}
		}
	}
}


def read(size, timeout)
{
	start = datetime.now().timestamp();
	while true {
		if size == nil && ..buffer.length() > 0 {
			ret = ..buffer;
			..buffer = '';
			return ret;
		}

		if ..buffer.length() >= size {
			ret = ..buffer[:size];
			..buffer = ..buffer[size:];
			return ret;
		}

		..buffer += ..handle.read(4096, timeout);


		if timeout != nil {
			now = datetime.now().timestamp();
			if now - start > timeout {
				return '';
			}
		}
	}
}


def read_until(until, timeout)
{
	start = datetime.now().timestamp();
	while true {
		idx = ..buffer.find(until);

		if idx > 0 {
			line = ..buffer[:idx+until.size()];
			..buffer = ..buffer[idx+until.size():];
			return line;
		}

		..buffer += ..handle.read(4096, timeout);

		if timeout != nil {
			now = datetime.now().timestamp();
			if now - start > timeout {
				return '';
			}
		}
	}
}

def read_resp(timeout, allow_line)
{
	start = datetime.now().timestamp();
	while true {
		ret = resp.decoding(..buffer);
		if ret[0] == nil && allow_line == true {
			idx = ret[1].find('\r\n');
			if idx >= 0 {
				result = ret[1][:idx];
				..buffer = ret[1][idx+2:]; 
				return result;
			}
		}

		if ret[0] == nil {
			..buffer += ..handle.read(4096, timeout);
			if timeout != nil {
				now = datetime.now().timestamp();
				if now - start > timeout {
					return '';
				}
			}

			continue;
		}

		..buffer = ret[1];
		return ret[0];
	}
}


def write(msg)
{
	return ..handle.write(msg);
}

def write_resp(msg)
{
	return ..handle.write(resp.encoding(msg));
}


