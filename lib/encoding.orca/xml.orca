
using fun;
using util.match;
using strings;

# context parser
return my.decoding(argv[2]);


def match_plain_text(str)
{
	# not yet
	return str;
}

def decoding(str)
{
	#print: '# ', str;
	decode str.strip()
	{
	case '<?', %info, '?>', %remain:
		ret = decoding(remain);
		ret['$info'] = info.strip();
		return ret;

	case '<', %name = r'[a-zA-Z_][a-zA-Z_0-9]*', %attrs, '>', 
		%one_tag = match.match_one_tag,
		'</${name}>', %remain:
		{
			head = decoding(one_tag);

			if head.TYPE == type.map {
				tag = head;
			}
			elif head.TYPE == type.string {
				tag = { '$text':head };
			}
					
			if attrs.TYPE == type.string && attrs.strip().length() > 0 {
				attrs = decoding(attrs);
				tag['$attrs'] = attrs;
			}
	
			if remain.TYPE == type.string && remain.strip().length()>0 {
				tail = decoding(remain);
				if tail.has_key(name) {
					tmp = tail[name];
					if tmp.TYPE == type.tuple {
						tmp.push_back(tag);
					}
					else {
						tail[name] = (tmp, tag);
					}
				}
				else {
					tail[name] = tag;
				}

				return tail;	
			}

			return { name:tag };
		}

	case '<', %name = r'[a-zA-Z_][a-zA-Z_0-9]*', %attrs, '/>', %remain:
		{
			tag = type.map();
			if attrs.TYPE == type.string && attrs.strip().length() > 0 {
				attrs = decoding(attrs);
				tag['$attrs'] = attrs;
			}
	
			if remain.TYPE == type.string && remain.strip().length()>0 {
				tail = decoding(remain);
				if tail.has_key(name) {
					tmp = tail[name];
					if tmp.TYPE == type.tuple {
						tmp.push_back(tag);
					}
					else {
						tail[name] = (tmp, tag);
					}
				}
				else {
					tail[name] = tag;
				}
				return tail;	
			}

			return { name:tag };
		}

	case %key, '=', %value=r'(\'[^\']*\')|("[^"]*")|([^ ]*)', %remain:
		{
			value = decoding(value);
			tail = type.map();
			if remain.TYPE == type.string && remain.strip().length() > 0 {
				tail = decoding(remain);
			}

			tail[key] = value;
			return tail;
		}

	case %value = r'[0-9]+':
		return value.integer();
	case %value = r'"[^"]*"':
		return value[1:-1];
	case %value = r"'[^']*'":
		return value[1:-1];
	case %text = ..match_plain_text:
		return text;
	case %error:
		print: 'not matched';
	}
}



def encoding(obj)
{
	ret = strings.builder();
	if obj.TYPE == type.map {
		for key, value in obj {
			if value.TYPE == type.tuple {
				for v in value {
					attrs = '';
					if v.TYPE == type.map && v.has_key('$attrs') {
						for k2, v2 in v['$attrs'] {
							attrs += k2  + '=' + v2 + ' ';
						}
					}

					if key == '$attrs' {
						continue;
					}

					if key == '$info' {
						ret += '<? ';
					}
					elif key != '$text' {
						ret += '<${key} ${attrs}>';
					}

					ret += encoding(v);
					if key == '$info' {
						ret += ' ?>';
					}
					elif key != '$text' {
						ret += '</${key}>';
					}
				}
			}
			else {
				if key != '$attrs' {

					if key == '$info' {
						ret += '<? ';
					}
					elif key != '$text' {
						ret += '<${key}>';
					}

					ret += encoding(value);
					if key == '$info' {
						ret += ' ?>';
					}
					elif key != '$text' {
						ret += '</${key}>';
					}
				}
			}
		}
	}
	elif obj.TYPE == type.string {
		return obj;
	}
	else {
	}

	return ret.string();
}


def beutify(obj, tab)
{
	if tab == nil {
		tab = 0;
	}
	else {
		tab += 1;
	}

	ret = strings.builder();
	if obj.TYPE == type.map {
		for key, value in obj {
			if value.TYPE == type.tuple {
				for v in value {
					attrs = '';
					if v.TYPE == type.map && v.has_key('$attrs') {
						for k2, v2 in v['$attrs'] {
							attrs += k2 + '=' + v2 + ' ';
						}
					}

					if key == '$attrs' {
						continue;
					}

					if key == '$info' {
						ret += '<? ';
					}
					elif key != '$text' {
						ret += '\t'*tab + '<${key} ${attrs}>\n';
					}

					ret += beutify(v, tab);

					if key() == '$info' {
						ret += ' ?>\n';
					}
					elif key() != '$text' {
						ret += '\n' + '\t'*tab + '</${key()}>\n';
					}
				}
			}
			else {
				if key != '$attrs' {

					if key == '$info' {
						ret += '<? ';
					}
					elif key != '$text' {
						ret += '\t'*tab + '<${key}>\n';
					}

					ret += beutify(value, tab);

					if key == '$info' {
						ret += ' ?>\n';
					}
					elif key != '$text' {
						ret += '\n' + '\t'*tab + '</${key}>\n';
					}
				}
			}
		}
	}
	elif obj.TYPE == type.string {
		return '\t'*tab + obj;
	}
	else {
	}

	return ret.string();
}


