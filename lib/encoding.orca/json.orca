
using util.match;
using alg;

# context parser
return my.decoding(argv[2]);


def match_array(str)
{
	return match.tag('[', ']', str);
}

def match_brace(str)
{
	return match.tag('{', '}', str);
}

def dummy_list
{ 
	def list;
}

def pure_str(str)
{
	ret = '';
	decode str
	{
	case '"', %value = match.dq_string, '"': ret = value;
	case "'", %value = match.sq_string, "'": ret = value;
	case %etc: ret = str;
	}

	return match.string_unescaping(ret);
}

def decoding(str)
{
	#print: '# ', str;
	decode str.strip()
	{
	case '"', %value = match.dq_string, '"':
		return match.string_unescaping(value);

	case "'", %value = match.sq_string, "'":
		return match.string_unescaping(value);

	case %value = r'[0-9]+':
		return value.integer();

	case '[', %value = ..match_array, ']':
		if value == '' {
			return [];
		}

		tp = decoding(value);
		if tp.TYPE == ..dummy_list.TYPE {
			return tp.list;
		}
		return [tp];

	case '{', %value = ..match_brace, '}':
		if value == '' {
			return type.map();
		}

		tp = decoding(value);
		if tp.TYPE == ..dummy_list.TYPE {
			map = type.map();
			for a in tp.list {
				if map.has_key(a[0]) {
					if map[a[0]].TYPE == type.tuple {
						map[a[0]].push_back(a[1]);
					}
					else {
						map[a[0]] = (map[a[0]], a[1]);
					}
				}
				else {
					map[a[0]] = a[1];
				}
			}

			return map;
		}

		return { tp[0]:tp[1] };

	case %head = match.comma, ',', %tail:
		item  = decoding(head);
		remain = decoding(tail);

		if remain.TYPE == ..dummy_list.TYPE {
			remain.list.push_front(item);
			return remain;
		}
			
		dl = ..dummy_list.clone();
		dl.list = [item, remain];
		return dl;

	case %key, ':', %value:
		 return (..pure_str(key), decoding(value));
	}
}

def encoding(obj)
{
	ret = '';
	if obj.TYPE == type.map {
		ret += '{';
		for a in obj.piter() {
			if a.value().TYPE == type.tuple {
				for b in a.value().piter() {
					ret += encoding(a.key());
					ret += ':';
					ret += encoding(b());
					if b != a.value().last() {
						ret += ',';
					}
				}
			}
			else {
				ret += encoding(a.key());
				ret += ':';
				ret += encoding(a.value());
			}

			if a != obj.last() {
				ret += ',';
			}
		}
		ret += '}';
	}
	elif obj.TYPE == type.list {
		ret += '[';
		for a in obj.piter() {
			ret += encoding(a());
			if a != obj.last() {
				ret += ',';
			}
		}
		ret += ']';
	}
	elif obj.TYPE == type.string {
		ret += "'" + match.string_escaping(obj) + "'";
	}
	else {
		ret += obj;
	}

	return ret;
}


def beutify(obj, tab)
{
	if tab == nil {
		tab = 1;
	}
	else {
	   tab += 1;
	}

	ret = '';
	if obj.TYPE == type.map {
		ret += '\t{';
		for a in obj.piter() {
			if a.value().TYPE == type.tuple {
				for b in a.value().piter() {
					ret += beutify(a.key(), tab);
					ret += ':';
					ret += beutify(b(), tab);
					if b != a.value().last() {
						ret += ',\n' + '\t'*tab;
					}
				}
			}
			else {
				ret += beutify(a.key(), tab);
				ret += ':';
				ret += beutify(a.value(), tab);
			}

			if a != obj.last() {
				ret += ',\n' + '\t'*tab;
			}
		}
		ret += '}';
	}
	elif obj.TYPE == type.list {
		ret += '\t[';
		for a in obj.piter() {
			ret += beutify(a(), tab);
			if a != obj.last() {
				ret += ',\n' + '\t'*tab;
			}
		}
		ret += ']';
	}
	elif obj.TYPE == type.string {
		ret += "'" + match.string_escaping(obj) + "'";
	}
	else {
		ret += obj;
	}

	return ret;
}

