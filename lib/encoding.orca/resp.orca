
using encoding.resp;

def error(msg)
{
	def message;

	err = my.clone();
	err.message = msg;

	return err;
}


def encoding(src)
{
	switch src.TYPE
	{
	case type.string:
		return '$%d\r\n%s\r\n' % (src.length(), src);

	case type.int:
		return ':%d\r\n' % src;

	case type.list:
		fallthrough;
	case type.tuple:
		ret = '*%d\r\n' % src.size();
		for i in src {
			ret += encoding(i);
		}

		return ret;

	case type.map:
		ret = '*%d\r\n' % src.size();
		for k, v in src {
			ret += encoding((k, v));
		}

		return ret;

	case resp.error.TYPE:
		return '-%s\r\n' % (src.message);

	case nil.TYPE:
		return '$-1\r\n';

	case type.bool:
		if src == true {
			return ':1\r\n';
		}
		else {
			return ':0\r\n';
		}
		
	default:
		str = string(src);
		return '$%d\r\n%s\r\n' % (str.length(), str);
	}
}

def.decode decoding(src)
{
	case '*', %count, '\r\n', %remain:
		count = count.integer();

		result = [];
		for i in range(count) {
			ret = decoding(remain);
			if ret[0] == nil {
				return [nil, src];
			}

			result.push_back(ret[0]);
			remain = ret[1];
		}

		return [result, remain];

	case '$', %len, '\r\n', %remain:
		len = len.integer();
		if remain.length() < len {
			return [nil, src];
		}

		msg = remain[:len];
		remain = remain[len+2:];

		return [msg, remain];

	case ':', %num, '\r\n', %remain:
		return [num.integer(), remain];

	case '+', %msg, '\r\n', %remain:
		return [msg, remain];

	case '-', %error, '\r\n', %remain:
		return [resp.error(error), remain];

	case %remain:
		return [nil, remain];
}

