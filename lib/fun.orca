
using __fun;

def apply(f, list)
{
	return __fun.apply(f, list);
}

def bind_result(...)
{
	if argv == nil {
		argv = type.tuple();
	}

	list = [];
	if my.order > 1 {
		list += argv[0:my.order-1].list();
	}

	list += [my.a];

	if argv.size() >= my.order {
		list += argv[my.order-1:].list();
	}

	return root.fun.apply(my.f, list);

	def f;
	def a;
	def order;
}

def bind_1st(f, arg)
{
	b = ..bind_result.clone();
	b.f = f;
	b.a = arg;
	b.order = 1;

	return b;
}

def bind_2nd(f, arg)
{
	b = ..bind_result.clone();
	b.f = f;
	b.a = arg;
	b.order = 2;

	return b;
}

def bind_3rd(f, arg)
{
	b = ..bind_result.clone();
	b.f = f;
	b.a = arg;
	b.order = 3;

	return b;
}

def bind_nth(f, arg, n)
{
	b = ..bind_result.clone();
	b.f = f;
	b.a = arg;
	b.order = n;

	return b;
}

def map(list, f)
{
	result = [];
	
	for a in list.begin() {
		result.push_back(f(a()));
	}

	return result;
}


def reduce(a, b, c)
{
	if c == nil {
		initial = nil;
		list = a;
		f = b;
	}
	else {
		initial = a;
		list = b;
		f = c;
	}
	
	if initial == nil {
		result = list[0];

		decode list
		{
			%head:%tail ->
			{
				if tail == [] {
					result = f(result, nil);
				}
				else {
					for a in tail.begin() {
						result = f(result, a());
					}
				}
			}
		}
	}
	else {
		result = initial;
		for a in list.begin() {
			result = f(result, a());
		}
	}
	
	return result;
}




