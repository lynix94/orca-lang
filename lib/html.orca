using strings;
using html;
using sorted;

#print: argv;
name = argv[0];
ts = argv[1];
body = argv[2];
params = argv[3];


return .process_context(body);


def js(body)
{
	return ..process_context(body);
}


def process_context(body)
{
	def html_object(req)
	{
		def __template;

		def init(body)
		{
			..__template = body;
		}

		keys = .__template.list_format();
		#print: keys;

		if my.MEMBERS.has_key('prepare') {
			my.prepare(req);
		}

		dict = {,};
		for key in keys() {
			if my.MEMBERS.has_key(key) {
				value = my.MEMBERS[key](req);
				dict[key] = value;
			}
			else {
				dict[key] = '';
			}
		}

		return my.__template % dict;
	}

	ret = my.html_object.clone(body);
	return ret;
}





def form
{
	def item := {,};
	def method := 'post';
	def action := '.';

	def input
	{
		def serno := 1;

		def input_tag(label)
		{
			def id;
			def name;
			def type;
			def label;
			def serno;

			.label = label;

			return my;
		}

		def ".attr"(type)
		{
			ret = ..input_tag.clone();
			ret.type = type;
			ret.serno = ..serno;
			..serno += 1;

			return ret;
		}
	}


	def render()
	{
		bdr = strings.builder();
		bdr.push_back('<form method="%s" action="%s">\n' % (..method, ..action));

		for k, v in ..item {
			v.id = k;
			v.name = k;
		}

		for v in sorted(..item, lambda(a, b) { return a.serno < b.serno; }) {
			switch v.type
			{
			case 'text', 'password':
				ret = '<input id="%s" name="%s" type="%s" />\n' % (v.id, v.name, v.type);

			case 'submit', 'button', 'reset':
				ret = '<input id="%s" name="%s" type="%s" value="%s" />\n' % (v.id, v.name, v.type, v.label);
			}

			bdr.push_back(ret);
		}

		bdr.push_back('</form>\n');
		return bdr;
	}
}



def jqueryui
{
	def autocomplete
	{
		def __template := '''
			 <script type="text/javascript">
					$(function() {
					$('%{id}').autocomplete({
						source: %{source}
						minLength: 0,
						select: function( event, ui ) {
						%{action};
						return false;
					}
					}).focus(function(){
						$(this).autocomplete('search', $(this).val())});
					});
				</script>
				<input type="text" id="%{id}"> 
			''';

		def action;
		def id;
		def source;

		def render()
		{
			result = owner.__template % {'id':..id, 'action':..action, 'source':..source };
			return result;
		}
	}

	def radio
	{
		def __template := '''
				<script type="text/javascript">
					$(function() {
					$('#%{id}').buttonset();
					$('#%{id} :radio').click(function() {
						%{action};
					});
					});
				</script>
	
				<ul id='%{id}' style="display:inline">
					%{button_list}
				</ul>
			''';

		def id;
		def action;
		def button_list;

		def render()
		{
			button_list = strings.builder();
			for button in ..button_list {
				button_list.push_back("<input type='radio' id='%s' name='radio'><label for='%s'>%s</label>\n" % (button, button, button));
			}
		
			result = owner.__template % {'id':..id, 'action':..action, 'button_list':button_list };
			return result;
		}
	}

	def button
	{
		def __template := '''
				<script type="text/javascript">
					$(function() {
						$('#%{id}').button().click(
							function() {
								%{action}
							}
						);
					});
				</script>
	
				<button id='%{id}' float>%{id}</button>
			''';

		def id;
		def action;

		def render()
		{
			result = owner.__template % {'id':..id, 'action':..action };
			return result;
		}
	}
}



