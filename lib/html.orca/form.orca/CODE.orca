using html;
using html.form;
using sorted;
using strings;


def fill_and_get(param)
{
	errors = {,};
	result = {,};
	for key, value in ..MEMBERS {
		if value.TYPE < form.input.input_base.TYPE {
			if param.has_key(key) {
				result[key] = param[key];
			}
			else {
				result[key] = nil;
			}

			err = my.check_valid(key, result[key]);
			if err != nil {
				errors[key] = err;
			}
		}
	}

	return (result, errors);


	def check_valid(key, value)
	{
		input = owner.owner.MEMBERS[key];
		return input.check_valid(value);
	}
}

def as_p(v, value)
{
	switch v.type
	{
	case 'submit', 'button', 'reset':
		ret = '<p><input id="%s" name="%s" type="%s" value="%s" /></p>\n' % (v.id, v.name, v.type, v.label);

	default:
		ret = '<p><label for="%s">%s:</label><input id="%s" name="%s" type="%s" value="%s"/></p>\n' % (v.id, v.label, v.id, v.name, v.type, value);

	}

	return ret;
}


def render(form_result, decorator, method, action)
{
	if method == nil {
		method = 'POST';
	}

	if action == nil {
		action = '.';
	}

	if decorator == nil {
		decorator = ..as_p;
	}

	bdr = strings.builder();
	bdr.push_back('<form method="%s" action="%s">\n' % (method, action));

	ret = ..render_item(form_result, decorator);
	bdr.push_back(ret);

	bdr.push_back('</form>\n');
	return bdr.string();
}


def render_item(form_result, decorator)
{
	if decorator == nil {
		decorator = ..as_p;
	}

	bdr = strings.builder();

	keys = [];
	for key, value in ..MEMBERS {
		if value.TYPE < form.input.input_base.TYPE {
			value.id = key;
			value.name = key;
			keys.push_back(value);
		}
	}

	for v in sorted(keys, lambda(a, b) { return a.serno < b.serno; }) {
		value = nil;

		if form_result != nil && form_result[0].has_key(v.id) {
			value = form_result[0][v.id];
		}

		ret = decorator(v, value);
		bdr.push_back(ret);
	}

	return bdr.string();
}

