using socket;
using thread;
using time;
using pack;
using fun;
using fs;
using os;

using dfsd;

print: '## dist storage start: ', argv;

def sock;
def port;
def shut_down;
static def magic;


.magic = 'orca.ds_0.4:';
if os.isdir(argv[0]) == false {
	print: argv[0], ' is not directory';
	return;
}

.sock = socket.create();
my.port = argv[1];
.sock.bind(argv[1]);
.sock.listen();
.shut_down = false;


do {
	sock = .sock.accept();
	if .shut_down {
		break;
	}

	cl = .client.clone(sock, argv[0]);
	thread.run(cl.run);
} while(true);

print: '## dist storage shutdown', argv;

.sock.close();
return;

def client
{
	def sock;
	def obj_stack;
	def dfs_root;

	def init(s, dfs_root)
	{
		..sock = s;
		..dfs_root = dfs_root;
	}

	def header(msg)
	{
		len = msg.length();
		head = dfsd.magic + len.string('%5d');

		return head + msg;
	}

	def send(msg)
	{
		msg = ..header(msg);
		#print: ' >> ', msg;
		..sock.send(msg);
	}

	def recv()
	{
		header = ..sock.recv(dfsd.magic.length() + 5);
		if header.starts_with(dfsd.magic) {
			len = header[-5:-1).integer();
		}
		else {
			..sock.recv(0, 0);
		}
		
		msg = ..sock.recv_all(len, 2);
		#print: '<<', header, msg;
		return msg;
	}

	def run()
	{
		print: 'thread ${my.ID} launced';

		do {
			try {
				print:'## wait...';

				cmd = ..recv();
				if ..do_what(cmd) == '<shutdown>' {
					..sock.close();
					owner.owner.shut_down = true;
					sock = socket.create();
					sock.connect('127.0.0.1', owner.owner.port);
					sock.close();
					break;
				}
			}
			catch io.socket {
				print: 'socket disconnected';
				..sock.close();
				break;
			}
		} while(true);

		print: 'thread ${my.ID} done';
	}

	def do_what(msg)
	{
		decode msg
		{
			# mkdir, ls, remove, file_size, isexists, isfile, isdir
			case '<fs1>', %cmd, ',', %path:
				obj = nil;
				
				if cmd == 'ping' {
					obj = true;
				}
				elif cmd == 'shutdown' {
					obj = true;
					..send: pack.save(obj);
					time.sleep(0.2);
					return '<shutdown>';
				}
				elif fs.MEMBERS.has_key(cmd) {
					obj = fs.MEMBERS[cmd](..dfs_root + path);
				}

				..send: pack.save(obj);

			case '<read>', %path, ',', %size, ',', %offset:
				if size == 'nil' {
					size = nil;
				}

				if offset == 'nil' {
					offset = nil;
				}

				obj = fs.read(..dfs_root + path, size, offset);
				..send: pack.save(obj);

			case '<write>', %path, ',', %offset, ',', %data:
				if data == 'nil' {
					data = nil;
				}

				if offset == 'nil' {
					offset = nil;
				}

				obj = fs.write(..dfs_root + path, data, offset);
				..send: pack.save(obj);

			case '<rename>', %src, ',', %dest:
				obj = fs.rename(..dfs_root + src, ..dfs_root + dest);
				..send: pack.save(obj);

		}
	}
}



