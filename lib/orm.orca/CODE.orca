using orm;
using strings;

def conn;

def set_conn(conn)
{
	..conn = conn;
}

def clear()
{
	#..conn.close();
}

def row_iter
{
	def model;
	def res;
	def keys := [];

	def init(model, res) {
		..model = model;
		..res = res;
		for m in model.MEMBERS.iter() {
			..keys.push_back(m.key());
		}
	}

	def next() {
		..res.next();
		return owner;
	}

	# make value
	t = orm.instance.clone();

	for i in [0..my.keys.size()-1] {
		t.MEMBERS[.keys[i]] = .res()[i];
	}

	return t;
}


def instance
{
	def save()
	{
		attr_list = [];
		value_list = [];
		for m in ..MEMBERS.iter() {
			if m.key().starts_with('__') || m.key() == 'save' || m.key() == 'string' {
				continue;
			}

			attr_list.push_back(m.key());
			value_list.push_back(repr(m.value()));
		}

		attrs = strings.join(', ', attr_list...);
		values = strings.join(', ', value_list...);

		query = 'insert into %s(%s) values(%s)' % (..__name__, attrs, values);
		print: query;
		res = orm.conn.execute(query);
	}

	def string()
	{
		ret = {,};
		for m in ..MEMBERS.iter() {
			if m.key().starts_with('__') || m.key() == 'save' || m.key() == 'string' {
				continue;
			}

			ret[m.key()] = m.value();
		}

		return ret;
	}
}







