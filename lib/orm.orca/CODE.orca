
using strings;
using orm;


def conn;

def set_conn(conn)
{
	..conn = conn;
}

def clear()
{
	#..conn.close();
}

def row_iter
{
	def model;
	def res;
	def keys;
	def template {}

	def init(model, res) {
		..model = model;
		..res = res;
		..keys = model._attrs.keys();
	}

	def next() {
		..res.next();
		return owner;
	}

	# make value
	t = .template.clone();

	for i in [0..my.keys.size()-1] {
		t.MEMBERS[.keys[i]] = .res()[i];
	}

	return t;
}


def query
{
	def qstr := '';

	def init(name) {
		..qstr = name;
	}

	def repr() {
		return ..qstr;
	}

	def string() {
		return ..qstr;
	}

	def '<'(p) {
		q = '(%s < %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '<='(p) {
		q = '(%s <= %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '>'(p) {
		q = '(%s > %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '>='(p) {
		q = '(%s >= %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '=='(p) {
		q = '(%s == %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '!='(p) {
		q = '(%s != %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '&&'(p) {
		q = '(%s and %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}

	def '||'(p) {
		q = '(%s or %s)' % (..qstr, p.repr());
		return owner.clone(q);
	}
}




