using orm;
using strings;

def conn;

def set_conn(conn)
{
	..conn = conn;
}

def clear()
{
	#..conn.close();
}

def row_iter
{
	def model;
	def res;
	def keys := [];

	def init(model, res) {
		..model = model;
		..res = res;
		for key in model.MEMBERS {
			..keys.push_back(key);
		}
	}

	def next() {
		r = ..res.next();
		v = ..make_value(r);

		return v;
	}

	def make_value(r) {
		# make value
		t = orm.instance.clone();

		for i in [0..owner.keys.size()-1] {
			t.MEMBERS[..keys[i]] = r[i];
		}

		return t;
	}

	return my.make_value(.res());
}


def instance
{
	def save()
	{
		attr_list = [];
		value_list = [];
		for key, value in ..MEMBERS {
			if key.starts_with('__') || key == 'save' || key == 'string' {
				continue;
			}

			attr_list.push_back(key);
			value_list.push_back(repr(value));
		}

		attrs = strings.join(', ', attr_list...);
		values = strings.join(', ', value_list...);

		query = 'insert into %s(%s) values(%s)' % (..__name__, attrs, values);
		res = orm.conn.execute(query);
	}

	def string()
	{
		ret = {,};
		for key, value in ..MEMBERS {
			if key.starts_with('__') || key == 'save' || key == 'string' {
				continue;
			}

			ret[key] = value;
		}

		return ret;
	}
}







