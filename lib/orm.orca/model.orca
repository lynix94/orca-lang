using orm;
using strings;

# filter object
def filter
{
	def _where;
	def _orderby;
	def _project;
	def _groupby;
	def _table;

	def init(table)
	{
		.._table = table;
		.._where = nil;
		.._orderby = nil;
		.._project = nil;
		.._groupby = nil;
	}

	def where(q)
	{
		.._where = q;
		return owner;
	}

	def orderby(o)
	{
		.._orderby = o;
		return owner;
	}

	def project(p)
	{
		.._project = p;
		return owner;
	}

	def groupby(g)
	{
		.._groupby = g;
		return owner;
	}

	def result()
	{
		if .._project == nil {
			attrs = [];
			for key, value in owner._table.MEMBERS {
				if value < orm.query.TYPE {
					attrs.push_back(key);
				}
			}
			
			select_list = strings.join(', ', attrs...);
		}
		else {
			select_list = .._project;
		}

		if .._where != nil {
			query = 'select %s from %s where %s' % (select_list, owner._table._name, .._where);
		}
		else {
			query = 'select %s from %s' % (select_list, owner._table._name);
		}
		
		if .._orderby.TYPE != nil.TYPE {
			query += ' order by %s' % .._orderby;
		}

		print: query;
		res = orm.conn.execute(query);
		return orm.row_iter.clone(owner._table, res);
	}
}



# main model base

def _name;
def _meta := {,};

def where(q)
{
	f = ..filter.clone(owner);
	return f.where(q);
}

def orderby(o)
{
	f = ..filter.clone(owner);
	return f.orderby(o);
}

def project(p)
{
	f = ..filter.clone(owner);
	return f.project(p);
}

def groupby(g)
{
	f = ..filter.clone(owner);
	return f.project(g);
}

def result()
{
	f = ..filter.clone(owner);
	return f.result();
}

#
# about meta processing for multi column index
#
def primary_key(...argv)
{
	.._meta['primary key'] = argv;
}

def index(...argv)
{
	.._meta['index_%s' % strings.join('_', argv...)] = argv;
}

def unique(...argv)
{
	.._meta['unique_%s' % strings.join('_', argv...)] = argv;
}

def unique_index(...argv)
{
	.._meta['uindex_%s' % strings.join('_', argv...)] = argv;
}



#
# about io.
#
def initialize()
{
	if .._name == nil {
		for key, value in ..MEMBERS {
			if value < orm.query.TYPE {
				value.qstr = key;
			}
		}

		.._name = ..NAME;
	}
}

def create_table()
{
	..initialize();
	owner();

	attrs = [];
	for key, value in ..MEMBERS {
		if value < orm.query.TYPE {
			attr = value;
			#if attr.meta < type.list {
			meta = '';
			if attr.meta != nil && attr.meta.size() > 0 {
				meta = strings.join(' ', attr.meta...);
			}

			attrs.push_back('%s %s %s' % (attr.qstr, attr.type, meta));
		}
	}

	for k, v in .._meta {
		if k.starts_with('unique_') {
			attrs.push_back('constraint %s unique %s' % (k, repr(v)));
		}
		elif k == 'primary key' {
			attrs.push_back('primary key %s' % repr(.._meta['primary key']));
		}
	}

	attr_list = strings.join(', ', attrs...);
	

	query = 'create table %s (%s)' % (.._name, attr_list);
	print: query;

	try {
		res = orm.conn.execute(query);
	}
	catch db.execute as e {
		print: e.what();
	}

	for k, v in .._meta {
		if k.starts_with('index_') {
			query = 'create index %s on %s%s' % (k, .._name, repr(v));
		}
		elif k.starts_with('uindex_') {
			query = 'create unique index %s on %s%s' % (k, .._name, repr(v));
		}
		else {
			continue;
		}

		print: query;

		try {
			res = orm.conn.execute(query);
		}
		catch db.execute as e {
			print: e.what();
		}
	}

	print: res();
}


def new()
{
	ins = orm.instance.clone();
	ins.MEMBERS['__name__'] = .._name;
	for key,value in ..MEMBERS {
		if value < orm.query.TYPE {
			ins.MEMBERS[key] = nil;
		}
	}

	ins.MEMBERS['__model__'] = owner;
	return ins;
}


