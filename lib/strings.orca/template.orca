using sorted;
using strings;

#print: argv;
#name = argv[0];
#ts = argv[1];
#body = argv[2];
#params = argv[3];
#position = argv[4];

return .process_context(argv...);


def process_context(...argv)
{
	def txt_object(req)
	{
		def __template;
		def __id;
		def __position;

		def init(...argv)
		{
			..__id = argv[0];
			..__template = argv[2];
			..__position = argv[4];
		}

		# STEP 1: process prepare
		if my.MEMBERS.has_key('prepare') {
			ret = my.prepare(req);
			if ret.TYPE == ''.TYPE {
				return ret;
			}
		}

		# STEP 2: process embedded object
		template = my.__template;
		token = {,};
		for key, value in my.MEMBERS {
			if key.starts_with('embed_') {
				if !my.__position.has_key(key) {
					continue;
				}

				ret = value(req);
				pos = my.__position[key];
				token[pos] = ret;

			}
		}

		if token.size() > 0 {
			result = strings.builder();
			start = 0;
			lines = my.__template.split('\n');

			for k, v in token { // as you know, it's ordered
				if k > start {
					result.push_back(strings.join('\n', lines[start:k]...));
				}

				result.push_back(v);
				start = k+1;
			}

			result.push_back(strings.join('\n', lines[k+1:]...));
			template = result.string();
		}


		# STEP 3: process dictionary format
		keys = template.list_format();
		#print: keys;

		dict = {,};
		for key in sorted(keys) {
			if my.MEMBERS.has_key(key) {
				value = my.MEMBERS[key](req);
				dict[key] = value;
			}
			elif owner.MEMBERS.has_key(key) {
				value = owner.MEMBERS[key](req);
				dict[key] = value;
			}
			elif req.get.has_key(key) {
				dict[key] = req.get[key];
			}
			elif req.post.has_key(key) {
				dict[key] = req.post[key];
			}
			else {
				dict[key] = '';
			}
		}

		bdr = strings.builder();
		bdr.push_back(template % dict);

		return bdr.string();
	}

	ret = my.txt_object.clone(argv...);
	return ret;
}





