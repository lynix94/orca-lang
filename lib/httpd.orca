using socket;
using thread;
using time;
using pack;
using fun;
using fs;
using osp;
using random;

using httpd;

print: '## httpd start';

def sock;

if os.isdir(argv[0]) == false: {
	print: argv[0], ' is not directory';
	return;
}

os.cd(argv[0]);

.sock = socket.create();
.sock.bind(argv[1]);
.sock.listen();

do {
	sock = .sock.accept();
	cl = .client.clone(sock);
	thread.run(cl.run);
} while(true);

.sock.close();
return;


def init_once
{
	owner.session.init();
}


def client
{
	def sock;
	def obj_stack;

	def init(s)
	{
		..sock = s;
	}

	def send(msg)
	{
		#print: ' >> ', msg;
		..sock.send(msg);
	}

	def send_error(msg)
	{
		res = '''HTTP/1.1 ${msg}
Server: Orca/0.4 (Unix)  (Red-Hat/Linux)
Accept-Ranges: bytes
Content-Length: ${msg.length()}
Connection: close
Content-Type: text/html; charset=UTF-8

''';
		..send(res);
		..send(msg);
	}

	def send_response(header, msg)
	{
		res = '''HTTP/1.1 200 OK
Server: Orca/0.4 (Unix)  (Red-Hat/Linux)
Accept-Ranges: bytes
Content-Length: ${msg.length()}
Connection: close
Content-Type: text/html; charset=UTF-8
${header}

''';
		..send(res);
		..send(msg);
	}

	def recv()
	{
		msg = ..sock.recv();
		print: ' << ', msg;

		len = 0;
		hlen = 0;
		CL = msg.find(r'Content-Length: ([0-9]+)');
		if CL != nil: {
			len = CL[1][0].integer();
			hlen = CL[1][2];
		}

		len += hlen;
		if msg.length() >= len: {
			return msg;
		}

		do {
			part = ..sock.recv(0, 2000);
			if part.length() == 0: break;
			msg.push_back(part);
		} while msg.length() < len;

		return msg;
	}

	def run()
	{
		print: 'thread ${my.id} launced';

		do {
			try {
				print:'## wait...';

				cmd = ..recv();
				..do_what(cmd);
				..sock.close();
				break;
			}
			catch io.socket {
				print: 'socket disconnected';
				..sock.close();
				break;
			}
		} while(true);

		print: 'thread ${my.id} done';
	}

	def get_param(str, p)
	{
		if p == nil: p = type.map();

		str = str.strip();
		list = str.chomp('&');
		for a in list: {
			kv = a.chomp('=');
			k = kv[0];
			v = '';
			if kv.size() > 1:
				v = kv[1];

			p[k] = v;
		}

		return p;
	}

	def do_what(msg)
	{
		header = '';
		body = '';
		url = '.' + msg.find(r'[GET|POST] ([^ ]+) ')[1][0];

		ret = url.chomp('?');
		uri = ret[0];

		// process url parameters
		p = type.map();
		if ret.size() > 1:
			p = ..get_param(ret[1], p);

		// process cookie
		cookie = msg.find(r'Cookie: ([^\n]+)');
		if cookie != nil: {
			str = cookie[1][0];
			str_list = str.chomp('; ');
			for a in str_list:
				p = ..get_param(a, p);
		}

		// process multipart parameters
		multi = msg.find(r'Content-Type: multipart/form-data; boundary=([-_0-9a-zA-Z]+)');

		if multi != nil: {
			boundary = '--' + multi[1][0];
			list = msg.chomp(boundary);
			list.pop_front();
			list.pop_back();

			it = list.begin();
			for a in it: {
				name = a().find(r'name=\"([^\"]+)\"');
				if name == nil: continue;
				name = name[1][0];

				value = a().find(r'[\r|]\n[\r|]\n(.*)');
				if value == nil: continue;
				value = value[1][0];

				p[name] = value;
			}
		}
		else: {
			// process post parameter
			post_param = msg.find(r'[\r|]\n[\r|]\n([a-zA-Z_][a-zA-Z_0-9=&]+)');

			if post_param != nil: 
				p = ..get_param(post_param[1][0], p);
		}
		

		// process response
		if !fs.isexists(uri): {
			..send_error('404 Not Found');
			return;
		}

		if fs.isdir(uri): {
			uri += '/index.html';
		}

		if uri.ends_with('.orca'): {
			mod_path = uri[:-5] + '.kw';
			reload = true;
			if fs.isexists(mod_path): {
				mod_time = os.last_write_time(mod_path);
				src_time = os.last_write_time(uri);

				if mod_time >= src_time: 
					reload = false;
			}

			mod_name = mod_path[:-3];
			idx = mod_name[-1:0).find('/');
			if idx > 0: {
				idx *= -1;
				mod_name = mod_name[idx:];
			}

			if reload: 
				orca.unload(mod_name, httpd);

			orca.load(uri[:-5], httpd);

			f = httpd.members[mod_name];
			ret = f(p);
			header = ret[0];
			body = ret[1];
		}
		elif uri.ends_with('.osp'): {
			ret = osp(uri, p);
			header = ret[0];
			body = ret[1];
		}
		else: {
			try {
				body = fs.read(uri);
			}
			catch {
				..send_error('404 Not Found');
				return;
			}
		}

		..send_response(header, body);
	}
}



def session 
{
	def init
	{
		..session = type.map();
		random.seed();
	}

	def session;

	def alloc_session()
	{
		id = random.string(20);
		..session[id] = type.map();

		return id;
	}

	def get_session(id)
	{
		if ..session.has_key(id):
			return ..session[id];

		return nil;
	}

	def free_session(id)
	{
		if ..session.has_key(id):
			..session.remove_key(id);
	}
}

