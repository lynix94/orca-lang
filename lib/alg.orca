
def traverse(obj, fun)
{
	fun(obj);
	if obj.MEMBERS.has_key('iter') {
		for a in obj.iter() {
			traverse(a(), fun);
		}
	}
}

def for_each(first, end, fun)
{
	iter = first;

	try {
		while iter != end {
			fun(iter());
			iter.next();
		}
	} catch orca.iter {
		// ignore
	}
}

def for_each_iterator(first, end, fun)
{
	iter = first;

	try {
		while iter != end {
			fun(iter);
			iter.next();
		}
	} catch orca.iter {
		// ignore
	}
}


def find(first, end, val)
{
	iter = first;

	try {
		while iter != end {
			if iter() == val {
				return iter;
			}
			iter.next();
		}
	} catch orca.iter {
		// ignore
	}

	return end;
}


def find_if(first, end, fun)
{
	iter = first;

	try {
		while iter != end {
			if fun(iter()) {
				return iter;
			}

			iter.next();
		}
	} catch orca.iter {
		// ignore
	}

	return end;
}


def remove(first, end, val)
{
	iter = first;

	try {
		while iter != end {
			if iter() == val {
				iter.erase();
			}
			else {
				iter.next();
			}
		}
	} catch orca.iter {
		// ignore
	}
}


def remove_if(first, end, fun)
{
	iter = first;

	try {
		while iter != end {
			if fun(iter()) {
				iter.erase();
			}
			else {
				iter.next();
			}
		}
	} catch orca.iter {
		// ignore
	}
}


def replace(first, end, old, new)
{
	iter = first;

	try {
		while iter != end {
			if iter() == old {
				iter(new);
			}

			iter.next();
		}
	} catch orca.iter {
		// ignore
	}
}


def replace_if(first, end, fun, new)
{
	iter = first;

	try {
		while iter != end {
			if fun(iter()) {
				iter(new);
			}

			iter.next();
		}
	} catch orca.iter {
		// ignore
	}
}


def erase(first, end)
{
	iter = first;
		try {
		while iter != end {
			iter.erase();
		}
	} catch orca.iter {
		// ignore
	}
}


def copy(first, end, dest)
{
	iter = first;

	try {
		while iter != end {
			dest.insert(iter());
			iter.next();
		}
	} catch orca.iter {
		// ignore
	}
}


def copy_n(first, n, dest)
{
	iter = first;

	try {
		n times do {
			dest.insert(iter());
			iter.next();
		}
	} catch orca.iter {
		// ignore
	}
}


def count(first, end, val)
{
	iter = first;
	i = 0;

	try {
		while iter != end {
			if iter() == val {
				i+=1;
			}

			iter.next();
		}
	} catch orca.iter {
		// ignore
	}

	return i;
}


def count_if(first, end, fun)
{
	iter = first;
	i = 0;

	try {
		while iter != end {
			if fun(iter()) {
				i+=1;
			}

			iter.next();
		}
	} catch orca.iter {
		// ignore
	}

	return i;
}


def transform(first, end, p1, p2, p3)
{
	iter = first;

	try {
		if p3 == nil {
			# transform(first, end, out, fun)
			out = p1;
			fun = p2;

			while iter != end {
				out.insert(fun(iter()));
				iter.next();
			}
		}
		else {
			# transform(first, end, first2, out, fun)
			first2 = p1;
			out = p2;
			fun = p3;

			while iter != end {
				out.insert(fun(iter(), first2()));
				iter.next();
				first2.next();
			}
		}
	} catch orca.iter {
		// ignore
	}
}

def equal(first, end, first2, fun)
{
	try {
		while first != end {
			if fun == nil {
				if first() != first2() {
					return false;
				}
			}
			else {
				if fun(first(), first2()) == false {
					return false;
				}
			}
			
			first.next();
			first2.next();
		}
	} catch orca.iter {
		// ignore
	}

	return true;
}


def equal_range(first, end, val)
{
	try {
		while first != end {
			if first() != val {
				return false;
			}
			
			first.next();
		}
	} catch orca.iter {
		// ignore
	}

	return true;
}


