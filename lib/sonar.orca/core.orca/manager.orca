using sonar;
using os;
using io.open;
using time;
using socket;
using thread;


def create_app(basepath, appname)
{
	os.mkdir('%s/%s.orca' % (basepath, appname));

	f = open('%s/%s.orca/models.orca' % (basepath, appname), 'w');
	f.write(sonar.template.template_models);
	f.close();

	f = open('%s/%s.orca/index.orca.html' % (basepath, appname), 'w');
	f.write(sonar.template.template_page % {'name':appname});
	f.close();
}

def execute(...argv)
{
	print: argv;
	if argv == nil || argv.size() == 0 {
		print: '# nothing todo';
		return;
	}

	switch argv[0]
	{
	case 'runserver':
		print: '# runserver';
		if argv.size() < 2 {
			print: 'insufficient parameter: address is needed';
			return;
		}

		while true {
			os.system('orca manage run %s &' % argv[1]);
			while true {
				time.sleep(10);
			}
		}

	case 'run':
		print: '# run';
		if argv.size() < 2 {
			print: 'insufficient parameter: address is needed';
			return;
		}

		..server(argv[1]);
		print: 'server shutdowned';

	case 'newapp':
		print: '# newapp';
		if argv.size() < 2 {
			print: 'insufficient parameter: app name is required';
			return;
		}

		..create_app('.', argv[1]);

	case 'migrate':
		print: '# migrate';
	
	default:
		print: '# nothing todo';
	}
}



def server(addr)
{
	def addr;

	print: addr;
	my.addr = addr;

	print: 'server start...';
	sonar.core.httpd(addr);
	print: 'server shutdown...';
	time.sleep(2);
	return;

	def quit()
	{
		sonar.core.httpd.quit = true;
		
		sock = socket.create();
		..addr.split(':') -> ip, port;
		sock.connect(ip, port);
		sock.send('GET / HTTP/1.1\n\n'); # dummy request
		time.sleep(2);
		sock.close();
	}
}



