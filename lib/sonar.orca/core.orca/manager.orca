using sonar;
using os;
using ipc;
using io.open;
using time;
using socket;
using thread;


def create_app(basepath, appname)
{
	os.mkdir('%s/%s.orca' % (basepath, appname));

	f = open('%s/%s.orca/models.orca' % (basepath, appname), 'w');
	f.write(sonar.template.template_models);
	f.close();

	f = open('%s/%s.orca/index.orca.html' % (basepath, appname), 'w');
	f.write(sonar.template.template_page % {'name':appname});
	f.close();
}

def execute(...argv)
{
	def usage()
	{
		msg = '''[usage]
orca manage runserver 127.0.0.1:8000'
orca manage newapp APP_NAME
orca manage migrate ''';

		print: msg;
	}

	#print: argv;
	if argv == nil || argv.size() == 0 {
		my.usage();
		return;
	}

	switch argv[0]
	{
	case 'runserver':
		if argv.size() < 2 {
			print: 'insufficient parameter: address is needed\n';
			my.usage();
			return;
		}

		print: 'runserver...';
		while true {
			pid = os.fork();
			if pid == 0 {
				..server(argv[1]);
				return;
			}
		

			while true {
				if sonar.core.reloader(os.cwd()) == true {
					print: 'reloading...';
					ipc.kill(pid, ipc.SIGINT);
					time.sleep(1);
					break;
				}

				time.sleep(3);
			}
		}

	case 'newapp':
		if argv.size() < 2 {
			print: 'insufficient parameter: app name is required\n';
			my.usage();
			return;
		}

		if os.isexists('%s.orca' % argv[1]) {
			print: '%s already exists' % argv[1];
			return;
		}

		..create_app('.', argv[1]);
		print: 'newapp %s is created' % argv[1];

	case 'migrate':
		sonar.orm.migrate(os.cwd());
		print: 'migrate done';
	
	default:
		my.usage();
		return;
	}
}



def server(addr)
{
	def addr;

	print: addr;
	my.addr = addr;

	print: 'server start...';
	
	orca.load('settings');
	root.settings();

	orca.load('urls');
	root.urls();

	sonar.orm.initialize(); // model initialize

	sonar.core.httpd(addr);
}



