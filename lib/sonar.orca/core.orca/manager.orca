using sonar;
using os;
using ipc;
using io.open;
using time;
using socket;
using thread;


def create_app(basepath, appname)
{
	os.mkdir('%s/%s.orca' % (basepath, appname));

	f = open('%s/%s.orca/models.orca' % (basepath, appname), 'w');
	f.write(sonar.template.template_models);
	f.close();

	f = open('%s/%s.orca/index.orca.html' % (basepath, appname), 'w');
	f.write(sonar.template.template_page % {'name':appname});
	f.close();
}

def execute(...argv)
{
	print: argv;
	if argv == nil || argv.size() == 0 {
		print: '# nothing todo';
		return;
	}

	switch argv[0]
	{
	case 'runserver':
		print: '# runserver';
		if argv.size() < 2 {
			print: 'insufficient parameter: address is needed';
			return;
		}

		while true {
			pid = os.fork();
			if pid == 0 {
				..server(argv[1]);
				return;
			}
		

			while true {
				if sonar.core.reloader(os.cwd()) == true {
					print: 'reloading...';
					ipc.kill(pid, ipc.SIGINT);
					time.sleep(1);
					break;
				}

				time.sleep(3);
			}
		}

	case 'newapp':
		print: '# newapp';
		if argv.size() < 2 {
			print: 'insufficient parameter: app name is required';
			return;
		}

		..create_app('.', argv[1]);

	case 'migrate':
		print: '# migrate';
	
	default:
		print: '# nothing todo';
	}
}



def server(addr)
{
	def addr;

	print: addr;
	my.addr = addr;

	print: 'server start...';
	
	orca.load('settings');
	root.settings();

	orca.load('urls');
	root.urls();

	sonar.core.httpd(addr);
}



