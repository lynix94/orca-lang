try {
	a = 10;
	throw aaa;
}
catch aaa {
	print: 'ok, aaa caught';
}
catch bbb {
	print: 'bbb caught';
	throw test.ex <- 'invalid catch';
}

def foo(a)
{
	b = a;
	throw a.b.c;
}


try {
	a = 10;
	my.foo(10);
}
catch {
	print: 'my.foo caught';
	a = 0;
}
finally {
	print: 'fainally caught';
	a += 1;
}


if a != 1 {
	throw test.ex <- 'invalid catch';
}



try {
	try {
		try {
			a = 10;
			throw ccc;
		} catch aaa {
			print: 'aaa caught';
			throw test.ex <- 'invalid catch';
		}
	}
	catch bbb {
		print: 'bbb caught';
		throw test.ex <- 'invalid catch';
	}
}
catch ccc {
	print: 'ccc caught';

}
finally {
	print: 'fainally caught';
}


# exception argument

try {
	throw aaa <- 10, 20.0, 'str';
}
catch aaa -> a, b, c {
	if a != 10 {
		throw test.ex <- 'exception param fail';
	}

	if b != 20.0 {
		throw test.ex <- 'exception param fail';
	}

	if c != 'str' {
		throw test.ex <- 'exception param fail';
	}
}

def nested() {
	try {
		a = 'test';
		throw foo <- a, 'test2';
	}
	catch bar -> msg {
		print: msg;
	}
}

try {
	.nested();
}
catch foo -> msg, msg2 {
	print: msg, msg2;
}

if msg != 'test' || msg2 != 'test2' {
	throw test.ex <- 'nested exception fail';
}

try {
	throw test.ex <- 'default msg';
}
catch -> msg {
	print: msg;
}

if msg != 'default msg' {
	throw test.ex <- 'default msg fail';
}


print: 'OK';


