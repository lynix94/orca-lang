

def one_to_hundred 
{
	# execution is get value
	return .cur;

	def init()
	{
		..cur = 1;
	}

	def cur;
	def next() 
	{
		if ..cur > 100 {
			throw orca.iter;
		}

		..cur += 1;
		if ..cur > 100 {
			return nil;
		}

		return owner;
	}
}

it = my.one_to_hundred.clone();

sum = 0;
for i in it {
	sum += i();
}
print: 'sum1: ', sum;

sum2 = 0;
for i in [1..100] {
	sum2 += i;
}
print: 'sum2: ', sum2;

if sum != sum2 {
	throw test.iter, 'test iterator fail';
}


sum = 0;
item = [1..100];
for a in item.begin() {
	sum += a();
}

print: 'list sum: ', sum;
if sum != sum2 {
	throw test.iter, 'test iterator fail';
}


item = [1..100];
for a in item.begin() {
	a(a()*2);
}

print: 'item: ', item;

if item != %[2*x|x<-1~100] {
	throw test.iter, 'test iterator fail';
}

sum = 0;
item = (1..100);
for a in item.begin() {
	sum += a();
}

print: 'tuple sum: ', sum;
if sum != sum2 {
	throw test.iter, 'test iterator fail';
}

item = (1..100);
for a in item.begin() {
	a(a()*2);
}

print: 'tuple pow sum: ', item;

if item != %[2*x|x<-1~100].tuple() {
	throw test.iter, 'test iterator fail';
}

	
sum = 0;
item =  { 1:1, 2:2, 3:3, 4:4, 5:5 };
for a in item.begin() {
	sum += a.second();
}

print: 'map sum: ', sum;
if sum !=  1+2+3+4+5 {
	throw test.iter, 'test iterator fail';
}

item =  { 1:1, 2:2, 3:3, 4:4, 5:5 };
for a in item.begin() {
	a(a.second()*2);
}

print: 'map pow sum: ', item;

if item  !=  { 1:2, 2:4, 3:6, 4:8, 5:10 } {
	throw test.iter, 'test iterator fail';
}

print: 'OK';


