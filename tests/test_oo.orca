
using test_oo;
using io.print;

def base
{
  def m1;
  def m2;

  def init {
    owner.m1 = 0;
    owner.m2 = 0;
  }

  def foo1 {
    owner.m1 = 10;
  }

  def foo2 {
    owner.m2 = 10;
  }
}

def derived : test_oo.base
{
  def foo1 {
    owner.m1 = 20;
  }

  def foo2 {
    owner.m2 = 20;
  }
}


a = my.derived.clone();
b = a.clone();

if !(b.type < my.base):
	throw test.oo, 'issubclassof fail';

if !(a.type <= my.derived):
	throw test.oo, 'isinstanceof fail';

a.init();
b.init();
print(a.m1, ' ', a.m2);
if a.m1 != 0 || a.m2 != 0:
	throw test.oo, 'init fail';

a.foo1();
a.foo2();
print: '${a.m1} ${a.m2}';
if a.m1 != 20 || a.m2 != 20: 
	throw test.oo, 'instance a fail';

print(b.m1, ' ', b.m2);
if b.m1 != 0 || b.m2 != 0:
	throw test.oo, 'instance b fail';


print('OK');



