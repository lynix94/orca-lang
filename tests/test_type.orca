

print: '# type traits';

print: ret = type.list(1,2,3);
if ret != [1,2,3] {
	throw test.type <- 'type testing is failed';
}
	
print: ret = type.tuple(1,2,3);
if ret != (1,2,3) {
	throw test.type <- 'type testing is failed';
}
	
print: ret = type.map(1,2,3,4);
if ret != { 1:2, 3:4 } {
	throw test.type <- 'type testing is failed';
}
	
str = '[0-9]+';
print: ret = type.regex(str);
if ret != '0123456789' {
	throw test.type <- 'type testing is failed';
}
	
if ret == '0123456789a' {
	throw test.type <- 'type testing is failed';
}

print: '# TYPENAME test';
	
if [1,2,3].TYPENAME != 'list' {
	throw test.type <- 'type testing is failed';
}

if (1,2,3).TYPENAME != 'tuple' {
	throw test.type <- 'type testing is failed';
}

if {1:2}.TYPENAME != 'map' {
	throw test.type <- 'type testing is failed';
}

if 1.TYPENAME != 'int' {
	throw test.type <- 'type testing is failed';
}

if 10000000000000000000000000000000000000.TYPENAME != 'int' {
	throw test.type <- 'type testing is failed';
}

if 0.1.TYPENAME != 'float' {
	throw test.type <- 'type testing is failed';
}

if 'str'.TYPENAME != 'string' {
	throw test.type <- 'type testing is failed';
}

if true.TYPENAME != 'bool' {
	throw test.type <- 'type testing is failed';
}

if !my.TYPENAME.starts_with('object') {
	throw test.type <- 'type testing is failed';
}

print: '#is instace of test';
if (1 < type.int) == false {
	throw test.type <- 'type testing is failed';
}

if (10000000000000000000000000000000000000 < type.int) == false {
	throw test.type <- 'type testing is failed';
}

if (1.0 < type.float) == false {
	throw test.type <- 'type testing is failed';
}

if ('string' < type.string) == false {
	throw test.type <- 'type testing is failed';
}

if (1 < type.str) == true {
	throw test.type <- 'type testing is failed';
}

if (10000000000000000000000000000000000000 < type.float) == true {
	throw test.type <- 'type testing is failed';
}

if (1.0 < type.integer) == true {
	throw test.type <- 'type testing is failed';
}

if ('string' < type.int) == true {
	throw test.type <- 'type testing is failed';
}

if (1 < io.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

if (10000000000000000000000000000000000000 < io.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

if (1.0 < io.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

if ('string' < io.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

a = io.clone();
if (a < io.TYPE) == false {
	throw test.type <- 'type testing is failed';
}

if (a < root.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

if (a.TYPE < io.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

if (a.TYPE < root.TYPE) == true {
	throw test.type <- 'type testing is failed';
}

def foo : io { }

if (.foo.TYPE < io.TYPE) == false {
	throw test.type <- 'type testing is failed';
}


print: '#is subclass of test';






print: 'OK: ', my;



