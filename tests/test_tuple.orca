
a = (,);
if a.size() != 0 {
	throw test.tuple <- 'make empty tuple failed';
}

a = ( 1, 2, 3, 4, 5 );

print: a[0:];
if a[0:] != a {
	throw test.tuple <- 'tuple slice fail';
}

print: a[-1:0);
if a[-1:0) != (5, 4, 3, 2, 1,) {
	throw test.tuple <- 'tuple reverse fail';
}

b = a[2:3];

print: b;
if b != [3].tuple() {	# (3) does not means tuple (expression with paren)
	throw test.tuple <- 'tuple index fail';
}

print: (1,2,3,4,5,).list();
if (1,2,3,4,5).list() != [1, 2, 3, 4, 5] {
	throw test.tuple <- 'tuple to list fail';
}

print: a.size();
if a.size() != 5 {
	throw test.tuple <- 'tuple size fail';
}
	
print: (1..10);
if (1..10) != (1,2,3,4,5,6,7,8,9,10) {
	throw test.tuple <- 'tuple generate fail';
}

a = 2;
print: (3..(-3+a));
if (3..(-3+a)) != (3,2,1,0,-1) {
	throw test.tuple <- 'tuple generate 2 fail';
}

print: (1..10 : 2);
if (1..10 : 2) != (1,3,5,7,9) {
	throw test.tuple <- 'tuple generate fail';
}

print: (10..1 : 2);
if (10..1 : 2) != (10,8,6,4,2) {
	throw test.tuple <- 'tuple generate fail';
}

(1, 2, 3) -> a, b, c, d;
print: (a,b,c,d);
if (a, b, c, d) != (1, 2, 3, nil) {
	throw test.tuple <- 'tuple channel fail';
}

(1, 2, 3, 4) -> a, b;
print: (a,b);
if (a, b) != (1, 2) {
	throw test.tuple <- 'tuple channel fail';
}

(1, 2, 3, 4) -> ...a;
print: a;
if a != (1, 2, 3, 4) {
	throw test.tuple <- 'tuple channel fail';
}


(1, 2, 3, 4) -> a, b, ...c;
print: a, b, c;
if (a, b, c) != (1, 2, (3, 4)) {
	throw test.tuple <- 'tuple channel fail';
}


(1, 2, 3, 4) -> a, b, c, d, e, ...f;
print: a, b, c, d, e, f;
if (a, b, c, d, e, f) != (1, 2, 3, 4, nil, (,)) {
	throw test.tuple <- 'tuple channel fail';
}

a = (1, 2, 3, 4);
a <- 4, 5, 6;
print: a;
if a != (1,2,3,4,4,5,6) {
	throw test.tuple <- 'tuple channel fail';
}

a = (1,2,3, (4,5,6)..., 7);
print: a;
if a != [1..7].tuple() {
	throw test.list <- 'list extract fail';
}

a = (1,2,3, [4,5,6]..., 7);
print: a;
if a != [1..7].tuple() {
	throw test.list <- 'list extract fail';
}

print: 'OK';
return true;

