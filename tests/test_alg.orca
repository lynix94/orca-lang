using alg;

def acc(a)
{
	def sum := 0;

	if a.TYPE == type.int {
		my.sum += a;
	}
}

a = [1, 2, [3, 4, (5, 6)], 7];
my.acc.sum = 0;
alg.traverse (a, my.acc);
print: r = my.acc.sum;

if r != 1+2+3+4+5+6+7 {
	throw test.alg <- 'traverse failed';
}


a = [1..100];
my.acc.sum = 0;
alg.for_each(a.first(), a.end(), my.acc);
print: r = my.acc.sum;

if r != 5050 {
	throw test.alg <- 'for_each failed';
}




a = [1..100];
alg.for_each_iterator(a.first(), a.end(), lambda(it) { it(it()*2); });
print: r = a;

if r != [2..200 : 2] {
	throw test.alg <- 'for_each_iterator failed';
}


a = [1..100];
r = alg.find(a.first(), a.end(), 40);
print: r, ' ', r();

if r() != 40 {
	throw test.alg <- 'find failed';
}



a = [1..100];
r = alg.find_if(a.first(), a.end(), lambda(it){ 
			v = it();
			if v % 3 == 0 && v % 4 == 0 {
				return true;
			}
			return false;
		});

print: r, ' ', r();

if r() != 12 {
	throw test.alg <- 'find_if failed';
}




a = [1..10];
alg.remove(a.first(), a.end(), 3);

print: a;

if a != [1,2,4,5,6,7,8,9,10] {
	throw test.alg <- 'remove failed';
}




a = [1..10];
alg.remove(a.first(), a.end(), -100);

print: a;

if a != [1..10] {
	throw test.alg <- 'remove failed';
}




a = [1..100];
alg.remove_if(a.first(), a.end(), lambda(it){ return it % 3 == 0; });

print: a;

if a != %[x|x<-1~100, x%3!=0] {
	throw test.alg <- 'remove_if failed';
}


a = [1..10];
alg.replace(a.first(), a.end(), 3, 30);

print: a;

if a != [1,2,30,4,5,6,7,8,9,10] {
	throw test.alg <- 'replace failed';
}


a = [1..10];
alg.replace_if(a.first(), a.end(), lambda(it){ return it % 3 == 0; }, 30);

print: a;

if a != [1,2,30,4,5,30,7,8,30,10] {
	throw test.alg <- 'replace_if failed';
}




a = [1..10];
alg.erase(a.find(3), a.find(7));

print: a;

if a != [1,2,7,8,9,10] {
	throw test.alg <- 'erase failed';
}


a = [1..10];
alg.erase(a.find(3), a.find(100));

print: a;

if a != [1,2] {
	throw test.alg <- 'erase failed';
}




a = [1..10];
b = [];
alg.copy(a.first(), a.end(), b.first());

print: b;

if b != [1..10] {
	throw test.alg <- 'copy failed';
}


a = [1..10];
b = [101..110];
alg.copy(a.find(3), a.find(7), b.find(104));

print: b;

if b != [101, 102, 103, 3, 4, 5, 6, 104, 105, 106, 107, 108, 109, 110] {
	throw test.alg <- 'copy failed';
}



a = [1..10];
b = [101..110];
alg.copy_n(a.find(3), 2, b.find(104));

print: b;

if b != [101, 102, 103, 3, 4, 104, 105, 106, 107, 108, 109, 110] {
	throw test.alg <- 'copy_n failed';
}





a = [1, 2, 3, 2, 2, 10, 20, 30];
print: r = alg.count(a.first(), a.end(), 2);

if r != 3 {
	throw test.alg <- 'count failed';
}




a = [1, 2, 3, 2, 2, 10, 20, 30];
print: r = alg.count_if(a.first(), a.end(), lambda(it) { return it%2 == 0; });

if r != 6 {
	throw test.alg <- 'count_if failed';
}


a = [1, 2, 3, 2, 2, 10, 20, 30];
b = [];

alg.transform(a.first(), a.end(), b.first(), lambda(it) { return it*10; });

print: b;
if b != [10, 20, 30, 20, 20, 100, 200, 300] {
	throw test.alg <- 'transform failed';
}



a = [1, 2, 3, 2, 2];
b = [3, 5, 8, 4, 3];
c = [];

alg.transform(a.first(), a.end(), b.first(), c.first(), lambda(a, b){ return a+b; });

print: c; 
if c != [1+3, 2+5, 3+8, 2+4, 2+3] {
	throw test.alg <- 'transform failed';
}



a = [1, 2, 3, 2, 2];
b = ['1', '2', '3', '2', '2'];

print: r = alg.equal(a.first(), a.end(), b.first(), lambda(a, b){ return a == b.integer(); });

if r == false {
	throw test.alg <- 'equal failed';
}



a = [1, 2, 2, 2, 3, 4];

print: r = alg.equal_range(a.first(), a.end(), 2);

if r == true {
	throw test.alg <- 'equal_range failed';
}

print: r = alg.equal_range(a.find(2), a.find(3), 2);

if r == false {
	throw test.alg <- 'equal_range failed';
}

print: 'OK';

