

def foo { }
def child { }

print: my.foo, my.foo.ID;

print: my.foo.MEMBERS['bar'] = 1;
print: my.foo.bar;
if my.foo.bar != 1 {
	throw test.lang <- 'insert member failed';
}


print: my.foo.MEMBERS.has_key('bar');
if my.foo.MEMBERS.has_key('bar') == false {
	throw test.lang <- 'has member failed';
}

print: ret = my.foo.MEMBERS['bar'];
if ret != 1 {
	throw test.lang <- 'get member failed';
}

print: my.foo.MEMBERS['bar'] = 2;
print: my.foo.bar;
if my.foo.bar != 2 {
	throw test.lang <- 'update member failed';
}

a = my.foo.clone();
print: ret = a < my.foo.TYPE;
if  ret != true {
	throw test.lang <- 'isinstanceof failed';
}

print: ret = a < root.TYPE;
if  ret == true {
	throw test.lang <- 'isinstanceof failed';
}


print: ret = my.child.TYPE < my.foo.TYPE;
if ret == true {
	throw test.lang <- 'issubclassof failed';
}

print: my.child.PARENTS;
print: my.child.PARENTS.push_back(my.foo);
print: my.child.PARENTS;

print: ret = my.child.TYPE < my.foo.TYPE;
if ret == false {
	throw test.lang <- 'inherit failed';
}

print: my.child.bar;
if my.child.bar != my.foo.bar {
	throw test.lang <- 'inherit failed';
}

print: my.child.PARENTS.pop_back();

print: ret = my.child.TYPE < my.foo.TYPE;
if ret == true {
	throw test.lang <- 'dont_inherit failed';
}

print: ret = my.foo.TYPE == my.child.TYPE;
if ret == true {
	throw test.lang <- 'issametype failed';
}

print: ret = my.foo.TYPE == a.TYPE;
if ret != true {
	throw test.lang <- 'issametype failed';
}

print: ret = '123'.TYPE == '345'.TYPE;
if ret != true {
	throw test.lang <- 'issametype failed';
}

print: my.foo.NAME;
if my.foo.NAME != 'foo' {
	throw test.lang <- 'NAME failed';
}

my.foo.NAME = 'foo_2';
print: my.foo.NAME;
print: my.MEMBERS;
if my.foo.NAME != 'foo_2' {
	throw test.lang <- 'NAME failed';
}
	
print: 'OK', my;


