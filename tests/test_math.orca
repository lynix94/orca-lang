
using math;

sin = [0..1 : 0.1];
for i in sin.iter() {
	ret = math.sin(i());
	i(ret);
}

print: sin;
if sin[0] != 0 {
	throw test.math <- 'sin failed';
}

	
cos = [0..1 : 0.1];
for i in cos.iter() {
	ret = math.cos(i());
	i(ret);
}
print: cos;
if cos[0] != 1 {
	throw test.math <- 'cos failed';
}
	

tan = [0..1 : 0.1];
for i in tan.iter() {
	ret = math.tan(i());
	i(ret);
}
print: tan;
if tan[0] != 0 {
	throw test.math <- 'tan failed';
}


asin = [0..1 : 0.1];
for i in asin.iter() {
	ret = math.asin(i());
	i(ret);
}
print: asin;
if asin[0] != 0 {
	throw test.math <- 'asin failed';
}
	
acos = [0..1 : 0.1];
for i in acos.iter() {
	ret = math.acos(i());
	i(ret);
}
print: acos;
if acos[0] <= 1.5707 || acos[0] >= 1.5709 {
	throw test.math <- 'acos failed';
}
	

atan = [0..1 : 0.1];
for i in atan.iter() {
	ret = math.atan(i());
	i(ret);
}
print: atan;
if atan[0] != 0 {
	throw test.math <- 'atan failed';
}

sinh = [0..1 : 0.1];
for i in sinh.iter() {
	ret = math.sinh(i());
	i(ret);
}

print: sinh;
if sinh[0] != 0 {
	throw test.math <- 'sinh failed';
}

cosh = [0..1 : 0.1];
for i in cosh.iter() {
	ret = math.cosh(i());
	i(ret);
}
print: cosh;
if cosh[0] != 1 {
	throw test.math <- 'cosh failed';
}

atan2 = [0..1 : 0.1];
for i in atan2.iter() {
	ret = math.atan2(i(), 0);
	i(ret);
}
print: atan2;
if atan2[0] != 0 {
	throw test.math <- 'atan2 failed';
}





print: r = math.ceil(10.1);
if r != 11 {
	throw test.math <- 'ceil failed';
}

print: r = math.ceil(10.999999);
if r != 11 {
	throw test.math <- 'ceil failed';
}

print: r = math.floor(30.3);
if r != 30 {
	throw test.math <- 'floor failed';
}

print: r = math.floor(30.99999);
if r != 30 {
	throw test.math <- 'floor failed';
}

print: r = math.exp(20);
if r <= 4.85164e+08 || r >= 4.85166e+08 {
	throw test.math <- 'exp failed';
}

print: r = math.fabs(-30);
if r.integer() != 30 {
	throw test.math <- 'fabs failed';
}

print: r = math.fabs(-30.0004);
if r.integer() != 30 {
	throw test.math <- 'fabs failed';
}

print: r = math.fabs(-math.exp(20));
if r != math.exp(20) {
	throw test.math <- 'fabs failed';
}

print: r = math.fmod(30.3, 0.4);
if math.ceil(r*10) != 3 {
	throw test.math <- 'fmod failed';
}
	
print: r = math.fmod(30.3, 0.1);
if math.ceil(r*10) != 1 {
	throw test.math <- 'fmod failed';
}

print: r = math.fmod(30.3, 30);
if math.ceil(r*10) != 4 {
	throw test.math <- 'fmod failed';
}

print: r = math.frexp(30.3);
if r.TYPE != type.tuple || math.ceil(r[0]*100000) != 94688 || r[1] != 5 {
	throw test.math <- 'frexp failed';
}

print: r = math.ldexp(30.3, 4);
if r.integer() != 484 {
	throw test.math <- 'ldexp failed';
}

print: r = math.log(1234567890);
if (r*1000).integer() != 20933 {
	throw test.math <- 'log10 failed';
}

print: r = math.log10(10000000);
if r != 7 {
	throw test.math <- 'log10 failed';
}

print: r = math.log10(100000000000000000000);
if r != 20 {
	throw test.math <- 'log10 failed';
}

print: r = math.modf(30.3);
if (r[0]*10).integer() != 3 || r[1] != 30 {
	throw test.math <- 'modf failed';
}

print: r = math.pow(10, 2);
if r != 100 {
	throw test.math <- 'pow failed';
}

print: r = math.sqrt(4);
if r != 2 {
	throw test.math <- 'pow failed';
}

print: 'OK';

