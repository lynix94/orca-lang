
def.parse calc(str)
{
	stmt_done: stmt
				lambda(...argv) {
					..RESULT = argv[0];
				}
		;
	
	stmt : stmt '+' mul
				lambda(...argv) {
					return argv[0] + argv[2];
				}
		| stmt '-' mul
				lambda(...argv) {
					return argv[0] - argv[2];
				}
		| mul
		;

	mul : mul '*' number
				lambda(...argv) {
					return argv[0] * argv[2];
				}
		|  mul '/' number
				lambda(...argv) {
					return argv[0] / argv[2];
				}
		| number
		;

	number : r'[0-9]+'
				lambda(...argv) {
					return argv[0].integer();
				}
		;

	nil : r'[ \t\r\n]+'
		;
}


print: r = my.calc('1*3');
if r != 0 || my.calc.RESULT != 3 {
	print: 't1> %d, %d' % (r, my.calc.RESULT);
	throw test.parsing <- 'parsing result is wrong';
}

print: r = my.calc('1+2-3');
if r != 0 || my.calc.RESULT != 0 {
	print: 't2> %d, %d' % (r, my.calc.RESULT);
	throw test.parsing <- 'parsing result is wrong';
}

print: r = my.calc('3+4*100/20-3');
if r != 0 || my.calc.RESULT != 20 {
	print: 't3> %d, %d' % (r, my.calc.RESULT);
	throw test.parsing <- 'parsing result is wrong';
}

print: 'OK';


