#line 2 "../src/parser/lexer.cpp"

#line 4 "../src/parser/lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[225] =
    {   0,
        0,    0,   79,   77,    1,    5,    1,   77,   67,    3,
       77,   77,   66,   77,   77,   77,   77,   77,   60,   60,
       77,   74,   47,   77,   46,   77,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   77,   75,    1,    4,   49,    0,
        3,    0,   43,    0,   54,   52,    0,   60,   60,   53,
       57,   50,   63,    2,   55,    0,    0,    0,   56,   58,
       45,   48,   44,    0,    0,   59,   73,   72,   59,   59,
       59,   59,   59,   21,   59,   59,   59,   59,   59,   71,
       70,   14,   18,   59,   59,    9,   59,   59,   59,   69,

       68,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   42,   64,   76,   65,   51,    0,    2,    0,   63,
       62,   61,    0,    0,   59,   59,   59,   59,   59,   59,
        7,   59,   59,   59,   59,   59,   17,   59,   59,   37,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   33,
       59,   59,   59,    0,   63,    0,    0,   59,   59,   59,
       59,   59,   59,   15,   16,   39,   59,   59,   59,   59,
       59,   59,   59,   59,   12,   59,   59,   59,   59,   31,
       59,   59,   59,    0,    0,   26,   59,   34,    8,   59,
       59,   32,   59,   59,   59,   10,   59,   24,   59,   59,

       59,   36,   23,   41,   30,   22,   29,   28,   11,   59,
       20,   59,   40,   13,   59,   27,    6,   19,   59,   35,
       59,   25,   38,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,    1,
        1,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   25,   25,   25,   26,   25,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
        1,    1,    1,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   27,   37,   38,   39,   40,
       41,   42,   27,   43,   44,   45,   46,   47,   48,   49,
       50,   27,   51,   52,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    3,    3,    3,
        3,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[229] =
    {   0,
        0,    0,  289,  290,   52,  290,   55,  266,  281,    0,
      269,  276,  274,  261,  260,   46,   56,   56,   65,   70,
      259,  290,   53,  258,  257,   17,    0,   70,   57,   58,
       54,   75,   83,   67,  250,   65,  241,  228,  247,   98,
       64,   82,   79,  239,  221,  290,   63,  290,  290,  266,
        0,  220,  290,  260,  290,  290,  104,    0,  110,  290,
      290,  255,  115,    0,  290,  132,  118,    0,  290,  290,
      290,  290,  290,  227,  222,    0,  290,  290,  234,  108,
      224,  224,  107,    0,  107,  235,  224,  221,  217,  290,
      290,    0,    0,  220,  227,    0,  219,  216,  212,  290,

      290,  209,  212,  224,  215,  207,  210,  106,  217,  211,
      210,  290,  290,  290,  290,  290,  142,    0,  145,  148,
      151,    0,  215,  216,  215,  204,  211,  200,  194,  197,
        0,  204,  204,  197,  190,  205,    0,  203,  185,    0,
      198,  129,  183,  183,  182,  181,  184,  192,  191,    0,
      190,  181,  182,  153,  158,  191,  188,  180,  184,  180,
      182,  177,  181,    0,    0,    0,  179,  172,  178,  170,
      164,  168,  173,  161,    0,  167,  172,  153,  156,    0,
      156,  164,  165,  158,  158,    0,  151,    0,    0,  153,
      160,    0,  153,  162,  157,    0,  150,    0,  147,  154,

      143,    0,    0,    0,    0,    0,  290,  290,    0,  126,
        0,   88,    0,    0,   97,    0,    0,    0,   78,    0,
       67,    0,    0,  290,  176,  178,  182,   74
    } ;

static yyconst flex_int16_t yy_def[229] =
    {   0,
      224,    1,  224,  224,  224,  224,  224,  224,  224,  225,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  224,  224,  224,  224,  224,  224,
      225,  224,  224,  224,  224,  224,  224,   19,  224,  224,
      224,  224,  224,  227,  224,  224,  224,  228,  224,  224,
      224,  224,  224,  224,  224,  226,  224,  224,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  224,
      224,  226,  226,  226,  226,  226,  226,  226,  226,  224,

      224,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  224,  224,  224,  224,  224,  224,  227,  224,  224,
      224,  228,  224,  224,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  224,  224,  224,  224,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  224,  224,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  224,  224,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,    0,  224,  224,  224,  224
    } ;

static yyconst flex_int16_t yy_nxt[344] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   20,   21,   22,
       23,   24,   25,   26,   27,   27,   27,   27,   28,   29,
       30,   31,   32,   27,   33,   34,   27,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   27,   44,   27,   27,
        4,   45,   46,   47,   74,   47,   47,   48,   47,   57,
       75,   58,   59,   59,   47,   70,   47,   60,   61,   62,
       64,   63,   63,   63,   71,   77,  122,   65,   57,   78,
       59,   59,   59,   57,   80,   59,   59,   59,   90,   83,
       66,   85,   91,   67,   81,   66,   66,   82,   84,   92,

       86,   66,   87,  100,  223,   95,   93,  101,  104,  222,
       88,  105,   79,   68,   96,   89,  106,  107,  109,   63,
       63,   63,  110,   57,  108,   59,   59,   59,  221,  102,
       63,   63,   63,  121,  121,   66,  130,  220,  103,  131,
      117,   66,  132,  119,  119,  126,  117,  120,  120,  120,
      133,  149,  127,  154,  154,  150,  172,  155,  155,  155,
      120,  120,  120,  120,  120,  120,  121,  121,  155,  155,
      155,  219,  173,  155,  155,  155,   51,  218,   51,   51,
       76,   76,  118,  217,  118,  118,  216,  215,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,

      202,  201,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  156,  153,  152,  151,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  135,  134,  129,  128,  125,  124,  123,  116,  115,
      114,  113,  112,  111,   99,   98,   97,   94,   73,   72,
       69,   56,   55,   54,   53,   52,   50,   49,  224,    3,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224
    } ;

static yyconst flex_int16_t yy_chk[344] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,   26,    5,    7,    7,    7,   16,
       26,   16,   16,   16,   47,   23,   47,   16,   16,   17,
       18,   17,   17,   17,   23,   28,  228,   18,   19,   28,
       19,   19,   19,   20,   29,   20,   20,   20,   33,   30,
       19,   31,   33,   19,   29,   20,   19,   29,   30,   34,

       31,   20,   32,   40,  221,   36,   34,   40,   41,  219,
       32,   41,   28,   19,   36,   32,   42,   42,   43,   57,
       57,   57,   43,   59,   42,   59,   59,   59,  215,   40,
       63,   63,   63,   67,   67,   59,   83,  212,   40,   83,
       63,   59,   85,   66,   66,   80,   63,   66,   66,   66,
       85,  108,   80,  117,  117,  108,  142,  117,  117,  117,
      119,  119,  119,  120,  120,  120,  121,  121,  154,  154,
      154,  210,  142,  155,  155,  155,  225,  201,  225,  225,
      226,  226,  227,  200,  227,  227,  199,  197,  195,  194,
      193,  191,  190,  187,  185,  184,  183,  182,  181,  179,

      178,  177,  176,  174,  173,  172,  171,  170,  169,  168,
      167,  163,  162,  161,  160,  159,  158,  157,  156,  153,
      152,  151,  149,  148,  147,  146,  145,  144,  143,  141,
      139,  138,  136,  135,  134,  133,  132,  130,  129,  128,
      127,  126,  125,  124,  123,  111,  110,  109,  107,  106,
      105,  104,  103,  102,   99,   98,   97,   95,   94,   89,
       88,   87,   86,   82,   81,   79,   75,   74,   62,   54,
       52,   50,   45,   44,   39,   38,   37,   35,   25,   24,
       21,   15,   14,   13,   12,   11,    9,    8,    3,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../src/parser/lexer.l"
/* vim: set fdc=2 foldmethod=marker ts=4 tabstop=4 sw=4 sts=4 : */
/**********************************************************************

  lexer.l - 

  Copyright (C) 2009-2011 Lee, Ki-Yeul

**********************************************************************/
#line 12 "../src/parser/lexer.l"
#define __LEX__


#if !defined(UNISTD_H)
#define YY_NO_UNISTD_H
#endif

using namespace std;

int my_yyinput(char* buff, int max_size);

#include "parserParser.h"
#include "parser.hpp"
#include "orca_common.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <limits.h>

#ifndef WIN32
#include <readline/readline.h>
#include <readline/history.h>
#endif

#undef YY_INPUT
#define YY_INPUT(buffer, result, max_size) ( result = my_yyinput(buffer, max_size))

static bool g_shell_start = true;
static int g_format_string = 0;
static bool g_comment = false;
static const char* get_string(char end);
static const char* get_comment(char end);
//static const char* get_context();
const char* get_context();
static const char* get_hex_string(char end);
static const char* get_bin_string(char end);
#line 612 "../src/parser/lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 57 "../src/parser/lexer.l"


#line 747 "../src/parser/lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 225 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 290 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "../src/parser/lexer.l"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "../src/parser/lexer.l"
; 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "../src/parser/lexer.l"
; 
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "../src/parser/lexer.l"
{ g_parser->lineno++; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 63 "../src/parser/lexer.l"
{ g_parser->lineno++; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "../src/parser/lexer.l"
{ return STATIC; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "../src/parser/lexer.l"
{ return DEF; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "../src/parser/lexer.l"
{ return CLONE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "../src/parser/lexer.l"
{ return MY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "../src/parser/lexer.l"
{ return OWNER; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "../src/parser/lexer.l"
{ return CALLER; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "../src/parser/lexer.l"
{ return ROOT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "../src/parser/lexer.l"
{ return MODULE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "../src/parser/lexer.l"
{ return IF; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "../src/parser/lexer.l"
{ return ELIF; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "../src/parser/lexer.l"
{ return ELSE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "../src/parser/lexer.l"
{ return FOR; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "../src/parser/lexer.l"
{ return IN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "../src/parser/lexer.l"
{ return SWITCH; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "../src/parser/lexer.l"
{ return DECODE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "../src/parser/lexer.l"
{ return DO; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "../src/parser/lexer.l"
{ return WHILE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "../src/parser/lexer.l"
{ return TIMES; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "../src/parser/lexer.l"
{ return PARSE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 88 "../src/parser/lexer.l"
{ return CONTINUE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 89 "../src/parser/lexer.l"
{ return BREAK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 90 "../src/parser/lexer.l"
{ return RETURN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "../src/parser/lexer.l"
{ return STACK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "../src/parser/lexer.l"
{ return LOCAL; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "../src/parser/lexer.l"
{ return USING; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 97 "../src/parser/lexer.l"
{ return TRUE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 98 "../src/parser/lexer.l"
{ return FALSE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 100 "../src/parser/lexer.l"
{ return TRY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 101 "../src/parser/lexer.l"
{ return CATCH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 102 "../src/parser/lexer.l"
{ return FINALLY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 103 "../src/parser/lexer.l"
{ return THROW; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "../src/parser/lexer.l"
{ return NIL_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "../src/parser/lexer.l"
{ return PARALLEL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "../src/parser/lexer.l"
{ return EVAL; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 109 "../src/parser/lexer.l"
{ return LAMBDA; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 110 "../src/parser/lexer.l"
{ return UNDER; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 114 "../src/parser/lexer.l"
{ return OR; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "../src/parser/lexer.l"
{ return AND; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "../src/parser/lexer.l"
{ return GE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "../src/parser/lexer.l"
{ return LE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "../src/parser/lexer.l"
{ return GT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "../src/parser/lexer.l"
{ return LT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "../src/parser/lexer.l"
{ return EQ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "../src/parser/lexer.l"
{ return NEQ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "../src/parser/lexer.l"
{ return DOUBLE_DOT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "../src/parser/lexer.l"
{ return TRIPLE_DOT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 125 "../src/parser/lexer.l"
{ return ADD_ASSIGN; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 126 "../src/parser/lexer.l"
{ return SUB_ASSIGN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 127 "../src/parser/lexer.l"
{ return MUL_ASSIGN; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 128 "../src/parser/lexer.l"
{ return DIV_ASSIGN; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 129 "../src/parser/lexer.l"
{ return ASSIGNMENT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 131 "../src/parser/lexer.l"
{ return RIGHT_ARROW; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 132 "../src/parser/lexer.l"
{ return LEFT_ARROW; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 136 "../src/parser/lexer.l"
{
						yylval.cp = g_parser->strdup(yytext);
						return NAME; 
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 141 "../src/parser/lexer.l"
{
						bool minus = false;
						if (yytext[0] == '-') {
							minus = true;
							yytext++;
						}
							
						bool f_overflow = false;
						
						if (strlen(yytext) > 10) {
							f_overflow = true;
						}
						else if (strlen(yytext) == 10) {
							if (strcmp(yytext, "2147483647") > 0) {
								f_overflow = true;
							}
						}

						if (f_overflow) {
							yylval.cp = g_parser->strdup(yytext);

							if (minus) {
								return MINUS_BIG_NUMBER; 
							}

							return BIG_NUMBER;
						}
						
						yylval.integer = atoi(yytext);
						if (minus) {
							yylval.integer *= -1;
							return MINUS_NUMBER; 
						}

						return NUMBER; 
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 178 "../src/parser/lexer.l"
{
						bool minus = false;
						if (yytext[0] == '-') {
							minus = true;
							yytext++;
						}
							
						char* c = yytext+2;
						int i = 0;
						unsigned long long val = 0;
						while (c[i] != '\0') {
							if (val > UINT_MAX) {
								yylval.cp = g_parser->strdup(yytext);
								if (minus) {
									return MINUS_BIG_NUMBER; 
								}

								return BIG_NUMBER;
							}
							else if (c[i] >= '0' && c[i] <='9') 
								val = val * 16 + c[i] - '0';
							else if (c[i] >= 'a' && c[i] <='f') 
								val = val * 16 + c[i] - 'a' + 10;
							else if (c[i] >= 'A' && c[i] <='F') 
								val = val * 16 + c[i] - 'A' + 10;

							i++;
						}

						yylval.integer = val;
						if (minus) {
							yylval.integer *= -1;
							return MINUS_NUMBER; 
						}

						return NUMBER; 
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 216 "../src/parser/lexer.l"
{
						bool minus = false;
						if (yytext[0] == '-') {
							minus = true;
							yytext++;
						}

						char* c = yytext+2;
						int i = 0;
						unsigned long long val = 0;
						while (c[i] != '\0') {
							if (val > UINT_MAX) {
								yylval.cp = g_parser->strdup(yytext);
								if (minus) {
									return MINUS_BIG_NUMBER; 
								}

								return BIG_NUMBER;
							}

							val = val * 2 + c[i] - '0';
							i++;
						}

						yylval.integer = val;
						if (minus) {
							yylval.integer *= -1;
							return MINUS_NUMBER; 
						}

						return NUMBER; 
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 249 "../src/parser/lexer.l"
{
						bool minus = false;
						if (yytext[0] == '-') {
							minus = true;
							yytext++;
						}
							
						yylval.real = atof(yytext);
						if (minus) {
							yylval.real *= -1;
							return MINUS_REAL;
						}
						return REAL;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 264 "../src/parser/lexer.l"
{ 
						yylval.cp = get_comment('\"');
						return STRING;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 269 "../src/parser/lexer.l"
{ 
						yylval.cp = get_comment('\'');

						if (g_format_string) {
							return FORMAT_STRING_HEAD;
						}

						return STRING;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 280 "../src/parser/lexer.l"
{ 
						yylval.cp = get_string('\'');

						if (g_format_string) {
							return FORMAT_STRING_HEAD;
						}

						return STRING; 
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 290 "../src/parser/lexer.l"
{ 
						yylval.cp = get_string('\"');

						if (g_format_string) {
							return FORMAT_STRING_HEAD;
						}

						return STRING; 
					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 300 "../src/parser/lexer.l"
{ 
						yylval.cp = get_string('\'');

						if (g_format_string) {
							return RE_FORMAT_STRING_HEAD;
						}

						return RE_STRING; 
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 310 "../src/parser/lexer.l"
{ 
						yylval.cp = get_string('\"');

						if (g_format_string) {
							return RE_FORMAT_STRING_HEAD;
						}

						return RE_STRING; 
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 320 "../src/parser/lexer.l"
{ 
						yylval.cp = get_hex_string('\'');
						if (yylval.cp == NULL) {
							yyerror("invalid hex string format");
							return NIL_;
						}
						return HEX_STRING; 
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 329 "../src/parser/lexer.l"
{ 
						yylval.cp = get_hex_string('\"');
						if (yylval.cp == NULL) {
							yyerror("invalid hex string format");
							return NIL_;
						}
						return HEX_STRING; 
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 338 "../src/parser/lexer.l"
{ 
						yylval.cp = get_bin_string('\'');
						if (yylval.cp == NULL) {
							yyerror("invalid hex string format");
							return NIL_;
						}
						return HEX_STRING; 
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 347 "../src/parser/lexer.l"
{ 
						yylval.cp = get_bin_string('\"');
						if (yylval.cp == NULL) {
							yyerror("invalid hex string format");
							return NIL_;
						}
						return HEX_STRING; 
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 356 "../src/parser/lexer.l"
{ 
						if (g_shell_start) {
							yylval.cp = get_string('\n');
							bool null_flag = true;
							const char* cp = yylval.cp;
							for(int i=0; i<strlen(cp); i++) {
								if (cp[i] != ' ' && cp[i] != '\t') {
									null_flag = false;
									break;
								}
							}

							if (null_flag == false) {
								return SHELL_STRING_HEAD;
							}
						}

						return ';';
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 376 "../src/parser/lexer.l"
{
						if (g_format_string) {
							if (g_comment) 
								yylval.cp = get_comment(g_format_string);
							else 
								yylval.cp = get_string(g_format_string);

							return FORMAT_STRING_TAIL;
						}
						
						return '}';
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 389 "../src/parser/lexer.l"
{ return ONCE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 391 "../src/parser/lexer.l"
{ g_shell_start = false; return yytext[0]; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 393 "../src/parser/lexer.l"
ECHO;
	YY_BREAK
#line 1414 "../src/parser/lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 225 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 225 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 224);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 392 "../src/parser/lexer.l"




int my_yyinput(char* buff, int max_size)/*{{{*/
{
	int i, n;

retry:

#ifdef WIN32
	if (g_parser->is_interactive()) {
		printf("$ ");
	}

	if (fgets(buff, max_size, g_parser->curr_fp) == NULL) {
		n = 0;
	}
	else {	
		n = strlen(buff);
	}
#else
	if (g_parser->is_interactive()) {
		char *cp, *line = readline("$ ");
		if (line != NULL) {
			for(cp = line; isspace(*cp); cp++);

			if (*cp != '\0') {
				add_history(line);
			}

			strncpy(buff, line, max_size);
			free(line);
			n = strlen(buff);
			buff[n++]='\n';
		}
	}
	else {
		if (fgets(buff, max_size, g_parser->curr_fp) == NULL) {
			n = 0;
		}
		else {
			n = strlen(buff);
		}
	}
#endif

	g_shell_start = false;
	for(i=0; i<strlen(buff); i++) {
		char c = buff[i];

		// if first character is ';', this is shell stmt
		if (c == ';') {	
			g_shell_start = true;
			break;
		}

		if (c != ' ' && c != '\t' && 
		    c != '\n' && c != '\r') 
		{
			break;
		}
	}


	if (g_parser->is_interactive()) {
		if (g_shell_start) {
			buff[n++] = -1;
			buff[n] = 0;
			return n;
		}

		// only whitespaces exist.
		if (i == strlen(buff)) { 
			goto retry;
		}
		
		// delay mode
		if (n >= 2 && buff[n-2] != ';') {
			do {
				printf("* ");
				char add[1024*5];
				if (fgets(add, sizeof(add), g_parser->curr_fp) == NULL) {
					break;
				}

				if (add[0] == '\r' || add[0] == '\n') {
					g_parser->lineno++;
					break;
				}

				// fix. check max_size
				strcat(buff, add);

			} while((strlen(buff) + 100) < max_size);
		}

		n = strlen(buff);
		buff[n++] = -1;
		buff[n] = 0;
	}

	return n;
}
/*}}}*/

static const char* get_string(char end)/*{{{*/
{
	char c;
	string str;
	int i = 0;

	while ((c = lexer->yyinput()) != end && c != 0 && c!= -1) {
		if (c == '\r' || c == '\n') { 
			g_parser->lineno++;
			break;
		}

		if (c == '\\') {
			c = lexer->yyinput();
			if (c == 0 || c == -1) {
				yyerror("empty stream");
				return "";
			}

			switch(c)
			{
			case 'n': str += '\n'; break;
			case 'r': str += '\r'; break; 
			case 'a': str += '\a'; break; 
			case 'b': str += '\b'; break; 
			case 't': str += '\t'; break;
			default: str += c; break;
			}

			continue;
		}

		if (c == '$') {
			c = lexer->yyinput();
			if (c != '{') {
				str += '$';
				str += c;
				continue;
			}
			else {
				lexer->yyunput('{', (char*)lexer->YYText());
				lexer->yyunput('$', (char*)lexer->YYText());
				if (g_format_string && g_format_string != end) yyerror("nested format string is not allowed");
				g_format_string = end;
				break;
			}
		}

		str += c;
	}

	if (c == end && g_format_string == c) {
		g_format_string = 0;
	}

	return g_parser->strdup(str.c_str());
}
/*}}}*/

static const char* get_comment(char end)/*{{{*/
{
	char c;
	string str;
	int i = 0;
	g_comment = true;

	while ((c = lexer->yyinput()) != 0 && c != -1) {
		if (c == end) {
			char c2 = lexer->yyinput();
			if (c2 == end) {
				char c3 = lexer->yyinput();
				if (c3 == end) {
					g_format_string = 0;
					g_comment = false;
					break;
				}	
				lexer->yyunput(c3, (char*)lexer->YYText());
			}
			lexer->yyunput(c2, (char*)lexer->YYText());
		}

		if (c == '\r' || c == '\n') { 
			g_parser->lineno++;
		}

		if (end == '\'' && c == '$') {
			c = lexer->yyinput();
			if (c != '{') {
				str += '$';
				str += c;
				continue;
			}
			else {
				lexer->yyunput('{', (char*)lexer->YYText());
				lexer->yyunput('$', (char*)lexer->YYText());
				g_format_string = end;
				break;
			}
		}

		str += c;
	}

	return g_parser->strdup(str.c_str());
}
/*}}}*/

const char* get_context()/*{{{*/
{
	char c;
	char open = '{';
	char close = '}';
	int depth = 0;

	string str;
	depth++;

	
	c = lexer->yyinput();

	while ((c = lexer->yyinput()) != 0 && c != -1) {
		if (c == open) depth++;
		if (c == close) depth--;

		if (depth == 0 && c == close) {
			break;
		}


		if (c == '\r' || c == '\n') { 
			g_parser->lineno++;
		}

		str += c;
	}

	return g_parser->strdup(str.c_str());
}
/*}}}*/
static const char* get_hex_string(char end)/*{{{*/
{
	char c;
	string str;
	int i = 0;

	while ((c = lexer->yyinput()) != end && c != 0 && c!= -1) {
		if (c == '\r' || c == '\n') { 
			g_parser->lineno++;
			break;
		}

		str += c;
	}

	string out;
	for (int i=0; i<str.length(); i++) {
		int h = str[i];
		if (h == ' ' || h == '\t') continue;
		if (++i == str.length()) return NULL;
		int l = str[i];

		if (isdigit(h)) h -= '0';
		else if (isalpha(h)) h = tolower(h) - 'a' + 10;
		else return NULL;

		if (isdigit(l)) l -= '0';
		else if (isalpha(l)) l = tolower(l) - 'a' + 10;
		else return NULL;

		if (h > 15 || l > 15) return NULL;

		out += h<<4 | l;
	}

	return g_parser->strdup(out.c_str());
}
/*}}}*/

static const char* get_bin_string(char end)/*{{{*/
{
	char c;
	string str;
	int i = 0;

	while ((c = lexer->yyinput()) != end && c != 0 && c!= -1) {
		if (c == '\r' || c == '\n') { 
			g_parser->lineno++;
			break;
		}

		str += c;
	}

	string out;
	int offset = 0;
	int val = 0;
	for (int i=0; i<str.length(); i++) {
		int b = str[i];
		if (b == ' ' || b == '\t') continue;
		if (b != '0' && b != '1') return NULL;
		b -= '0';

		offset++;	
		val <<= 1;
		val += b;
		if ((offset % 8) == 0) {
			out += val;
			val = 0;
		}
	}

	if (val != 0) {
		val <<= (8 - offset % 8);
		out += val;
	}

	return g_parser->strdup(out.c_str());
}
/*}}}*/





