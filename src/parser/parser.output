Terminals unused in grammar

   NEW_LINE
   PARENT
   SWITCH
   DUMP
   CONTEXT


State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: statement_list $end

    1 statement_list: statement_list statement
    2               | statement_list statement_block
    3               | statement

    4 statement_or_block: statement
    5                   | statement_block

    6 statement_block: '{' statement_list '}'
    7                | '{' '}'

    8 open_statement_block: statement_list '}'
    9                     | '}'

   10 statement: expression_stmt
   11          | control_stmt
   12          | selection_stmt
   13          | loop_stmt
   14          | define_stmt
   15          | exception_stmt
   16          | using_stmt
   17          | simple_call_stmt
   18          | shell_stmt
   19          | scope_stmt
   20          | parallel_stmt
   21          | debug_stmt
   22          | channel_stmt
   23          | ';'

   24 $@1: %empty

   25 channel_stmt: expression LEFT_ARROW $@1 expression_list ';'

   26 $@2: %empty

   27 channel_stmt: expression RIGHT_ARROW $@2 assign_target_list ';'

   28 assign_target_list: assign_target_list ',' assign_target
   29                   | assign_target

   30 assign_target: lvar
   31              | postfix_object '.' name_or_string
   32              | postfix_object '.' reserved_object
   33              | postfix_object '[' slice_expression ']' assign_type
   34              | postfix_object '[' slice_expression ')' assign_type
   35              | DOUBLE_DOT name_or_string
   36              | DOUBLE_DOT reserved_object
   37              | '.' name_or_string
   38              | '.' reserved_object

   39 $@3: %empty

   40 scope_stmt: expression $@3 statement_block

   41 $@4: %empty

   42 parallel_stmt: PARALLEL DO $@4 statement_block

   43 $@5: %empty

   44 parallel_stmt: PARALLEL FOR lvar IN object parallel_option $@5 statement_block

   45 parallel_option: %empty
   46                | NAME expression
   47                | NAME expression NAME expression

   48 simple_call_stmt: postfix_object ':' expression_list ';'

   49 $@6: %empty

   50 shell_stmt: $@6 shell_string

   51 shell_string: shell_string format_object
   52             | SHELL_STRING_HEAD

   53 exception_stmt: try_stmt catch_stmt_list_with_finally
   54               | throw_stmt

   55 $@7: %empty

   56 try_stmt: TRY $@7 statement_block

   57 $@8: %empty

   58 catch_stmt_list_with_finally: catch_stmt_list $@8 finally_stmt
   59                             | catch_stmt_list

   60 finally_stmt: FINALLY statement_block

   61 catch_stmt_list: catch_stmt_list catch_stmt
   62                | catch_stmt

   63 $@9: %empty

   64 catch_stmt: CATCH object_path $@9 statement_block

   65 $@10: %empty

   66 catch_stmt: CATCH object_path RIGHT_ARROW name_list $@10 statement_block

   67 $@11: %empty

   68 catch_stmt: CATCH $@11 statement_block

   69 throw_stmt: THROW object_path ';'
   70           | THROW object_path LEFT_ARROW expression_list ';'

   71 using_stmt: USING object_path ';'
   72           | USING object_path STRING ';'

   73 object_path: object_path '.' name_or_string
   74            | name_or_string

   75 debug_stmt: STACK
   76           | LOCAL

   77 control_stmt: RETURN_ opt_expr_list ';'
   78             | CONTINUE ';'
   79             | BREAK ';'

   80 opt_expr_list: %empty
   81              | expression_list

   82 selection_stmt: if_elif_else_stmt
   83               | decode_stmt

   84 $@12: %empty

   85 decode_stmt: DECODE expression $@12 '{' decode_pattern_stmt_list '}'

   86 bnf_stmt_list: bnf_stmt_list bnf_stmt
   87              | bnf_stmt

   88 $@13: %empty

   89 bnf_stmt: bnf_left $@13 ':' bnf_right_list ';'
   90         | '~' ':' terminal ';'

   91 bnf_right_list: bnf_right_list '|' bnf_right
   92               | bnf_right

   93 bnf_left: non_terminal

   94 $@14: %empty

   95 bnf_right: $@14 bnf_right_

   96 bnf_right_: bnf_node_list

   97 bnf_node_list: bnf_node_list bnf_node
   98              | bnf_node

   99 bnf_node: terminal
  100         | non_terminal
  101         | action_code

  102 terminal: STRING
  103         | RE_STRING

  104 non_terminal: name

  105 action_code: lambda_object

  106 decode_pattern_stmt_list: decode_pattern_stmt_list decode_pattern_stmt
  107                         | decode_pattern_stmt

  108 $@15: %empty

  109 $@16: %empty

  110 decode_pattern_stmt: $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block

  111 decode_pattern: pattern_list
  112               | list_pattern

  113 list_pattern: p_var ':' p_var

  114 pattern_list: pattern_list ',' pattern
  115             | pattern

  116 pattern: expression
  117        | p_var
  118        | p_var '=' expression

  119 p_var: '%' lvar

  120 loop_stmt: for_stmt
  121          | do_stmt
  122          | while_stmt
  123          | times_stmt

  124 def: STATIC DEF
  125    | DEF

  126 name_or_string: name
  127               | STRING

  128 opt_under: %empty
  129          | UNDER object_path

  130 define_stmt: def name_or_string ';'

  131 $@17: %empty

  132 define_stmt: def name_or_string ASSIGNMENT $@17 expression ';'

  133 $@18: %empty

  134 define_stmt: def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | def '.' name_or_string name_or_string opt_under '{'

  136 $@19: %empty

  137 define_stmt: def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'

  138 $@20: %empty

  139 define_stmt: def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'

  140 $@21: %empty

  141 once_expr: ONCE $@21 open_statement_block

  142 $@22: %empty

  143 lambda_object: lambda_define_header opt_superclass $@22 statement_block
  144              | LAMBDA '.' name_or_string '{'
  145              | lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | lambda_parse_header '{' bnf_stmt_list '}'

  147 lambda_define_header: LAMBDA opt_argument_list

  148 lambda_decode_header: LAMBDA '.' DECODE opt_argument_list

  149 lambda_parse_header: LAMBDA '.' PARSE opt_argument_list

  150 opt_superclass: %empty
  151               | ':' expression_list

  152 opt_argument_list: %empty
  153                  | '(' ')'
  154                  | '(' TRIPLE_DOT ')'
  155                  | '(' name_list ')'
  156                  | '(' name_list ',' TRIPLE_DOT ')'

  157 name_list: name_list ',' name
  158          | name

  159 if_elif_else_stmt: if_stmt
  160                  | if_stmt else_stmt
  161                  | if_stmt elif_stmt_list else_stmt
  162                  | if_stmt elif_stmt_list

  163 elif_stmt_list: elif_stmt_list elif_stmt
  164               | elif_stmt

  165 $@23: %empty

  166 $@24: %empty

  167 elif_stmt: ELIF $@23 bool_expr $@24 statement_block

  168 $@25: %empty

  169 else_stmt: ELSE $@25 statement_block

  170 $@26: %empty

  171 if_stmt: IF bool_expr $@26 statement_block

  172 $@27: %empty

  173 do_stmt: DO $@27 statement_block WHILE bool_expr ';'

  174 $@28: %empty

  175 times_stmt: expression TIMES DO $@28 statement_block

  176 $@29: %empty

  177 $@30: %empty

  178 while_stmt: WHILE $@29 bool_expr $@30 statement_block

  179 $@31: %empty

  180 for_stmt: FOR lvar IN object $@31 statement_block

  181 expression_stmt: expression_list ';'

  182 expression_list: expression_list ',' expression
  183                | expression

  184 expression: assign_expr
  185           | once_expr

  186 $@32: %empty

  187 assign_expr: lvar assign_type $@32 expression

  188 $@33: %empty

  189 assign_expr: postfix_object '.' name_or_string assign_type $@33 expression

  190 $@34: %empty

  191 assign_expr: postfix_object '.' reserved_object assign_type $@34 expression

  192 $@35: %empty

  193 assign_expr: postfix_object '[' slice_expression ']' assign_type $@35 expression

  194 $@36: %empty

  195 assign_expr: postfix_object '[' slice_expression ')' assign_type $@36 expression

  196 $@37: %empty

  197 assign_expr: DOUBLE_DOT name_or_string assign_type $@37 expression

  198 $@38: %empty

  199 assign_expr: DOUBLE_DOT reserved_object assign_type $@38 expression

  200 $@39: %empty

  201 assign_expr: '.' name_or_string assign_type $@39 expression

  202 $@40: %empty

  203 assign_expr: '.' reserved_object assign_type $@40 expression
  204            | bool_expr

  205 assign_type: '='
  206            | ADD_ASSIGN
  207            | SUB_ASSIGN
  208            | MUL_ASSIGN
  209            | DIV_ASSIGN

  210 bool_expr: or_expr

  211 $@41: %empty

  212 or_expr: or_expr OR $@41 and_expr
  213        | and_expr

  214 $@42: %empty

  215 and_expr: and_expr AND $@42 not_expr
  216         | not_expr

  217 not_expr: '!' logical_expr
  218         | logical_expr

  219 logical_expr: numeric_expr GT numeric_expr
  220             | numeric_expr GE numeric_expr
  221             | numeric_expr LT numeric_expr
  222             | numeric_expr LE numeric_expr
  223             | numeric_expr EQ numeric_expr
  224             | numeric_expr NEQ numeric_expr
  225             | numeric_expr

  226 numeric_expr: add_expr

  227 add_expr: add_expr '+' mul_expr
  228         | add_expr '-' mul_expr
  229         | add_expr minus_number
  230         | add_expr minus_big_number
  231         | add_expr minus_real
  232         | mul_expr

  233 mul_expr: mul_expr '*' object
  234         | mul_expr '/' object
  235         | mul_expr '%' object
  236         | unary_expr

  237 $@43: %empty

  238 unary_expr: '-' $@43 object
  239           | '+' object
  240           | object

  241 list: '[' opt_expr_list ']'
  242     | '[' expression_list ',' ']'
  243     | '[' expression DOUBLE_DOT expression ']'
  244     | '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | sbf

  246 tuple: '(' expression_list ',' expression ')'
  247      | '(' expression_list ',' ')'
  248      | '(' expression DOUBLE_DOT expression ')'
  249      | '(' expression DOUBLE_DOT expression ':' expression ')'

  250 map: '{' pair_list '}'
  251    | '{' pair_list ',' '}'

  252 $@44: %empty

  253 $@45: %empty

  254 sbf: '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'

  255 sbf_result: expression

  256 sbf_rule_list: sbf_rule_list ',' sbf_rule
  257              | sbf_rule

  258 sbf_rule: bool_expr
  259         | in_expr

  260 in_expr: lvar LEFT_ARROW expression
  261        | lvar LEFT_ARROW range_expr

  262 range_expr: range_expr_sub ':' expression
  263           | range_expr_sub

  264 range_expr_sub: expression '~' expression
  265               | expression '~'

  266 $@46: %empty

  267 range_expr_sub: '~' $@46 expression

  268 pair_list: pair_list ',' pair_expression
  269          | pair_expression

  270 pair_expression: expression ':' expression

  271 primary_object: list
  272               | tuple
  273               | map
  274               | lambda_object
  275               | lvar
  276               | number
  277               | minus_number
  278               | big_number
  279               | minus_big_number
  280               | real
  281               | minus_real
  282               | regex
  283               | string
  284               | reserved_object
  285               | TRUE
  286               | FALSE
  287               | NIL_
  288               | '(' expression ')'
  289               | reserved_functions

  290 reserved_functions: eval_function

  291 eval_function: EVAL '(' expression ')'

  292 postfix_object: postfix_object '.' name_or_string
  293               | postfix_object '.' reserved_object

  294 $@47: %empty

  295 postfix_object: postfix_object $@47 calling_body
  296               | postfix_object '[' slice_expression ']'
  297               | postfix_object '[' slice_expression ')'
  298               | DOUBLE_DOT name_or_string
  299               | DOUBLE_DOT reserved_object
  300               | '.' name_or_string
  301               | '.' reserved_object

  302 $@48: %empty

  303 postfix_object: name $@48 string
  304               | postfix_object '.' CLONE calling_body
  305               | primary_object

  306 slice_expression: expression ':' expression

  307 $@49: %empty

  308 slice_expression: ':' $@49 expression
  309                 | expression ':'
  310                 | ':'
  311                 | expression

  312 calling_body: '(' ')'
  313             | '(' expression_list ')'

  314 object: postfix_object

  315 reserved_object: OWNER
  316                | CALLER
  317                | ROOT
  318                | MODULE
  319                | MY

  320 lvar: name

  321 format_string: format_string format_object
  322              | FORMAT_STRING_HEAD

  323 re_format_string: re_format_string format_object
  324                 | RE_FORMAT_STRING_HEAD

  325 format_object: '$' '{' expression FORMAT_STRING_TAIL

  326 regex: RE_STRING
  327      | re_format_string

  328 string: STRING
  329       | format_string
  330       | HEX_STRING

  331 name: NAME

  332 minus_number: MINUS_NUMBER

  333 number: NUMBER

  334 minus_big_number: MINUS_BIG_NUMBER

  335 big_number: BIG_NUMBER

  336 real: REAL

  337 minus_real: MINUS_REAL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 217
'$' (36) 325
'%' (37) 119 235 254
'(' (40) 153 154 155 156 246 247 248 249 288 291 312 313
')' (41) 34 153 154 155 156 195 246 247 248 249 288 291 297 312 313
'*' (42) 233
'+' (43) 227 239
',' (44) 28 114 156 157 182 242 246 247 251 256 268
'-' (45) 228 238
'.' (46) 31 32 37 38 73 135 137 139 144 148 149 189 191 201 203 292
    293 300 301 304
'/' (47) 234
':' (58) 48 89 90 113 151 244 249 262 270 306 308 309 310
';' (59) 23 25 27 48 69 70 71 72 77 78 79 89 90 130 132 173 181
'=' (61) 118 205
'[' (91) 33 34 193 195 241 242 243 244 254 296 297
']' (93) 33 193 241 242 243 244 254 296
'{' (123) 6 7 85 135 137 139 144 145 146 250 251 325
'|' (124) 91 254
'}' (125) 6 7 8 9 85 137 139 145 146 250 251
'~' (126) 90 264 265 267
error (256)
NEW_LINE (258)
STATIC (259) 124
DEF (260) 124 125
CLONE (261) 304
MY (262) 319
OWNER (263) 315
CALLER (264) 316
ROOT (265) 317
MODULE (266) 318
PARENT (267)
IF (268) 171
ELIF (269) 167
ELSE (270) 169
DO (271) 42 173 175
WHILE (272) 173 178
TIMES (273) 175
SWITCH (274)
DECODE (275) 85 139 148
PARSE (276) 137 149
FOR (277) 44 180
IN (278) 44 180
RETURN_ (279) 77
CONTINUE (280) 78
BREAK (281) 79
EQ (282) 223
NEQ (283) 224
AND (284) 215
OR (285) 212
GT (286) 219
GE (287) 220
LT (288) 221
LE (289) 222
TRY (290) 56
CATCH (291) 64 66 68
FINALLY (292) 60
THROW (293) 69 70
DUMP (294)
STACK (295) 75
LOCAL (296) 76
USING (297) 71 72
TRUE (298) 285
FALSE (299) 286
DOUBLE_DOT (300) 35 36 197 199 243 244 248 249 298 299
TRIPLE_DOT (301) 154 156
ADD_ASSIGN (302) 206
SUB_ASSIGN (303) 207
MUL_ASSIGN (304) 208
DIV_ASSIGN (305) 209
NIL_ (306) 287
RIGHT_ARROW (307) 27 66 110
LEFT_ARROW (308) 25 70 260 261
PARALLEL (309) 42 44
ASSIGNMENT (310) 132
ONCE (311) 141
EVAL (312) 291
LAMBDA (313) 144 147 148 149
UNDER (314) 129
NAME (315) 46 47 331
STRING (316) 72 102 127 328
FORMAT_STRING_HEAD (317) 322
FORMAT_STRING_TAIL (318) 325
RE_STRING (319) 103 326
RE_FORMAT_STRING_HEAD (320) 324
HEX_STRING (321) 330
SHELL_STRING_HEAD (322) 52
CONTEXT (323)
NUMBER (324) 333
MINUS_NUMBER (325) 332
BIG_NUMBER (326) 335
MINUS_BIG_NUMBER (327) 334
REAL (328) 336
MINUS_REAL (329) 337


Nonterminals, with rules where they appear

$accept (95)
    on left: 0
statement_list (96)
    on left: 1 2 3, on right: 0 1 2 6 8
statement_or_block (97)
    on left: 4 5, on right: 110
statement_block (98)
    on left: 6 7, on right: 2 5 40 42 44 56 60 64 66 68 134 143 167
    169 171 173 175 178 180
open_statement_block (99)
    on left: 8 9, on right: 141
statement (100)
    on left: 10 11 12 13 14 15 16 17 18 19 20 21 22 23, on right: 1
    3 4
channel_stmt (101)
    on left: 25 27, on right: 22
$@1 (102)
    on left: 24, on right: 25
$@2 (103)
    on left: 26, on right: 27
assign_target_list (104)
    on left: 28 29, on right: 27 28
assign_target (105)
    on left: 30 31 32 33 34 35 36 37 38, on right: 28 29
scope_stmt (106)
    on left: 40, on right: 19
$@3 (107)
    on left: 39, on right: 40
parallel_stmt (108)
    on left: 42 44, on right: 20
$@4 (109)
    on left: 41, on right: 42
$@5 (110)
    on left: 43, on right: 44
parallel_option (111)
    on left: 45 46 47, on right: 44
simple_call_stmt (112)
    on left: 48, on right: 17
shell_stmt (113)
    on left: 50, on right: 18
$@6 (114)
    on left: 49, on right: 50
shell_string (115)
    on left: 51 52, on right: 50 51
exception_stmt (116)
    on left: 53 54, on right: 15
try_stmt (117)
    on left: 56, on right: 53
$@7 (118)
    on left: 55, on right: 56
catch_stmt_list_with_finally (119)
    on left: 58 59, on right: 53
$@8 (120)
    on left: 57, on right: 58
finally_stmt (121)
    on left: 60, on right: 58
catch_stmt_list (122)
    on left: 61 62, on right: 58 59 61
catch_stmt (123)
    on left: 64 66 68, on right: 61 62
$@9 (124)
    on left: 63, on right: 64
$@10 (125)
    on left: 65, on right: 66
$@11 (126)
    on left: 67, on right: 68
throw_stmt (127)
    on left: 69 70, on right: 54
using_stmt (128)
    on left: 71 72, on right: 16
object_path (129)
    on left: 73 74, on right: 64 66 69 70 71 72 73 129
debug_stmt (130)
    on left: 75 76, on right: 21
control_stmt (131)
    on left: 77 78 79, on right: 11
opt_expr_list (132)
    on left: 80 81, on right: 77 241
selection_stmt (133)
    on left: 82 83, on right: 12
decode_stmt (134)
    on left: 85, on right: 83
$@12 (135)
    on left: 84, on right: 85
bnf_stmt_list (136)
    on left: 86 87, on right: 86 137 146
bnf_stmt (137)
    on left: 89 90, on right: 86 87
$@13 (138)
    on left: 88, on right: 89
bnf_right_list (139)
    on left: 91 92, on right: 89 91
bnf_left (140)
    on left: 93, on right: 89
bnf_right (141)
    on left: 95, on right: 91 92
$@14 (142)
    on left: 94, on right: 95
bnf_right_ (143)
    on left: 96, on right: 95
bnf_node_list (144)
    on left: 97 98, on right: 96 97
bnf_node (145)
    on left: 99 100 101, on right: 97 98
terminal (146)
    on left: 102 103, on right: 90 99
non_terminal (147)
    on left: 104, on right: 93 100
action_code (148)
    on left: 105, on right: 101
decode_pattern_stmt_list (149)
    on left: 106 107, on right: 85 106 139 145
decode_pattern_stmt (150)
    on left: 110, on right: 106 107
$@15 (151)
    on left: 108, on right: 110
$@16 (152)
    on left: 109, on right: 110
decode_pattern (153)
    on left: 111 112, on right: 110
list_pattern (154)
    on left: 113, on right: 112
pattern_list (155)
    on left: 114 115, on right: 111 114
pattern (156)
    on left: 116 117 118, on right: 114 115
p_var (157)
    on left: 119, on right: 113 117 118
loop_stmt (158)
    on left: 120 121 122 123, on right: 13
def (159)
    on left: 124 125, on right: 130 132 134 135 137 139
name_or_string (160)
    on left: 126 127, on right: 31 35 37 73 74 130 132 134 135 137
    139 144 189 197 201 292 298 300
opt_under (161)
    on left: 128 129, on right: 134 135 137 139
define_stmt (162)
    on left: 130 132 134 135 137 139, on right: 14
$@17 (163)
    on left: 131, on right: 132
$@18 (164)
    on left: 133, on right: 134
$@19 (165)
    on left: 136, on right: 137
$@20 (166)
    on left: 138, on right: 139
once_expr (167)
    on left: 141, on right: 185
$@21 (168)
    on left: 140, on right: 141
lambda_object (169)
    on left: 143 144 145 146, on right: 105 274
$@22 (170)
    on left: 142, on right: 143
lambda_define_header (171)
    on left: 147, on right: 143
lambda_decode_header (172)
    on left: 148, on right: 145
lambda_parse_header (173)
    on left: 149, on right: 146
opt_superclass (174)
    on left: 150 151, on right: 134 143
opt_argument_list (175)
    on left: 152 153 154 155 156, on right: 134 137 139 147 148 149
name_list (176)
    on left: 157 158, on right: 66 155 156 157
if_elif_else_stmt (177)
    on left: 159 160 161 162, on right: 82
elif_stmt_list (178)
    on left: 163 164, on right: 161 162 163
elif_stmt (179)
    on left: 167, on right: 163 164
$@23 (180)
    on left: 165, on right: 167
$@24 (181)
    on left: 166, on right: 167
else_stmt (182)
    on left: 169, on right: 160 161
$@25 (183)
    on left: 168, on right: 169
if_stmt (184)
    on left: 171, on right: 159 160 161 162
$@26 (185)
    on left: 170, on right: 171
do_stmt (186)
    on left: 173, on right: 121
$@27 (187)
    on left: 172, on right: 173
times_stmt (188)
    on left: 175, on right: 123
$@28 (189)
    on left: 174, on right: 175
while_stmt (190)
    on left: 178, on right: 122
$@29 (191)
    on left: 176, on right: 178
$@30 (192)
    on left: 177, on right: 178
for_stmt (193)
    on left: 180, on right: 120
$@31 (194)
    on left: 179, on right: 180
expression_stmt (195)
    on left: 181, on right: 10
expression_list (196)
    on left: 182 183, on right: 25 48 70 81 151 181 182 242 246 247
    313
expression (197)
    on left: 184 185, on right: 25 27 40 46 47 85 116 118 132 175 182
    183 187 189 191 193 195 197 199 201 203 243 244 246 248 249 255
    260 262 264 265 267 270 288 291 306 308 309 311 325
assign_expr (198)
    on left: 187 189 191 193 195 197 199 201 203 204, on right: 184
$@32 (199)
    on left: 186, on right: 187
$@33 (200)
    on left: 188, on right: 189
$@34 (201)
    on left: 190, on right: 191
$@35 (202)
    on left: 192, on right: 193
$@36 (203)
    on left: 194, on right: 195
$@37 (204)
    on left: 196, on right: 197
$@38 (205)
    on left: 198, on right: 199
$@39 (206)
    on left: 200, on right: 201
$@40 (207)
    on left: 202, on right: 203
assign_type (208)
    on left: 205 206 207 208 209, on right: 33 34 187 189 191 193 195
    197 199 201 203
bool_expr (209)
    on left: 210, on right: 167 171 173 178 204 258
or_expr (210)
    on left: 212 213, on right: 210 212
$@41 (211)
    on left: 211, on right: 212
and_expr (212)
    on left: 215 216, on right: 212 213 215
$@42 (213)
    on left: 214, on right: 215
not_expr (214)
    on left: 217 218, on right: 215 216
logical_expr (215)
    on left: 219 220 221 222 223 224 225, on right: 217 218
numeric_expr (216)
    on left: 226, on right: 219 220 221 222 223 224 225
add_expr (217)
    on left: 227 228 229 230 231 232, on right: 226 227 228 229 230
    231
mul_expr (218)
    on left: 233 234 235 236, on right: 227 228 232 233 234 235
unary_expr (219)
    on left: 238 239 240, on right: 236
$@43 (220)
    on left: 237, on right: 238
list (221)
    on left: 241 242 243 244 245, on right: 271
tuple (222)
    on left: 246 247 248 249, on right: 272
map (223)
    on left: 250 251, on right: 273
sbf (224)
    on left: 254, on right: 245
$@44 (225)
    on left: 252, on right: 254
$@45 (226)
    on left: 253, on right: 254
sbf_result (227)
    on left: 255, on right: 254
sbf_rule_list (228)
    on left: 256 257, on right: 254 256
sbf_rule (229)
    on left: 258 259, on right: 256 257
in_expr (230)
    on left: 260 261, on right: 259
range_expr (231)
    on left: 262 263, on right: 261
range_expr_sub (232)
    on left: 264 265 267, on right: 262 263
$@46 (233)
    on left: 266, on right: 267
pair_list (234)
    on left: 268 269, on right: 250 251 268
pair_expression (235)
    on left: 270, on right: 268 269
primary_object (236)
    on left: 271 272 273 274 275 276 277 278 279 280 281 282 283 284
    285 286 287 288 289, on right: 305
reserved_functions (237)
    on left: 290, on right: 289
eval_function (238)
    on left: 291, on right: 290
postfix_object (239)
    on left: 292 293 295 296 297 298 299 300 301 303 304 305, on right:
    31 32 33 34 48 189 191 193 195 292 293 295 296 297 304 314
$@47 (240)
    on left: 294, on right: 295
$@48 (241)
    on left: 302, on right: 303
slice_expression (242)
    on left: 306 308 309 310 311, on right: 33 34 193 195 296 297
$@49 (243)
    on left: 307, on right: 308
calling_body (244)
    on left: 312 313, on right: 295 304
object (245)
    on left: 314, on right: 44 180 233 234 235 238 239 240
reserved_object (246)
    on left: 315 316 317 318 319, on right: 32 36 38 191 199 203 284
    293 299 301
lvar (247)
    on left: 320, on right: 30 44 119 180 187 260 261 275
format_string (248)
    on left: 321 322, on right: 321 329
re_format_string (249)
    on left: 323 324, on right: 323 327
format_object (250)
    on left: 325, on right: 51 321 323
regex (251)
    on left: 326 327, on right: 282
string (252)
    on left: 328 329 330, on right: 283 303
name (253)
    on left: 331, on right: 104 126 157 158 303 320
minus_number (254)
    on left: 332, on right: 229 277
number (255)
    on left: 333, on right: 276
minus_big_number (256)
    on left: 334, on right: 230 279
big_number (257)
    on left: 335, on right: 278
real (258)
    on left: 336, on right: 280
minus_real (259)
    on left: 337, on right: 231 281


State 0

    0 $accept: . statement_list $end
    1 statement_list: . statement_list statement
    2               | . statement_list statement_block
    3               | . statement
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_list        go to state 50
    statement             go to state 51
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 1

  124 def: STATIC . DEF

    DEF  shift, and go to state 115


State 2

  125 def: DEF .

    $default  reduce using rule 125 (def)


State 3

  319 reserved_object: MY .

    $default  reduce using rule 319 (reserved_object)


State 4

  315 reserved_object: OWNER .

    $default  reduce using rule 315 (reserved_object)


State 5

  316 reserved_object: CALLER .

    $default  reduce using rule 316 (reserved_object)


State 6

  317 reserved_object: ROOT .

    $default  reduce using rule 317 (reserved_object)


State 7

  318 reserved_object: MODULE .

    $default  reduce using rule 318 (reserved_object)


State 8

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  171 if_stmt: IF . bool_expr $@26 statement_block
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    bool_expr             go to state 118
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 9

  172 $@27: . %empty
  173 do_stmt: DO . $@27 statement_block WHILE bool_expr ';'

    $default  reduce using rule 172 ($@27)

    $@27  go to state 121


State 10

  176 $@29: . %empty
  178 while_stmt: WHILE . $@29 bool_expr $@30 statement_block

    $default  reduce using rule 176 ($@29)

    $@29  go to state 122


State 11

   85 decode_stmt: DECODE . expression $@12 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 123
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 12

  180 for_stmt: FOR . lvar IN object $@31 statement_block
  320 lvar: . name
  331 name: . NAME

    NAME  shift, and go to state 29

    lvar  go to state 125
    name  go to state 126


State 13

   77 control_stmt: RETURN_ . opt_expr_list ';'
   80 opt_expr_list: . %empty  [';']
   81              | . expression_list
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 80 (opt_expr_list)

    opt_expr_list         go to state 127
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 128
    expression            go to state 129
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 14

   78 control_stmt: CONTINUE . ';'

    ';'  shift, and go to state 130


State 15

   79 control_stmt: BREAK . ';'

    ';'  shift, and go to state 131


State 16

   55 $@7: . %empty
   56 try_stmt: TRY . $@7 statement_block

    $default  reduce using rule 55 ($@7)

    $@7  go to state 132


State 17

   69 throw_stmt: THROW . object_path ';'
   70           | THROW . object_path LEFT_ARROW expression_list ';'
   73 object_path: . object_path '.' name_or_string
   74            | . name_or_string
  126 name_or_string: . name
  127               | . STRING
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    object_path     go to state 134
    name_or_string  go to state 135
    name            go to state 136


State 18

   75 debug_stmt: STACK .

    $default  reduce using rule 75 (debug_stmt)


State 19

   76 debug_stmt: LOCAL .

    $default  reduce using rule 76 (debug_stmt)


State 20

   71 using_stmt: USING . object_path ';'
   72           | USING . object_path STRING ';'
   73 object_path: . object_path '.' name_or_string
   74            | . name_or_string
  126 name_or_string: . name
  127               | . STRING
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    object_path     go to state 137
    name_or_string  go to state 135
    name            go to state 136


State 21

  285 primary_object: TRUE .

    $default  reduce using rule 285 (primary_object)


State 22

  286 primary_object: FALSE .

    $default  reduce using rule 286 (primary_object)


State 23

  126 name_or_string: . name
  127               | . STRING
  197 assign_expr: DOUBLE_DOT . name_or_string assign_type $@37 expression
  199            | DOUBLE_DOT . reserved_object assign_type $@38 expression
  298 postfix_object: DOUBLE_DOT . name_or_string
  299               | DOUBLE_DOT . reserved_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 138
    reserved_object  go to state 139
    name             go to state 136


State 24

  287 primary_object: NIL_ .

    $default  reduce using rule 287 (primary_object)


State 25

   42 parallel_stmt: PARALLEL . DO $@4 statement_block
   44              | PARALLEL . FOR lvar IN object parallel_option $@5 statement_block

    DO   shift, and go to state 140
    FOR  shift, and go to state 141


State 26

  140 $@21: . %empty
  141 once_expr: ONCE . $@21 open_statement_block

    $default  reduce using rule 140 ($@21)

    $@21  go to state 142


State 27

  291 eval_function: EVAL . '(' expression ')'

    '('  shift, and go to state 143


State 28

  144 lambda_object: LAMBDA . '.' name_or_string '{'
  147 lambda_define_header: LAMBDA . opt_argument_list
  148 lambda_decode_header: LAMBDA . '.' DECODE opt_argument_list
  149 lambda_parse_header: LAMBDA . '.' PARSE opt_argument_list
  152 opt_argument_list: . %empty  ['{', ':']
  153                  | . '(' ')'
  154                  | . '(' TRIPLE_DOT ')'
  155                  | . '(' name_list ')'
  156                  | . '(' name_list ',' TRIPLE_DOT ')'

    '.'  shift, and go to state 144
    '('  shift, and go to state 145

    $default  reduce using rule 152 (opt_argument_list)

    opt_argument_list  go to state 146


State 29

  331 name: NAME .

    $default  reduce using rule 331 (name)


State 30

  328 string: STRING .

    $default  reduce using rule 328 (string)


State 31

  322 format_string: FORMAT_STRING_HEAD .

    $default  reduce using rule 322 (format_string)


State 32

  326 regex: RE_STRING .

    $default  reduce using rule 326 (regex)


State 33

  324 re_format_string: RE_FORMAT_STRING_HEAD .

    $default  reduce using rule 324 (re_format_string)


State 34

  330 string: HEX_STRING .

    $default  reduce using rule 330 (string)


State 35

  333 number: NUMBER .

    $default  reduce using rule 333 (number)


State 36

  332 minus_number: MINUS_NUMBER .

    $default  reduce using rule 332 (minus_number)


State 37

  335 big_number: BIG_NUMBER .

    $default  reduce using rule 335 (big_number)


State 38

  334 minus_big_number: MINUS_BIG_NUMBER .

    $default  reduce using rule 334 (minus_big_number)


State 39

  336 real: REAL .

    $default  reduce using rule 336 (real)


State 40

  337 minus_real: MINUS_REAL .

    $default  reduce using rule 337 (minus_real)


State 41

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  250    | '{' . pair_list '}'
  251    | . '{' pair_list ',' '}'
  251    | '{' . pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  268 pair_list: . pair_list ',' pair_expression
  269          | . pair_expression
  270 pair_expression: . expression ':' expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 147
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    pair_list             go to state 148
    pair_expression       go to state 149
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 42

   23 statement: ';' .

    $default  reduce using rule 23 (statement)


State 43

  126 name_or_string: . name
  127               | . STRING
  201 assign_expr: '.' . name_or_string assign_type $@39 expression
  203            | '.' . reserved_object assign_type $@40 expression
  300 postfix_object: '.' . name_or_string
  301               | '.' . reserved_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 150
    reserved_object  go to state 151
    name             go to state 136


State 44

   80 opt_expr_list: . %empty  [']']
   81              | . expression_list
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  241     | '[' . opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  242     | '[' . expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  243     | '[' . expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  244     | '[' . expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 80 (opt_expr_list)

    opt_expr_list         go to state 152
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 153
    expression            go to state 154
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 45

  254 sbf: '%' . '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'

    '['  shift, and go to state 155


State 46

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  246      | '(' . expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  247      | '(' . expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  248      | '(' . expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  249      | '(' . expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  288               | '(' . expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 156
    expression            go to state 157
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 47

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  217 not_expr: '!' . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    logical_expr          go to state 158
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 48

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  239 unary_expr: '+' . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 159
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 49

  237 $@43: . %empty
  238 unary_expr: '-' . $@43 object

    $default  reduce using rule 237 ($@43)

    $@43  go to state 160


State 50

    0 $accept: statement_list . $end
    1 statement_list: statement_list . statement
    2               | statement_list . statement_block
    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    $end                   shift, and go to state 161
    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 162
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_block       go to state 163
    statement             go to state 164
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 51

    3 statement_list: statement .

    $default  reduce using rule 3 (statement_list)


State 52

   22 statement: channel_stmt .

    $default  reduce using rule 22 (statement)


State 53

   19 statement: scope_stmt .

    $default  reduce using rule 19 (statement)


State 54

   20 statement: parallel_stmt .

    $default  reduce using rule 20 (statement)


State 55

   17 statement: simple_call_stmt .

    $default  reduce using rule 17 (statement)


State 56

   18 statement: shell_stmt .

    $default  reduce using rule 18 (statement)


State 57

   50 shell_stmt: $@6 . shell_string
   51 shell_string: . shell_string format_object
   52             | . SHELL_STRING_HEAD

    SHELL_STRING_HEAD  shift, and go to state 165

    shell_string  go to state 166


State 58

   15 statement: exception_stmt .

    $default  reduce using rule 15 (statement)


State 59

   53 exception_stmt: try_stmt . catch_stmt_list_with_finally
   58 catch_stmt_list_with_finally: . catch_stmt_list $@8 finally_stmt
   59                             | . catch_stmt_list
   61 catch_stmt_list: . catch_stmt_list catch_stmt
   62                | . catch_stmt
   64 catch_stmt: . CATCH object_path $@9 statement_block
   66           | . CATCH object_path RIGHT_ARROW name_list $@10 statement_block
   68           | . CATCH $@11 statement_block

    CATCH  shift, and go to state 167

    catch_stmt_list_with_finally  go to state 168
    catch_stmt_list               go to state 169
    catch_stmt                    go to state 170


State 60

   54 exception_stmt: throw_stmt .

    $default  reduce using rule 54 (exception_stmt)


State 61

   16 statement: using_stmt .

    $default  reduce using rule 16 (statement)


State 62

   21 statement: debug_stmt .

    $default  reduce using rule 21 (statement)


State 63

   11 statement: control_stmt .

    $default  reduce using rule 11 (statement)


State 64

   12 statement: selection_stmt .

    $default  reduce using rule 12 (statement)


State 65

   83 selection_stmt: decode_stmt .

    $default  reduce using rule 83 (selection_stmt)


State 66

   13 statement: loop_stmt .

    $default  reduce using rule 13 (statement)


State 67

  126 name_or_string: . name
  127               | . STRING
  130 define_stmt: def . name_or_string ';'
  132            | def . name_or_string ASSIGNMENT $@17 expression ';'
  134            | def . name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | def . '.' name_or_string name_or_string opt_under '{'
  137            | def . '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | def . '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133
    '.'     shift, and go to state 171

    name_or_string  go to state 172
    name            go to state 136


State 68

   14 statement: define_stmt .

    $default  reduce using rule 14 (statement)


State 69

  185 expression: once_expr .

    $default  reduce using rule 185 (expression)


State 70

  274 primary_object: lambda_object .

    $default  reduce using rule 274 (primary_object)


State 71

  143 lambda_object: lambda_define_header . opt_superclass $@22 statement_block
  150 opt_superclass: . %empty  ['{']
  151               | . ':' expression_list

    ':'  shift, and go to state 173

    $default  reduce using rule 150 (opt_superclass)

    opt_superclass  go to state 174


State 72

  145 lambda_object: lambda_decode_header . '{' decode_pattern_stmt_list '}'

    '{'  shift, and go to state 175


State 73

  146 lambda_object: lambda_parse_header . '{' bnf_stmt_list '}'

    '{'  shift, and go to state 176


State 74

   82 selection_stmt: if_elif_else_stmt .

    $default  reduce using rule 82 (selection_stmt)


State 75

  159 if_elif_else_stmt: if_stmt .  [$end, STATIC, DEF, MY, OWNER, CALLER, ROOT, MODULE, IF, DO, WHILE, DECODE, FOR, RETURN_, CONTINUE, BREAK, TRY, THROW, STACK, LOCAL, USING, TRUE, FALSE, DOUBLE_DOT, NIL_, PARALLEL, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, SHELL_STRING_HEAD, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '}', ';', '.', '[', '%', '(', '!', '+', '-']
  160                  | if_stmt . else_stmt
  161                  | if_stmt . elif_stmt_list else_stmt
  162                  | if_stmt . elif_stmt_list
  163 elif_stmt_list: . elif_stmt_list elif_stmt
  164               | . elif_stmt
  167 elif_stmt: . ELIF $@23 bool_expr $@24 statement_block
  169 else_stmt: . ELSE $@25 statement_block

    ELIF  shift, and go to state 177
    ELSE  shift, and go to state 178

    $default  reduce using rule 159 (if_elif_else_stmt)

    elif_stmt_list  go to state 179
    elif_stmt       go to state 180
    else_stmt       go to state 181


State 76

  121 loop_stmt: do_stmt .

    $default  reduce using rule 121 (loop_stmt)


State 77

  123 loop_stmt: times_stmt .

    $default  reduce using rule 123 (loop_stmt)


State 78

  122 loop_stmt: while_stmt .

    $default  reduce using rule 122 (loop_stmt)


State 79

  120 loop_stmt: for_stmt .

    $default  reduce using rule 120 (loop_stmt)


State 80

   10 statement: expression_stmt .

    $default  reduce using rule 10 (statement)


State 81

  181 expression_stmt: expression_list . ';'
  182 expression_list: expression_list . ',' expression

    ';'  shift, and go to state 182
    ','  shift, and go to state 183


State 82

   25 channel_stmt: expression . LEFT_ARROW $@1 expression_list ';'
   27             | expression . RIGHT_ARROW $@2 assign_target_list ';'
   39 $@3: . %empty  ['{']
   40 scope_stmt: expression . $@3 statement_block
  175 times_stmt: expression . TIMES DO $@28 statement_block
  183 expression_list: expression .  [';', ',']

    TIMES        shift, and go to state 184
    RIGHT_ARROW  shift, and go to state 185
    LEFT_ARROW   shift, and go to state 186

    '{'       reduce using rule 39 ($@3)
    $default  reduce using rule 183 (expression_list)

    $@3  go to state 187


State 83

  184 expression: assign_expr .

    $default  reduce using rule 184 (expression)


State 84

  204 assign_expr: bool_expr .

    $default  reduce using rule 204 (assign_expr)


State 85

  210 bool_expr: or_expr .  [TIMES, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, '{', '}', ';', ',', ']', ')', ':', '~', '|']
  212 or_expr: or_expr . OR $@41 and_expr

    OR  shift, and go to state 188

    $default  reduce using rule 210 (bool_expr)


State 86

  213 or_expr: and_expr .  [TIMES, OR, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, '{', '}', ';', ',', ']', ')', ':', '~', '|']
  215 and_expr: and_expr . AND $@42 not_expr

    AND  shift, and go to state 189

    $default  reduce using rule 213 (or_expr)


State 87

  216 and_expr: not_expr .

    $default  reduce using rule 216 (and_expr)


State 88

  218 not_expr: logical_expr .

    $default  reduce using rule 218 (not_expr)


State 89

  219 logical_expr: numeric_expr . GT numeric_expr
  220             | numeric_expr . GE numeric_expr
  221             | numeric_expr . LT numeric_expr
  222             | numeric_expr . LE numeric_expr
  223             | numeric_expr . EQ numeric_expr
  224             | numeric_expr . NEQ numeric_expr
  225             | numeric_expr .  [TIMES, AND, OR, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, '{', '}', ';', ',', ']', ')', ':', '~', '|']

    EQ   shift, and go to state 190
    NEQ  shift, and go to state 191
    GT   shift, and go to state 192
    GE   shift, and go to state 193
    LT   shift, and go to state 194
    LE   shift, and go to state 195

    $default  reduce using rule 225 (logical_expr)


State 90

  226 numeric_expr: add_expr .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, '{', '}', ';', ',', ']', ')', ':', '~', '|']
  227 add_expr: add_expr . '+' mul_expr
  228         | add_expr . '-' mul_expr
  229         | add_expr . minus_number
  230         | add_expr . minus_big_number
  231         | add_expr . minus_real
  332 minus_number: . MINUS_NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  337 minus_real: . MINUS_REAL

    MINUS_NUMBER      shift, and go to state 36
    MINUS_BIG_NUMBER  shift, and go to state 38
    MINUS_REAL        shift, and go to state 40
    '+'               shift, and go to state 196
    '-'               shift, and go to state 197

    $default  reduce using rule 226 (numeric_expr)

    minus_number      go to state 198
    minus_big_number  go to state 199
    minus_real        go to state 200


State 91

  232 add_expr: mul_expr .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', ']', ')', ':', '~', '|', '+', '-']
  233 mul_expr: mul_expr . '*' object
  234         | mul_expr . '/' object
  235         | mul_expr . '%' object

    '%'  shift, and go to state 201
    '*'  shift, and go to state 202
    '/'  shift, and go to state 203

    $default  reduce using rule 232 (add_expr)


State 92

  236 mul_expr: unary_expr .

    $default  reduce using rule 236 (mul_expr)


State 93

  271 primary_object: list .

    $default  reduce using rule 271 (primary_object)


State 94

  272 primary_object: tuple .

    $default  reduce using rule 272 (primary_object)


State 95

  273 primary_object: map .

    $default  reduce using rule 273 (primary_object)


State 96

  245 list: sbf .

    $default  reduce using rule 245 (list)


State 97

  305 postfix_object: primary_object .

    $default  reduce using rule 305 (postfix_object)


State 98

  289 primary_object: reserved_functions .

    $default  reduce using rule 289 (primary_object)


State 99

  290 reserved_functions: eval_function .

    $default  reduce using rule 290 (reserved_functions)


State 100

   48 simple_call_stmt: postfix_object . ':' expression_list ';'
  189 assign_expr: postfix_object . '.' name_or_string assign_type $@33 expression
  191            | postfix_object . '.' reserved_object assign_type $@34 expression
  193            | postfix_object . '[' slice_expression ']' assign_type $@35 expression
  195            | postfix_object . '[' slice_expression ')' assign_type $@36 expression
  292 postfix_object: postfix_object . '.' name_or_string
  293               | postfix_object . '.' reserved_object
  294 $@47: . %empty  ['(']
  295 postfix_object: postfix_object . $@47 calling_body
  296               | postfix_object . '[' slice_expression ']'
  297               | postfix_object . '[' slice_expression ')'
  304               | postfix_object . '.' CLONE calling_body
  314 object: postfix_object .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, RIGHT_ARROW, LEFT_ARROW, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', ';', ',', ':', '%', '+', '-', '*', '/']

    '.'  shift, and go to state 204
    '['  shift, and go to state 205
    ':'  shift, and go to state 206

    ':'       [reduce using rule 314 (object)]
    '('       reduce using rule 294 ($@47)
    $default  reduce using rule 314 (object)

    $@47  go to state 207


State 101

  240 unary_expr: object .

    $default  reduce using rule 240 (unary_expr)


State 102

  284 primary_object: reserved_object .

    $default  reduce using rule 284 (primary_object)


State 103

  187 assign_expr: lvar . assign_type $@32 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  275 primary_object: lvar .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 275 (primary_object)

    assign_type  go to state 213


State 104

  321 format_string: format_string . format_object
  325 format_object: . '$' '{' expression FORMAT_STRING_TAIL
  329 string: format_string .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    '$'  shift, and go to state 214

    $default  reduce using rule 329 (string)

    format_object  go to state 215


State 105

  323 re_format_string: re_format_string . format_object
  325 format_object: . '$' '{' expression FORMAT_STRING_TAIL
  327 regex: re_format_string .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    '$'  shift, and go to state 214

    $default  reduce using rule 327 (regex)

    format_object  go to state 216


State 106

  282 primary_object: regex .

    $default  reduce using rule 282 (primary_object)


State 107

  283 primary_object: string .

    $default  reduce using rule 283 (primary_object)


State 108

  302 $@48: . %empty  [STRING, FORMAT_STRING_HEAD, HEX_STRING]
  303 postfix_object: name . $@48 string
  320 lvar: name .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '=', '%', '(', '+', '-', '*', '/']

    STRING              reduce using rule 302 ($@48)
    FORMAT_STRING_HEAD  reduce using rule 302 ($@48)
    HEX_STRING          reduce using rule 302 ($@48)
    $default            reduce using rule 320 (lvar)

    $@48  go to state 217


State 109

  277 primary_object: minus_number .

    $default  reduce using rule 277 (primary_object)


State 110

  276 primary_object: number .

    $default  reduce using rule 276 (primary_object)


State 111

  279 primary_object: minus_big_number .

    $default  reduce using rule 279 (primary_object)


State 112

  278 primary_object: big_number .

    $default  reduce using rule 278 (primary_object)


State 113

  280 primary_object: real .

    $default  reduce using rule 280 (primary_object)


State 114

  281 primary_object: minus_real .

    $default  reduce using rule 281 (primary_object)


State 115

  124 def: STATIC DEF .

    $default  reduce using rule 124 (def)


State 116

  126 name_or_string: . name
  127               | . STRING
  298 postfix_object: DOUBLE_DOT . name_or_string
  299               | DOUBLE_DOT . reserved_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 218
    reserved_object  go to state 219
    name             go to state 136


State 117

  126 name_or_string: . name
  127               | . STRING
  300 postfix_object: '.' . name_or_string
  301               | '.' . reserved_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 220
    reserved_object  go to state 221
    name             go to state 136


State 118

  170 $@26: . %empty
  171 if_stmt: IF bool_expr . $@26 statement_block

    $default  reduce using rule 170 ($@26)

    $@26  go to state 222


State 119

  292 postfix_object: postfix_object . '.' name_or_string
  293               | postfix_object . '.' reserved_object
  294 $@47: . %empty  ['(']
  295 postfix_object: postfix_object . $@47 calling_body
  296               | postfix_object . '[' slice_expression ']'
  297               | postfix_object . '[' slice_expression ')'
  304               | postfix_object . '.' CLONE calling_body
  314 object: postfix_object .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', ']', ')', ':', '~', '|', '%', '+', '-', '*', '/']

    '.'  shift, and go to state 223
    '['  shift, and go to state 224

    '('       reduce using rule 294 ($@47)
    $default  reduce using rule 314 (object)

    $@47  go to state 207


State 120

  275 primary_object: lvar .

    $default  reduce using rule 275 (primary_object)


State 121

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  173 do_stmt: DO $@27 . statement_block WHILE bool_expr ';'

    '{'  shift, and go to state 225

    statement_block  go to state 226


State 122

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  178 while_stmt: WHILE $@29 . bool_expr $@30 statement_block
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    bool_expr             go to state 227
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 123

   84 $@12: . %empty
   85 decode_stmt: DECODE expression . $@12 '{' decode_pattern_stmt_list '}'

    $default  reduce using rule 84 ($@12)

    $@12  go to state 228


State 124

  189 assign_expr: postfix_object . '.' name_or_string assign_type $@33 expression
  191            | postfix_object . '.' reserved_object assign_type $@34 expression
  193            | postfix_object . '[' slice_expression ']' assign_type $@35 expression
  195            | postfix_object . '[' slice_expression ')' assign_type $@36 expression
  292 postfix_object: postfix_object . '.' name_or_string
  293               | postfix_object . '.' reserved_object
  294 $@47: . %empty  ['(']
  295 postfix_object: postfix_object . $@47 calling_body
  296               | postfix_object . '[' slice_expression ']'
  297               | postfix_object . '[' slice_expression ')'
  304               | postfix_object . '.' CLONE calling_body
  314 object: postfix_object .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', ']', ')', ':', '~', '|', '%', '+', '-', '*', '/']

    '.'  shift, and go to state 204
    '['  shift, and go to state 205

    '('       reduce using rule 294 ($@47)
    $default  reduce using rule 314 (object)

    $@47  go to state 207


State 125

  180 for_stmt: FOR lvar . IN object $@31 statement_block

    IN  shift, and go to state 229


State 126

  320 lvar: name .

    $default  reduce using rule 320 (lvar)


State 127

   77 control_stmt: RETURN_ opt_expr_list . ';'

    ';'  shift, and go to state 230


State 128

   81 opt_expr_list: expression_list .  [';']
  182 expression_list: expression_list . ',' expression

    ','  shift, and go to state 183

    $default  reduce using rule 81 (opt_expr_list)


State 129

  183 expression_list: expression .

    $default  reduce using rule 183 (expression_list)


State 130

   78 control_stmt: CONTINUE ';' .

    $default  reduce using rule 78 (control_stmt)


State 131

   79 control_stmt: BREAK ';' .

    $default  reduce using rule 79 (control_stmt)


State 132

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   56 try_stmt: TRY $@7 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 231


State 133

  127 name_or_string: STRING .

    $default  reduce using rule 127 (name_or_string)


State 134

   69 throw_stmt: THROW object_path . ';'
   70           | THROW object_path . LEFT_ARROW expression_list ';'
   73 object_path: object_path . '.' name_or_string

    LEFT_ARROW  shift, and go to state 232
    ';'         shift, and go to state 233
    '.'         shift, and go to state 234


State 135

   74 object_path: name_or_string .

    $default  reduce using rule 74 (object_path)


State 136

  126 name_or_string: name .

    $default  reduce using rule 126 (name_or_string)


State 137

   71 using_stmt: USING object_path . ';'
   72           | USING object_path . STRING ';'
   73 object_path: object_path . '.' name_or_string

    STRING  shift, and go to state 235
    ';'     shift, and go to state 236
    '.'     shift, and go to state 234


State 138

  197 assign_expr: DOUBLE_DOT name_or_string . assign_type $@37 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  298 postfix_object: DOUBLE_DOT name_or_string .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 298 (postfix_object)

    assign_type  go to state 237


State 139

  199 assign_expr: DOUBLE_DOT reserved_object . assign_type $@38 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  299 postfix_object: DOUBLE_DOT reserved_object .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 299 (postfix_object)

    assign_type  go to state 238


State 140

   41 $@4: . %empty
   42 parallel_stmt: PARALLEL DO . $@4 statement_block

    $default  reduce using rule 41 ($@4)

    $@4  go to state 239


State 141

   44 parallel_stmt: PARALLEL FOR . lvar IN object parallel_option $@5 statement_block
  320 lvar: . name
  331 name: . NAME

    NAME  shift, and go to state 29

    lvar  go to state 240
    name  go to state 126


State 142

    1 statement_list: . statement_list statement
    2               | . statement_list statement_block
    3               | . statement
    8 open_statement_block: . statement_list '}'
    9                     | . '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  141          | ONCE $@21 . open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '}'                    shift, and go to state 241
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_list        go to state 242
    open_statement_block  go to state 243
    statement             go to state 51
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 143

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  291              | EVAL '(' . expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 244
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 144

  126 name_or_string: . name
  127               | . STRING
  144 lambda_object: LAMBDA '.' . name_or_string '{'
  148 lambda_decode_header: LAMBDA '.' . DECODE opt_argument_list
  149 lambda_parse_header: LAMBDA '.' . PARSE opt_argument_list
  331 name: . NAME

    DECODE  shift, and go to state 245
    PARSE   shift, and go to state 246
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string  go to state 247
    name            go to state 136


State 145

  153 opt_argument_list: '(' . ')'
  154                  | '(' . TRIPLE_DOT ')'
  155                  | '(' . name_list ')'
  156                  | '(' . name_list ',' TRIPLE_DOT ')'
  157 name_list: . name_list ',' name
  158          | . name
  331 name: . NAME

    TRIPLE_DOT  shift, and go to state 248
    NAME        shift, and go to state 29
    ')'         shift, and go to state 249

    name_list  go to state 250
    name       go to state 251


State 146

  147 lambda_define_header: LAMBDA opt_argument_list .

    $default  reduce using rule 147 (lambda_define_header)


State 147

  270 pair_expression: expression . ':' expression

    ':'  shift, and go to state 252


State 148

  250 map: '{' pair_list . '}'
  251    | '{' pair_list . ',' '}'
  268 pair_list: pair_list . ',' pair_expression

    '}'  shift, and go to state 253
    ','  shift, and go to state 254


State 149

  269 pair_list: pair_expression .

    $default  reduce using rule 269 (pair_list)


State 150

  201 assign_expr: '.' name_or_string . assign_type $@39 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  300 postfix_object: '.' name_or_string .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 300 (postfix_object)

    assign_type  go to state 255


State 151

  203 assign_expr: '.' reserved_object . assign_type $@40 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  301 postfix_object: '.' reserved_object .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 301 (postfix_object)

    assign_type  go to state 256


State 152

  241 list: '[' opt_expr_list . ']'

    ']'  shift, and go to state 257


State 153

   81 opt_expr_list: expression_list .  [']']
  182 expression_list: expression_list . ',' expression
  242 list: '[' expression_list . ',' ']'

    ','  shift, and go to state 258

    $default  reduce using rule 81 (opt_expr_list)


State 154

  183 expression_list: expression .  [',', ']']
  243 list: '[' expression . DOUBLE_DOT expression ']'
  244     | '[' expression . DOUBLE_DOT expression ':' expression ']'

    DOUBLE_DOT  shift, and go to state 259

    $default  reduce using rule 183 (expression_list)


State 155

  252 $@44: . %empty
  254 sbf: '%' '[' . $@44 sbf_result '|' $@45 sbf_rule_list ']'

    $default  reduce using rule 252 ($@44)

    $@44  go to state 260


State 156

  182 expression_list: expression_list . ',' expression
  246 tuple: '(' expression_list . ',' expression ')'
  247      | '(' expression_list . ',' ')'

    ','  shift, and go to state 261


State 157

  183 expression_list: expression .  [',']
  248 tuple: '(' expression . DOUBLE_DOT expression ')'
  249      | '(' expression . DOUBLE_DOT expression ':' expression ')'
  288 primary_object: '(' expression . ')'

    DOUBLE_DOT  shift, and go to state 262
    ')'         shift, and go to state 263

    $default  reduce using rule 183 (expression_list)


State 158

  217 not_expr: '!' logical_expr .

    $default  reduce using rule 217 (not_expr)


State 159

  239 unary_expr: '+' object .

    $default  reduce using rule 239 (unary_expr)


State 160

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  238 unary_expr: '-' $@43 . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 264
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 161

    0 $accept: statement_list $end .

    $default  accept


State 162

    1 statement_list: . statement_list statement
    2               | . statement_list statement_block
    3               | . statement
    6 statement_block: '{' . statement_list '}'
    7                | '{' . '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  250    | '{' . pair_list '}'
  251    | . '{' pair_list ',' '}'
  251    | '{' . pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  268 pair_list: . pair_list ',' pair_expression
  269          | . pair_expression
  270 pair_expression: . expression ':' expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '}'                    shift, and go to state 265
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_list        go to state 266
    statement             go to state 51
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 267
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    pair_list             go to state 148
    pair_expression       go to state 149
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 163

    2 statement_list: statement_list statement_block .

    $default  reduce using rule 2 (statement_list)


State 164

    1 statement_list: statement_list statement .

    $default  reduce using rule 1 (statement_list)


State 165

   52 shell_string: SHELL_STRING_HEAD .

    $default  reduce using rule 52 (shell_string)


State 166

   50 shell_stmt: $@6 shell_string .  [$end, STATIC, DEF, MY, OWNER, CALLER, ROOT, MODULE, IF, DO, WHILE, DECODE, FOR, RETURN_, CONTINUE, BREAK, TRY, THROW, STACK, LOCAL, USING, TRUE, FALSE, DOUBLE_DOT, NIL_, PARALLEL, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, SHELL_STRING_HEAD, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '}', ';', '.', '[', '%', '(', '!', '+', '-']
   51 shell_string: shell_string . format_object
  325 format_object: . '$' '{' expression FORMAT_STRING_TAIL

    '$'  shift, and go to state 214

    $default  reduce using rule 50 (shell_stmt)

    format_object  go to state 268


State 167

   64 catch_stmt: CATCH . object_path $@9 statement_block
   66           | CATCH . object_path RIGHT_ARROW name_list $@10 statement_block
   67 $@11: . %empty  ['{']
   68 catch_stmt: CATCH . $@11 statement_block
   73 object_path: . object_path '.' name_or_string
   74            | . name_or_string
  126 name_or_string: . name
  127               | . STRING
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    $default  reduce using rule 67 ($@11)

    $@11            go to state 269
    object_path     go to state 270
    name_or_string  go to state 135
    name            go to state 136


State 168

   53 exception_stmt: try_stmt catch_stmt_list_with_finally .

    $default  reduce using rule 53 (exception_stmt)


State 169

   57 $@8: . %empty  [FINALLY]
   58 catch_stmt_list_with_finally: catch_stmt_list . $@8 finally_stmt
   59                             | catch_stmt_list .  [$end, STATIC, DEF, MY, OWNER, CALLER, ROOT, MODULE, IF, DO, WHILE, DECODE, FOR, RETURN_, CONTINUE, BREAK, TRY, THROW, STACK, LOCAL, USING, TRUE, FALSE, DOUBLE_DOT, NIL_, PARALLEL, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, SHELL_STRING_HEAD, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '}', ';', '.', '[', '%', '(', '!', '+', '-']
   61 catch_stmt_list: catch_stmt_list . catch_stmt
   64 catch_stmt: . CATCH object_path $@9 statement_block
   66           | . CATCH object_path RIGHT_ARROW name_list $@10 statement_block
   68           | . CATCH $@11 statement_block

    CATCH  shift, and go to state 167

    FINALLY   reduce using rule 57 ($@8)
    $default  reduce using rule 59 (catch_stmt_list_with_finally)

    $@8         go to state 271
    catch_stmt  go to state 272


State 170

   62 catch_stmt_list: catch_stmt .

    $default  reduce using rule 62 (catch_stmt_list)


State 171

  126 name_or_string: . name
  127               | . STRING
  135 define_stmt: def '.' . name_or_string name_or_string opt_under '{'
  137            | def '.' . PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | def '.' . DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  331 name: . NAME

    DECODE  shift, and go to state 273
    PARSE   shift, and go to state 274
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string  go to state 275
    name            go to state 136


State 172

  130 define_stmt: def name_or_string . ';'
  132            | def name_or_string . ASSIGNMENT $@17 expression ';'
  134            | def name_or_string . opt_argument_list opt_superclass opt_under $@18 statement_block
  152 opt_argument_list: . %empty  [UNDER, '{', ':']
  153                  | . '(' ')'
  154                  | . '(' TRIPLE_DOT ')'
  155                  | . '(' name_list ')'
  156                  | . '(' name_list ',' TRIPLE_DOT ')'

    ASSIGNMENT  shift, and go to state 276
    ';'         shift, and go to state 277
    '('         shift, and go to state 145

    $default  reduce using rule 152 (opt_argument_list)

    opt_argument_list  go to state 278


State 173

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  151 opt_superclass: ':' . expression_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 279
    expression            go to state 129
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 174

  142 $@22: . %empty
  143 lambda_object: lambda_define_header opt_superclass . $@22 statement_block

    $default  reduce using rule 142 ($@22)

    $@22  go to state 280


State 175

  106 decode_pattern_stmt_list: . decode_pattern_stmt_list decode_pattern_stmt
  107                         | . decode_pattern_stmt
  108 $@15: . %empty
  110 decode_pattern_stmt: . $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block
  145 lambda_object: lambda_decode_header '{' . decode_pattern_stmt_list '}'

    $default  reduce using rule 108 ($@15)

    decode_pattern_stmt_list  go to state 281
    decode_pattern_stmt       go to state 282
    $@15                      go to state 283


State 176

   86 bnf_stmt_list: . bnf_stmt_list bnf_stmt
   87              | . bnf_stmt
   89 bnf_stmt: . bnf_left $@13 ':' bnf_right_list ';'
   90         | . '~' ':' terminal ';'
   93 bnf_left: . non_terminal
  104 non_terminal: . name
  146 lambda_object: lambda_parse_header '{' . bnf_stmt_list '}'
  331 name: . NAME

    NAME  shift, and go to state 29
    '~'   shift, and go to state 284

    bnf_stmt_list  go to state 285
    bnf_stmt       go to state 286
    bnf_left       go to state 287
    non_terminal   go to state 288
    name           go to state 289


State 177

  165 $@23: . %empty
  167 elif_stmt: ELIF . $@23 bool_expr $@24 statement_block

    $default  reduce using rule 165 ($@23)

    $@23  go to state 290


State 178

  168 $@25: . %empty
  169 else_stmt: ELSE . $@25 statement_block

    $default  reduce using rule 168 ($@25)

    $@25  go to state 291


State 179

  161 if_elif_else_stmt: if_stmt elif_stmt_list . else_stmt
  162                  | if_stmt elif_stmt_list .  [$end, STATIC, DEF, MY, OWNER, CALLER, ROOT, MODULE, IF, DO, WHILE, DECODE, FOR, RETURN_, CONTINUE, BREAK, TRY, THROW, STACK, LOCAL, USING, TRUE, FALSE, DOUBLE_DOT, NIL_, PARALLEL, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, SHELL_STRING_HEAD, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '}', ';', '.', '[', '%', '(', '!', '+', '-']
  163 elif_stmt_list: elif_stmt_list . elif_stmt
  167 elif_stmt: . ELIF $@23 bool_expr $@24 statement_block
  169 else_stmt: . ELSE $@25 statement_block

    ELIF  shift, and go to state 177
    ELSE  shift, and go to state 178

    $default  reduce using rule 162 (if_elif_else_stmt)

    elif_stmt  go to state 292
    else_stmt  go to state 293


State 180

  164 elif_stmt_list: elif_stmt .

    $default  reduce using rule 164 (elif_stmt_list)


State 181

  160 if_elif_else_stmt: if_stmt else_stmt .

    $default  reduce using rule 160 (if_elif_else_stmt)


State 182

  181 expression_stmt: expression_list ';' .

    $default  reduce using rule 181 (expression_stmt)


State 183

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: expression_list ',' . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 294
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 184

  175 times_stmt: expression TIMES . DO $@28 statement_block

    DO  shift, and go to state 295


State 185

   26 $@2: . %empty
   27 channel_stmt: expression RIGHT_ARROW . $@2 assign_target_list ';'

    $default  reduce using rule 26 ($@2)

    $@2  go to state 296


State 186

   24 $@1: . %empty
   25 channel_stmt: expression LEFT_ARROW . $@1 expression_list ';'

    $default  reduce using rule 24 ($@1)

    $@1  go to state 297


State 187

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   40 scope_stmt: expression $@3 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 298


State 188

  211 $@41: . %empty
  212 or_expr: or_expr OR . $@41 and_expr

    $default  reduce using rule 211 ($@41)

    $@41  go to state 299


State 189

  214 $@42: . %empty
  215 and_expr: and_expr AND . $@42 not_expr

    $default  reduce using rule 214 ($@42)

    $@42  go to state 300


State 190

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  223 logical_expr: numeric_expr EQ . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    numeric_expr          go to state 301
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 191

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  224 logical_expr: numeric_expr NEQ . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    numeric_expr          go to state 302
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 192

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  219 logical_expr: numeric_expr GT . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    numeric_expr          go to state 303
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 193

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  220 logical_expr: numeric_expr GE . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    numeric_expr          go to state 304
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 194

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  221 logical_expr: numeric_expr LT . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    numeric_expr          go to state 305
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 195

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  222 logical_expr: numeric_expr LE . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    numeric_expr          go to state 306
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 196

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  227 add_expr: add_expr '+' . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    mul_expr              go to state 307
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 197

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  228 add_expr: add_expr '-' . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    mul_expr              go to state 308
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 198

  229 add_expr: add_expr minus_number .

    $default  reduce using rule 229 (add_expr)


State 199

  230 add_expr: add_expr minus_big_number .

    $default  reduce using rule 230 (add_expr)


State 200

  231 add_expr: add_expr minus_real .

    $default  reduce using rule 231 (add_expr)


State 201

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  235 mul_expr: mul_expr '%' . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 309
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 202

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  233 mul_expr: mul_expr '*' . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 310
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 203

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  234 mul_expr: mul_expr '/' . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 311
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 204

  126 name_or_string: . name
  127               | . STRING
  189 assign_expr: postfix_object '.' . name_or_string assign_type $@33 expression
  191            | postfix_object '.' . reserved_object assign_type $@34 expression
  292 postfix_object: postfix_object '.' . name_or_string
  293               | postfix_object '.' . reserved_object
  304               | postfix_object '.' . CLONE calling_body
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    CLONE   shift, and go to state 312
    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 313
    reserved_object  go to state 314
    name             go to state 136


State 205

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  193            | postfix_object '[' . slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  195            | postfix_object '[' . slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  296               | postfix_object '[' . slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  297               | postfix_object '[' . slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  306 slice_expression: . expression ':' expression
  308                 | . ':' $@49 expression
  309                 | . expression ':'
  310                 | . ':'
  311                 | . expression
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    ':'                    shift, and go to state 315
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 316
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    slice_expression      go to state 317
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 206

   48 simple_call_stmt: postfix_object ':' . expression_list ';'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 318
    expression            go to state 129
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 207

  295 postfix_object: postfix_object $@47 . calling_body
  312 calling_body: . '(' ')'
  313             | . '(' expression_list ')'

    '('  shift, and go to state 319

    calling_body  go to state 320


State 208

  206 assign_type: ADD_ASSIGN .

    $default  reduce using rule 206 (assign_type)


State 209

  207 assign_type: SUB_ASSIGN .

    $default  reduce using rule 207 (assign_type)


State 210

  208 assign_type: MUL_ASSIGN .

    $default  reduce using rule 208 (assign_type)


State 211

  209 assign_type: DIV_ASSIGN .

    $default  reduce using rule 209 (assign_type)


State 212

  205 assign_type: '=' .

    $default  reduce using rule 205 (assign_type)


State 213

  186 $@32: . %empty
  187 assign_expr: lvar assign_type . $@32 expression

    $default  reduce using rule 186 ($@32)

    $@32  go to state 321


State 214

  325 format_object: '$' . '{' expression FORMAT_STRING_TAIL

    '{'  shift, and go to state 322


State 215

  321 format_string: format_string format_object .

    $default  reduce using rule 321 (format_string)


State 216

  323 re_format_string: re_format_string format_object .

    $default  reduce using rule 323 (re_format_string)


State 217

  303 postfix_object: name $@48 . string
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING

    STRING              shift, and go to state 30
    FORMAT_STRING_HEAD  shift, and go to state 31
    HEX_STRING          shift, and go to state 34

    format_string  go to state 104
    string         go to state 323


State 218

  298 postfix_object: DOUBLE_DOT name_or_string .

    $default  reduce using rule 298 (postfix_object)


State 219

  299 postfix_object: DOUBLE_DOT reserved_object .

    $default  reduce using rule 299 (postfix_object)


State 220

  300 postfix_object: '.' name_or_string .

    $default  reduce using rule 300 (postfix_object)


State 221

  301 postfix_object: '.' reserved_object .

    $default  reduce using rule 301 (postfix_object)


State 222

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  171 if_stmt: IF bool_expr $@26 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 324


State 223

  126 name_or_string: . name
  127               | . STRING
  292 postfix_object: postfix_object '.' . name_or_string
  293               | postfix_object '.' . reserved_object
  304               | postfix_object '.' . CLONE calling_body
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    CLONE   shift, and go to state 312
    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 325
    reserved_object  go to state 326
    name             go to state 136


State 224

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  296               | postfix_object '[' . slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  297               | postfix_object '[' . slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  306 slice_expression: . expression ':' expression
  308                 | . ':' $@49 expression
  309                 | . expression ':'
  310                 | . ':'
  311                 | . expression
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    ':'                    shift, and go to state 315
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 316
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    slice_expression      go to state 327
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 225

    1 statement_list: . statement_list statement
    2               | . statement_list statement_block
    3               | . statement
    6 statement_block: '{' . statement_list '}'
    7                | '{' . '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '}'                    shift, and go to state 265
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_list        go to state 266
    statement             go to state 51
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 226

  173 do_stmt: DO $@27 statement_block . WHILE bool_expr ';'

    WHILE  shift, and go to state 328


State 227

  177 $@30: . %empty
  178 while_stmt: WHILE $@29 bool_expr . $@30 statement_block

    $default  reduce using rule 177 ($@30)

    $@30  go to state 329


State 228

   85 decode_stmt: DECODE expression $@12 . '{' decode_pattern_stmt_list '}'

    '{'  shift, and go to state 330


State 229

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  180 for_stmt: FOR lvar IN . object $@31 statement_block
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 331
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 230

   77 control_stmt: RETURN_ opt_expr_list ';' .

    $default  reduce using rule 77 (control_stmt)


State 231

   56 try_stmt: TRY $@7 statement_block .

    $default  reduce using rule 56 (try_stmt)


State 232

   70 throw_stmt: THROW object_path LEFT_ARROW . expression_list ';'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 332
    expression            go to state 129
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 233

   69 throw_stmt: THROW object_path ';' .

    $default  reduce using rule 69 (throw_stmt)


State 234

   73 object_path: object_path '.' . name_or_string
  126 name_or_string: . name
  127               | . STRING
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string  go to state 333
    name            go to state 136


State 235

   72 using_stmt: USING object_path STRING . ';'

    ';'  shift, and go to state 334


State 236

   71 using_stmt: USING object_path ';' .

    $default  reduce using rule 71 (using_stmt)


State 237

  196 $@37: . %empty
  197 assign_expr: DOUBLE_DOT name_or_string assign_type . $@37 expression

    $default  reduce using rule 196 ($@37)

    $@37  go to state 335


State 238

  198 $@38: . %empty
  199 assign_expr: DOUBLE_DOT reserved_object assign_type . $@38 expression

    $default  reduce using rule 198 ($@38)

    $@38  go to state 336


State 239

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   42 parallel_stmt: PARALLEL DO $@4 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 337


State 240

   44 parallel_stmt: PARALLEL FOR lvar . IN object parallel_option $@5 statement_block

    IN  shift, and go to state 338


State 241

    9 open_statement_block: '}' .

    $default  reduce using rule 9 (open_statement_block)


State 242

    1 statement_list: statement_list . statement
    2               | statement_list . statement_block
    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
    8 open_statement_block: statement_list . '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 162
    '}'                    shift, and go to state 339
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_block       go to state 163
    statement             go to state 164
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 243

  141 once_expr: ONCE $@21 open_statement_block .

    $default  reduce using rule 141 (once_expr)


State 244

  291 eval_function: EVAL '(' expression . ')'

    ')'  shift, and go to state 340


State 245

  148 lambda_decode_header: LAMBDA '.' DECODE . opt_argument_list
  152 opt_argument_list: . %empty  ['{']
  153                  | . '(' ')'
  154                  | . '(' TRIPLE_DOT ')'
  155                  | . '(' name_list ')'
  156                  | . '(' name_list ',' TRIPLE_DOT ')'

    '('  shift, and go to state 145

    $default  reduce using rule 152 (opt_argument_list)

    opt_argument_list  go to state 341


State 246

  149 lambda_parse_header: LAMBDA '.' PARSE . opt_argument_list
  152 opt_argument_list: . %empty  ['{']
  153                  | . '(' ')'
  154                  | . '(' TRIPLE_DOT ')'
  155                  | . '(' name_list ')'
  156                  | . '(' name_list ',' TRIPLE_DOT ')'

    '('  shift, and go to state 145

    $default  reduce using rule 152 (opt_argument_list)

    opt_argument_list  go to state 342


State 247

  144 lambda_object: LAMBDA '.' name_or_string . '{'

    '{'  shift, and go to state 343


State 248

  154 opt_argument_list: '(' TRIPLE_DOT . ')'

    ')'  shift, and go to state 344


State 249

  153 opt_argument_list: '(' ')' .

    $default  reduce using rule 153 (opt_argument_list)


State 250

  155 opt_argument_list: '(' name_list . ')'
  156                  | '(' name_list . ',' TRIPLE_DOT ')'
  157 name_list: name_list . ',' name

    ','  shift, and go to state 345
    ')'  shift, and go to state 346


State 251

  158 name_list: name .

    $default  reduce using rule 158 (name_list)


State 252

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  270 pair_expression: expression ':' . expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 347
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 253

  250 map: '{' pair_list '}' .

    $default  reduce using rule 250 (map)


State 254

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  251    | '{' pair_list ',' . '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  268 pair_list: pair_list ',' . pair_expression
  270 pair_expression: . expression ':' expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '}'                    shift, and go to state 348
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 147
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    pair_expression       go to state 349
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 255

  200 $@39: . %empty
  201 assign_expr: '.' name_or_string assign_type . $@39 expression

    $default  reduce using rule 200 ($@39)

    $@39  go to state 350


State 256

  202 $@40: . %empty
  203 assign_expr: '.' reserved_object assign_type . $@40 expression

    $default  reduce using rule 202 ($@40)

    $@40  go to state 351


State 257

  241 list: '[' opt_expr_list ']' .

    $default  reduce using rule 241 (list)


State 258

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: expression_list ',' . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  242     | '[' expression_list ',' . ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    ']'                    shift, and go to state 352
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 294
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 259

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  243     | '[' expression DOUBLE_DOT . expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  244     | '[' expression DOUBLE_DOT . expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 353
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 260

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  254    | '%' '[' $@44 . sbf_result '|' $@45 sbf_rule_list ']'
  255 sbf_result: . expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 354
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    sbf_result            go to state 355
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 261

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: expression_list ',' . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  246      | '(' expression_list ',' . expression ')'
  247      | . '(' expression_list ',' ')'
  247      | '(' expression_list ',' . ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    ')'                    shift, and go to state 356
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 357
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 262

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  248      | '(' expression DOUBLE_DOT . expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  249      | '(' expression DOUBLE_DOT . expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 358
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 263

  288 primary_object: '(' expression ')' .

    $default  reduce using rule 288 (primary_object)


State 264

  238 unary_expr: '-' $@43 object .

    $default  reduce using rule 238 (unary_expr)


State 265

    7 statement_block: '{' '}' .

    $default  reduce using rule 7 (statement_block)


State 266

    1 statement_list: statement_list . statement
    2               | statement_list . statement_block
    6 statement_block: . '{' statement_list '}'
    6                | '{' statement_list . '}'
    7                | . '{' '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 162
    '}'                    shift, and go to state 359
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_block       go to state 163
    statement             go to state 164
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 267

   25 channel_stmt: expression . LEFT_ARROW $@1 expression_list ';'
   27             | expression . RIGHT_ARROW $@2 assign_target_list ';'
   39 $@3: . %empty  ['{']
   40 scope_stmt: expression . $@3 statement_block
  175 times_stmt: expression . TIMES DO $@28 statement_block
  183 expression_list: expression .  [';', ',']
  270 pair_expression: expression . ':' expression

    TIMES        shift, and go to state 184
    RIGHT_ARROW  shift, and go to state 185
    LEFT_ARROW   shift, and go to state 186
    ':'          shift, and go to state 252

    '{'       reduce using rule 39 ($@3)
    $default  reduce using rule 183 (expression_list)

    $@3  go to state 187


State 268

   51 shell_string: shell_string format_object .

    $default  reduce using rule 51 (shell_string)


State 269

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   68 catch_stmt: CATCH $@11 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 360


State 270

   63 $@9: . %empty  ['{']
   64 catch_stmt: CATCH object_path . $@9 statement_block
   66           | CATCH object_path . RIGHT_ARROW name_list $@10 statement_block
   73 object_path: object_path . '.' name_or_string

    RIGHT_ARROW  shift, and go to state 361
    '.'          shift, and go to state 234

    $default  reduce using rule 63 ($@9)

    $@9  go to state 362


State 271

   58 catch_stmt_list_with_finally: catch_stmt_list $@8 . finally_stmt
   60 finally_stmt: . FINALLY statement_block

    FINALLY  shift, and go to state 363

    finally_stmt  go to state 364


State 272

   61 catch_stmt_list: catch_stmt_list catch_stmt .

    $default  reduce using rule 61 (catch_stmt_list)


State 273

  126 name_or_string: . name
  127               | . STRING
  139 define_stmt: def '.' DECODE . name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string  go to state 365
    name            go to state 136


State 274

  126 name_or_string: . name
  127               | . STRING
  137 define_stmt: def '.' PARSE . name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string  go to state 366
    name            go to state 136


State 275

  126 name_or_string: . name
  127               | . STRING
  135 define_stmt: def '.' name_or_string . name_or_string opt_under '{'
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string  go to state 367
    name            go to state 136


State 276

  131 $@17: . %empty
  132 define_stmt: def name_or_string ASSIGNMENT . $@17 expression ';'

    $default  reduce using rule 131 ($@17)

    $@17  go to state 368


State 277

  130 define_stmt: def name_or_string ';' .

    $default  reduce using rule 130 (define_stmt)


State 278

  134 define_stmt: def name_or_string opt_argument_list . opt_superclass opt_under $@18 statement_block
  150 opt_superclass: . %empty  [UNDER, '{']
  151               | . ':' expression_list

    ':'  shift, and go to state 173

    $default  reduce using rule 150 (opt_superclass)

    opt_superclass  go to state 369


State 279

  151 opt_superclass: ':' expression_list .  [UNDER, '{']
  182 expression_list: expression_list . ',' expression

    ','  shift, and go to state 183

    $default  reduce using rule 151 (opt_superclass)


State 280

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  143 lambda_object: lambda_define_header opt_superclass $@22 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 370


State 281

  106 decode_pattern_stmt_list: decode_pattern_stmt_list . decode_pattern_stmt
  108 $@15: . %empty  [MY, OWNER, CALLER, ROOT, MODULE, TRUE, FALSE, DOUBLE_DOT, NIL_, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '.', '[', '%', '(', '!', '+', '-']
  110 decode_pattern_stmt: . $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block
  145 lambda_object: lambda_decode_header '{' decode_pattern_stmt_list . '}'

    '}'  shift, and go to state 371

    $default  reduce using rule 108 ($@15)

    decode_pattern_stmt  go to state 372
    $@15                 go to state 283


State 282

  107 decode_pattern_stmt_list: decode_pattern_stmt .

    $default  reduce using rule 107 (decode_pattern_stmt_list)


State 283

  110 decode_pattern_stmt: $@15 . decode_pattern RIGHT_ARROW $@16 statement_or_block
  111 decode_pattern: . pattern_list
  112               | . list_pattern
  113 list_pattern: . p_var ':' p_var
  114 pattern_list: . pattern_list ',' pattern
  115             | . pattern
  116 pattern: . expression
  117        | . p_var
  118        | . p_var '=' expression
  119 p_var: . '%' lvar
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 373
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    decode_pattern        go to state 374
    list_pattern          go to state 375
    pattern_list          go to state 376
    pattern               go to state 377
    p_var                 go to state 378
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 379
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 284

   90 bnf_stmt: '~' . ':' terminal ';'

    ':'  shift, and go to state 380


State 285

   86 bnf_stmt_list: bnf_stmt_list . bnf_stmt
   89 bnf_stmt: . bnf_left $@13 ':' bnf_right_list ';'
   90         | . '~' ':' terminal ';'
   93 bnf_left: . non_terminal
  104 non_terminal: . name
  146 lambda_object: lambda_parse_header '{' bnf_stmt_list . '}'
  331 name: . NAME

    NAME  shift, and go to state 29
    '}'   shift, and go to state 381
    '~'   shift, and go to state 284

    bnf_stmt      go to state 382
    bnf_left      go to state 287
    non_terminal  go to state 288
    name          go to state 289


State 286

   87 bnf_stmt_list: bnf_stmt .

    $default  reduce using rule 87 (bnf_stmt_list)


State 287

   88 $@13: . %empty
   89 bnf_stmt: bnf_left . $@13 ':' bnf_right_list ';'

    $default  reduce using rule 88 ($@13)

    $@13  go to state 383


State 288

   93 bnf_left: non_terminal .

    $default  reduce using rule 93 (bnf_left)


State 289

  104 non_terminal: name .

    $default  reduce using rule 104 (non_terminal)


State 290

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  167 elif_stmt: ELIF $@23 . bool_expr $@24 statement_block
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    bool_expr             go to state 384
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 291

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  169 else_stmt: ELSE $@25 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 385


State 292

  163 elif_stmt_list: elif_stmt_list elif_stmt .

    $default  reduce using rule 163 (elif_stmt_list)


State 293

  161 if_elif_else_stmt: if_stmt elif_stmt_list else_stmt .

    $default  reduce using rule 161 (if_elif_else_stmt)


State 294

  182 expression_list: expression_list ',' expression .

    $default  reduce using rule 182 (expression_list)


State 295

  174 $@28: . %empty
  175 times_stmt: expression TIMES DO . $@28 statement_block

    $default  reduce using rule 174 ($@28)

    $@28  go to state 386


State 296

   27 channel_stmt: expression RIGHT_ARROW $@2 . assign_target_list ';'
   28 assign_target_list: . assign_target_list ',' assign_target
   29                   | . assign_target
   30 assign_target: . lvar
   31              | . postfix_object '.' name_or_string
   32              | . postfix_object '.' reserved_object
   33              | . postfix_object '[' slice_expression ']' assign_type
   34              | . postfix_object '[' slice_expression ')' assign_type
   35              | . DOUBLE_DOT name_or_string
   36              | . DOUBLE_DOT reserved_object
   37              | . '.' name_or_string
   38              | . '.' reserved_object
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 387
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 388
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    assign_target_list    go to state 389
    assign_target         go to state 390
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 391
    reserved_object       go to state 102
    lvar                  go to state 392
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 297

   25 channel_stmt: expression LEFT_ARROW $@1 . expression_list ';'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 393
    expression            go to state 129
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 298

   40 scope_stmt: expression $@3 statement_block .

    $default  reduce using rule 40 (scope_stmt)


State 299

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  212 or_expr: or_expr OR $@41 . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    and_expr              go to state 394
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 300

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  215 and_expr: and_expr AND $@42 . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    not_expr              go to state 395
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 301

  223 logical_expr: numeric_expr EQ numeric_expr .

    $default  reduce using rule 223 (logical_expr)


State 302

  224 logical_expr: numeric_expr NEQ numeric_expr .

    $default  reduce using rule 224 (logical_expr)


State 303

  219 logical_expr: numeric_expr GT numeric_expr .

    $default  reduce using rule 219 (logical_expr)


State 304

  220 logical_expr: numeric_expr GE numeric_expr .

    $default  reduce using rule 220 (logical_expr)


State 305

  221 logical_expr: numeric_expr LT numeric_expr .

    $default  reduce using rule 221 (logical_expr)


State 306

  222 logical_expr: numeric_expr LE numeric_expr .

    $default  reduce using rule 222 (logical_expr)


State 307

  227 add_expr: add_expr '+' mul_expr .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', ']', ')', ':', '~', '|', '+', '-']
  233 mul_expr: mul_expr . '*' object
  234         | mul_expr . '/' object
  235         | mul_expr . '%' object

    '%'  shift, and go to state 201
    '*'  shift, and go to state 202
    '/'  shift, and go to state 203

    $default  reduce using rule 227 (add_expr)


State 308

  228 add_expr: add_expr '-' mul_expr .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', ']', ')', ':', '~', '|', '+', '-']
  233 mul_expr: mul_expr . '*' object
  234         | mul_expr . '/' object
  235         | mul_expr . '%' object

    '%'  shift, and go to state 201
    '*'  shift, and go to state 202
    '/'  shift, and go to state 203

    $default  reduce using rule 228 (add_expr)


State 309

  235 mul_expr: mul_expr '%' object .

    $default  reduce using rule 235 (mul_expr)


State 310

  233 mul_expr: mul_expr '*' object .

    $default  reduce using rule 233 (mul_expr)


State 311

  234 mul_expr: mul_expr '/' object .

    $default  reduce using rule 234 (mul_expr)


State 312

  304 postfix_object: postfix_object '.' CLONE . calling_body
  312 calling_body: . '(' ')'
  313             | . '(' expression_list ')'

    '('  shift, and go to state 319

    calling_body  go to state 396


State 313

  189 assign_expr: postfix_object '.' name_or_string . assign_type $@33 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  292 postfix_object: postfix_object '.' name_or_string .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 292 (postfix_object)

    assign_type  go to state 397


State 314

  191 assign_expr: postfix_object '.' reserved_object . assign_type $@34 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  293 postfix_object: postfix_object '.' reserved_object .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 293 (postfix_object)

    assign_type  go to state 398


State 315

  307 $@49: . %empty  [MY, OWNER, CALLER, ROOT, MODULE, TRUE, FALSE, DOUBLE_DOT, NIL_, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '.', '[', '%', '(', '!', '+', '-']
  308 slice_expression: ':' . $@49 expression
  310                 | ':' .  [']', ')']

    ']'       reduce using rule 310 (slice_expression)
    ')'       reduce using rule 310 (slice_expression)
    $default  reduce using rule 307 ($@49)

    $@49  go to state 399


State 316

  306 slice_expression: expression . ':' expression
  309                 | expression . ':'
  311                 | expression .  [']', ')']

    ':'  shift, and go to state 400

    $default  reduce using rule 311 (slice_expression)


State 317

  193 assign_expr: postfix_object '[' slice_expression . ']' assign_type $@35 expression
  195            | postfix_object '[' slice_expression . ')' assign_type $@36 expression
  296 postfix_object: postfix_object '[' slice_expression . ']'
  297               | postfix_object '[' slice_expression . ')'

    ']'  shift, and go to state 401
    ')'  shift, and go to state 402


State 318

   48 simple_call_stmt: postfix_object ':' expression_list . ';'
  182 expression_list: expression_list . ',' expression

    ';'  shift, and go to state 403
    ','  shift, and go to state 183


State 319

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  312 calling_body: '(' . ')'
  313             | '(' . expression_list ')'
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    ')'                    shift, and go to state 404
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression_list       go to state 405
    expression            go to state 129
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 320

  295 postfix_object: postfix_object $@47 calling_body .

    $default  reduce using rule 295 (postfix_object)


State 321

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  187            | lvar assign_type $@32 . expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 406
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 322

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  325 format_object: '$' '{' . expression FORMAT_STRING_TAIL
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 407
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 323

  303 postfix_object: name $@48 string .

    $default  reduce using rule 303 (postfix_object)


State 324

  171 if_stmt: IF bool_expr $@26 statement_block .

    $default  reduce using rule 171 (if_stmt)


State 325

  292 postfix_object: postfix_object '.' name_or_string .

    $default  reduce using rule 292 (postfix_object)


State 326

  293 postfix_object: postfix_object '.' reserved_object .

    $default  reduce using rule 293 (postfix_object)


State 327

  296 postfix_object: postfix_object '[' slice_expression . ']'
  297               | postfix_object '[' slice_expression . ')'

    ']'  shift, and go to state 408
    ')'  shift, and go to state 409


State 328

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  173 do_stmt: DO $@27 statement_block WHILE . bool_expr ';'
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    bool_expr             go to state 410
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 329

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  178 while_stmt: WHILE $@29 bool_expr $@30 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 411


State 330

   85 decode_stmt: DECODE expression $@12 '{' . decode_pattern_stmt_list '}'
  106 decode_pattern_stmt_list: . decode_pattern_stmt_list decode_pattern_stmt
  107                         | . decode_pattern_stmt
  108 $@15: . %empty
  110 decode_pattern_stmt: . $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block

    $default  reduce using rule 108 ($@15)

    decode_pattern_stmt_list  go to state 412
    decode_pattern_stmt       go to state 282
    $@15                      go to state 283


State 331

  179 $@31: . %empty
  180 for_stmt: FOR lvar IN object . $@31 statement_block

    $default  reduce using rule 179 ($@31)

    $@31  go to state 413


State 332

   70 throw_stmt: THROW object_path LEFT_ARROW expression_list . ';'
  182 expression_list: expression_list . ',' expression

    ';'  shift, and go to state 414
    ','  shift, and go to state 183


State 333

   73 object_path: object_path '.' name_or_string .

    $default  reduce using rule 73 (object_path)


State 334

   72 using_stmt: USING object_path STRING ';' .

    $default  reduce using rule 72 (using_stmt)


State 335

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  197            | DOUBLE_DOT name_or_string assign_type $@37 . expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 415
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 336

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  199            | DOUBLE_DOT reserved_object assign_type $@38 . expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 416
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 337

   42 parallel_stmt: PARALLEL DO $@4 statement_block .

    $default  reduce using rule 42 (parallel_stmt)


State 338

   44 parallel_stmt: PARALLEL FOR lvar IN . object parallel_option $@5 statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 417
    reserved_object       go to state 102
    lvar                  go to state 120
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 339

    8 open_statement_block: statement_list '}' .

    $default  reduce using rule 8 (open_statement_block)


State 340

  291 eval_function: EVAL '(' expression ')' .

    $default  reduce using rule 291 (eval_function)


State 341

  148 lambda_decode_header: LAMBDA '.' DECODE opt_argument_list .

    $default  reduce using rule 148 (lambda_decode_header)


State 342

  149 lambda_parse_header: LAMBDA '.' PARSE opt_argument_list .

    $default  reduce using rule 149 (lambda_parse_header)


State 343

  144 lambda_object: LAMBDA '.' name_or_string '{' .

    $default  reduce using rule 144 (lambda_object)


State 344

  154 opt_argument_list: '(' TRIPLE_DOT ')' .

    $default  reduce using rule 154 (opt_argument_list)


State 345

  156 opt_argument_list: '(' name_list ',' . TRIPLE_DOT ')'
  157 name_list: name_list ',' . name
  331 name: . NAME

    TRIPLE_DOT  shift, and go to state 418
    NAME        shift, and go to state 29

    name  go to state 419


State 346

  155 opt_argument_list: '(' name_list ')' .

    $default  reduce using rule 155 (opt_argument_list)


State 347

  270 pair_expression: expression ':' expression .

    $default  reduce using rule 270 (pair_expression)


State 348

  251 map: '{' pair_list ',' '}' .

    $default  reduce using rule 251 (map)


State 349

  268 pair_list: pair_list ',' pair_expression .

    $default  reduce using rule 268 (pair_list)


State 350

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  201            | '.' name_or_string assign_type $@39 . expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 420
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 351

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  203            | '.' reserved_object assign_type $@40 . expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 421
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 352

  242 list: '[' expression_list ',' ']' .

    $default  reduce using rule 242 (list)


State 353

  243 list: '[' expression DOUBLE_DOT expression . ']'
  244     | '[' expression DOUBLE_DOT expression . ':' expression ']'

    ']'  shift, and go to state 422
    ':'  shift, and go to state 423


State 354

  255 sbf_result: expression .

    $default  reduce using rule 255 (sbf_result)


State 355

  254 sbf: '%' '[' $@44 sbf_result . '|' $@45 sbf_rule_list ']'

    '|'  shift, and go to state 424


State 356

  247 tuple: '(' expression_list ',' ')' .

    $default  reduce using rule 247 (tuple)


State 357

  182 expression_list: expression_list ',' expression .  [',']
  246 tuple: '(' expression_list ',' expression . ')'

    ')'  shift, and go to state 425

    $default  reduce using rule 182 (expression_list)


State 358

  248 tuple: '(' expression DOUBLE_DOT expression . ')'
  249      | '(' expression DOUBLE_DOT expression . ':' expression ')'

    ')'  shift, and go to state 426
    ':'  shift, and go to state 427


State 359

    6 statement_block: '{' statement_list '}' .

    $default  reduce using rule 6 (statement_block)


State 360

   68 catch_stmt: CATCH $@11 statement_block .

    $default  reduce using rule 68 (catch_stmt)


State 361

   66 catch_stmt: CATCH object_path RIGHT_ARROW . name_list $@10 statement_block
  157 name_list: . name_list ',' name
  158          | . name
  331 name: . NAME

    NAME  shift, and go to state 29

    name_list  go to state 428
    name       go to state 251


State 362

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   64 catch_stmt: CATCH object_path $@9 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 429


State 363

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   60 finally_stmt: FINALLY . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 430


State 364

   58 catch_stmt_list_with_finally: catch_stmt_list $@8 finally_stmt .

    $default  reduce using rule 58 (catch_stmt_list_with_finally)


State 365

  139 define_stmt: def '.' DECODE name_or_string . opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  152 opt_argument_list: . %empty  [UNDER, '{']
  153                  | . '(' ')'
  154                  | . '(' TRIPLE_DOT ')'
  155                  | . '(' name_list ')'
  156                  | . '(' name_list ',' TRIPLE_DOT ')'

    '('  shift, and go to state 145

    $default  reduce using rule 152 (opt_argument_list)

    opt_argument_list  go to state 431


State 366

  137 define_stmt: def '.' PARSE name_or_string . opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  152 opt_argument_list: . %empty  [UNDER, '{']
  153                  | . '(' ')'
  154                  | . '(' TRIPLE_DOT ')'
  155                  | . '(' name_list ')'
  156                  | . '(' name_list ',' TRIPLE_DOT ')'

    '('  shift, and go to state 145

    $default  reduce using rule 152 (opt_argument_list)

    opt_argument_list  go to state 432


State 367

  128 opt_under: . %empty  ['{']
  129          | . UNDER object_path
  135 define_stmt: def '.' name_or_string name_or_string . opt_under '{'

    UNDER  shift, and go to state 433

    $default  reduce using rule 128 (opt_under)

    opt_under  go to state 434


State 368

  132 define_stmt: def name_or_string ASSIGNMENT $@17 . expression ';'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 435
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 369

  128 opt_under: . %empty  ['{']
  129          | . UNDER object_path
  134 define_stmt: def name_or_string opt_argument_list opt_superclass . opt_under $@18 statement_block

    UNDER  shift, and go to state 433

    $default  reduce using rule 128 (opt_under)

    opt_under  go to state 436


State 370

  143 lambda_object: lambda_define_header opt_superclass $@22 statement_block .

    $default  reduce using rule 143 (lambda_object)


State 371

  145 lambda_object: lambda_decode_header '{' decode_pattern_stmt_list '}' .

    $default  reduce using rule 145 (lambda_object)


State 372

  106 decode_pattern_stmt_list: decode_pattern_stmt_list decode_pattern_stmt .

    $default  reduce using rule 106 (decode_pattern_stmt_list)


State 373

  119 p_var: '%' . lvar
  254 sbf: '%' . '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  320 lvar: . name
  331 name: . NAME

    NAME  shift, and go to state 29
    '['   shift, and go to state 155

    lvar  go to state 437
    name  go to state 126


State 374

  110 decode_pattern_stmt: $@15 decode_pattern . RIGHT_ARROW $@16 statement_or_block

    RIGHT_ARROW  shift, and go to state 438


State 375

  112 decode_pattern: list_pattern .

    $default  reduce using rule 112 (decode_pattern)


State 376

  111 decode_pattern: pattern_list .  [RIGHT_ARROW]
  114 pattern_list: pattern_list . ',' pattern

    ','  shift, and go to state 439

    $default  reduce using rule 111 (decode_pattern)


State 377

  115 pattern_list: pattern .

    $default  reduce using rule 115 (pattern_list)


State 378

  113 list_pattern: p_var . ':' p_var
  117 pattern: p_var .  [RIGHT_ARROW, ',']
  118        | p_var . '=' expression

    ':'  shift, and go to state 440
    '='  shift, and go to state 441

    $default  reduce using rule 117 (pattern)


State 379

  116 pattern: expression .

    $default  reduce using rule 116 (pattern)


State 380

   90 bnf_stmt: '~' ':' . terminal ';'
  102 terminal: . STRING
  103         | . RE_STRING

    STRING     shift, and go to state 442
    RE_STRING  shift, and go to state 443

    terminal  go to state 444


State 381

  146 lambda_object: lambda_parse_header '{' bnf_stmt_list '}' .

    $default  reduce using rule 146 (lambda_object)


State 382

   86 bnf_stmt_list: bnf_stmt_list bnf_stmt .

    $default  reduce using rule 86 (bnf_stmt_list)


State 383

   89 bnf_stmt: bnf_left $@13 . ':' bnf_right_list ';'

    ':'  shift, and go to state 445


State 384

  166 $@24: . %empty
  167 elif_stmt: ELIF $@23 bool_expr . $@24 statement_block

    $default  reduce using rule 166 ($@24)

    $@24  go to state 446


State 385

  169 else_stmt: ELSE $@25 statement_block .

    $default  reduce using rule 169 (else_stmt)


State 386

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  175 times_stmt: expression TIMES DO $@28 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 447


State 387

   35 assign_target: DOUBLE_DOT . name_or_string
   36              | DOUBLE_DOT . reserved_object
  126 name_or_string: . name
  127               | . STRING
  298 postfix_object: DOUBLE_DOT . name_or_string
  299               | DOUBLE_DOT . reserved_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 448
    reserved_object  go to state 449
    name             go to state 136


State 388

   37 assign_target: '.' . name_or_string
   38              | '.' . reserved_object
  126 name_or_string: . name
  127               | . STRING
  300 postfix_object: '.' . name_or_string
  301               | '.' . reserved_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 450
    reserved_object  go to state 451
    name             go to state 136


State 389

   27 channel_stmt: expression RIGHT_ARROW $@2 assign_target_list . ';'
   28 assign_target_list: assign_target_list . ',' assign_target

    ';'  shift, and go to state 452
    ','  shift, and go to state 453


State 390

   29 assign_target_list: assign_target .

    $default  reduce using rule 29 (assign_target_list)


State 391

   31 assign_target: postfix_object . '.' name_or_string
   32              | postfix_object . '.' reserved_object
   33              | postfix_object . '[' slice_expression ']' assign_type
   34              | postfix_object . '[' slice_expression ')' assign_type
  292 postfix_object: postfix_object . '.' name_or_string
  293               | postfix_object . '.' reserved_object
  294 $@47: . %empty  ['(']
  295 postfix_object: postfix_object . $@47 calling_body
  296               | postfix_object . '[' slice_expression ']'
  297               | postfix_object . '[' slice_expression ')'
  304               | postfix_object . '.' CLONE calling_body

    '.'  shift, and go to state 454
    '['  shift, and go to state 455

    $default  reduce using rule 294 ($@47)

    $@47  go to state 207


State 392

   30 assign_target: lvar .  [';', ',']
  275 primary_object: lvar .  ['.', '[', '(']

    ';'       reduce using rule 30 (assign_target)
    ','       reduce using rule 30 (assign_target)
    $default  reduce using rule 275 (primary_object)


State 393

   25 channel_stmt: expression LEFT_ARROW $@1 expression_list . ';'
  182 expression_list: expression_list . ',' expression

    ';'  shift, and go to state 456
    ','  shift, and go to state 183


State 394

  212 or_expr: or_expr OR $@41 and_expr .  [TIMES, OR, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, '{', '}', ';', ',', ']', ')', ':', '~', '|']
  215 and_expr: and_expr . AND $@42 not_expr

    AND  shift, and go to state 189

    $default  reduce using rule 212 (or_expr)


State 395

  215 and_expr: and_expr AND $@42 not_expr .

    $default  reduce using rule 215 (and_expr)


State 396

  304 postfix_object: postfix_object '.' CLONE calling_body .

    $default  reduce using rule 304 (postfix_object)


State 397

  188 $@33: . %empty
  189 assign_expr: postfix_object '.' name_or_string assign_type . $@33 expression

    $default  reduce using rule 188 ($@33)

    $@33  go to state 457


State 398

  190 $@34: . %empty
  191 assign_expr: postfix_object '.' reserved_object assign_type . $@34 expression

    $default  reduce using rule 190 ($@34)

    $@34  go to state 458


State 399

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  308 slice_expression: ':' $@49 . expression
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 459
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 400

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  306 slice_expression: expression ':' . expression
  309                 | expression ':' .  [']', ')']
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 309 (slice_expression)

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 460
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 401

  193 assign_expr: postfix_object '[' slice_expression ']' . assign_type $@35 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  296 postfix_object: postfix_object '[' slice_expression ']' .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 296 (postfix_object)

    assign_type  go to state 461


State 402

  195 assign_expr: postfix_object '[' slice_expression ')' . assign_type $@36 expression
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  297 postfix_object: postfix_object '[' slice_expression ')' .  [TIMES, EQ, NEQ, AND, OR, GT, GE, LT, LE, DOUBLE_DOT, RIGHT_ARROW, LEFT_ARROW, UNDER, NAME, FORMAT_STRING_TAIL, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, '{', '}', ';', ',', '.', '[', ']', ')', ':', '~', '|', '%', '(', '+', '-', '*', '/']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 297 (postfix_object)

    assign_type  go to state 462


State 403

   48 simple_call_stmt: postfix_object ':' expression_list ';' .

    $default  reduce using rule 48 (simple_call_stmt)


State 404

  312 calling_body: '(' ')' .

    $default  reduce using rule 312 (calling_body)


State 405

  182 expression_list: expression_list . ',' expression
  313 calling_body: '(' expression_list . ')'

    ','  shift, and go to state 183
    ')'  shift, and go to state 463


State 406

  187 assign_expr: lvar assign_type $@32 expression .

    $default  reduce using rule 187 (assign_expr)


State 407

  325 format_object: '$' '{' expression . FORMAT_STRING_TAIL

    FORMAT_STRING_TAIL  shift, and go to state 464


State 408

  296 postfix_object: postfix_object '[' slice_expression ']' .

    $default  reduce using rule 296 (postfix_object)


State 409

  297 postfix_object: postfix_object '[' slice_expression ')' .

    $default  reduce using rule 297 (postfix_object)


State 410

  173 do_stmt: DO $@27 statement_block WHILE bool_expr . ';'

    ';'  shift, and go to state 465


State 411

  178 while_stmt: WHILE $@29 bool_expr $@30 statement_block .

    $default  reduce using rule 178 (while_stmt)


State 412

   85 decode_stmt: DECODE expression $@12 '{' decode_pattern_stmt_list . '}'
  106 decode_pattern_stmt_list: decode_pattern_stmt_list . decode_pattern_stmt
  108 $@15: . %empty  [MY, OWNER, CALLER, ROOT, MODULE, TRUE, FALSE, DOUBLE_DOT, NIL_, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '.', '[', '%', '(', '!', '+', '-']
  110 decode_pattern_stmt: . $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block

    '}'  shift, and go to state 466

    $default  reduce using rule 108 ($@15)

    decode_pattern_stmt  go to state 372
    $@15                 go to state 283


State 413

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  180 for_stmt: FOR lvar IN object $@31 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 467


State 414

   70 throw_stmt: THROW object_path LEFT_ARROW expression_list ';' .

    $default  reduce using rule 70 (throw_stmt)


State 415

  197 assign_expr: DOUBLE_DOT name_or_string assign_type $@37 expression .

    $default  reduce using rule 197 (assign_expr)


State 416

  199 assign_expr: DOUBLE_DOT reserved_object assign_type $@38 expression .

    $default  reduce using rule 199 (assign_expr)


State 417

   44 parallel_stmt: PARALLEL FOR lvar IN object . parallel_option $@5 statement_block
   45 parallel_option: . %empty  ['{']
   46                | . NAME expression
   47                | . NAME expression NAME expression

    NAME  shift, and go to state 468

    $default  reduce using rule 45 (parallel_option)

    parallel_option  go to state 469


State 418

  156 opt_argument_list: '(' name_list ',' TRIPLE_DOT . ')'

    ')'  shift, and go to state 470


State 419

  157 name_list: name_list ',' name .

    $default  reduce using rule 157 (name_list)


State 420

  201 assign_expr: '.' name_or_string assign_type $@39 expression .

    $default  reduce using rule 201 (assign_expr)


State 421

  203 assign_expr: '.' reserved_object assign_type $@40 expression .

    $default  reduce using rule 203 (assign_expr)


State 422

  243 list: '[' expression DOUBLE_DOT expression ']' .

    $default  reduce using rule 243 (list)


State 423

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  244     | '[' expression DOUBLE_DOT expression ':' . expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 471
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 424

  253 $@45: . %empty
  254 sbf: '%' '[' $@44 sbf_result '|' . $@45 sbf_rule_list ']'

    $default  reduce using rule 253 ($@45)

    $@45  go to state 472


State 425

  246 tuple: '(' expression_list ',' expression ')' .

    $default  reduce using rule 246 (tuple)


State 426

  248 tuple: '(' expression DOUBLE_DOT expression ')' .

    $default  reduce using rule 248 (tuple)


State 427

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  249      | '(' expression DOUBLE_DOT expression ':' . expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 473
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 428

   65 $@10: . %empty  ['{']
   66 catch_stmt: CATCH object_path RIGHT_ARROW name_list . $@10 statement_block
  157 name_list: name_list . ',' name

    ','  shift, and go to state 474

    $default  reduce using rule 65 ($@10)

    $@10  go to state 475


State 429

   64 catch_stmt: CATCH object_path $@9 statement_block .

    $default  reduce using rule 64 (catch_stmt)


State 430

   60 finally_stmt: FINALLY statement_block .

    $default  reduce using rule 60 (finally_stmt)


State 431

  128 opt_under: . %empty  ['{']
  129          | . UNDER object_path
  139 define_stmt: def '.' DECODE name_or_string opt_argument_list . opt_under $@20 '{' decode_pattern_stmt_list '}'

    UNDER  shift, and go to state 433

    $default  reduce using rule 128 (opt_under)

    opt_under  go to state 476


State 432

  128 opt_under: . %empty  ['{']
  129          | . UNDER object_path
  137 define_stmt: def '.' PARSE name_or_string opt_argument_list . opt_under $@19 '{' bnf_stmt_list '}'

    UNDER  shift, and go to state 433

    $default  reduce using rule 128 (opt_under)

    opt_under  go to state 477


State 433

   73 object_path: . object_path '.' name_or_string
   74            | . name_or_string
  126 name_or_string: . name
  127               | . STRING
  129 opt_under: UNDER . object_path
  331 name: . NAME

    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    object_path     go to state 478
    name_or_string  go to state 135
    name            go to state 136


State 434

  135 define_stmt: def '.' name_or_string name_or_string opt_under . '{'

    '{'  shift, and go to state 479


State 435

  132 define_stmt: def name_or_string ASSIGNMENT $@17 expression . ';'

    ';'  shift, and go to state 480


State 436

  133 $@18: . %empty
  134 define_stmt: def name_or_string opt_argument_list opt_superclass opt_under . $@18 statement_block

    $default  reduce using rule 133 ($@18)

    $@18  go to state 481


State 437

  119 p_var: '%' lvar .

    $default  reduce using rule 119 (p_var)


State 438

  109 $@16: . %empty
  110 decode_pattern_stmt: $@15 decode_pattern RIGHT_ARROW . $@16 statement_or_block

    $default  reduce using rule 109 ($@16)

    $@16  go to state 482


State 439

  114 pattern_list: pattern_list ',' . pattern
  116 pattern: . expression
  117        | . p_var
  118        | . p_var '=' expression
  119 p_var: . '%' lvar
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 373
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    pattern               go to state 483
    p_var                 go to state 484
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 379
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 440

  113 list_pattern: p_var ':' . p_var
  119 p_var: . '%' lvar

    '%'  shift, and go to state 485

    p_var  go to state 486


State 441

  118 pattern: p_var '=' . expression
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 487
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 442

  102 terminal: STRING .

    $default  reduce using rule 102 (terminal)


State 443

  103 terminal: RE_STRING .

    $default  reduce using rule 103 (terminal)


State 444

   90 bnf_stmt: '~' ':' terminal . ';'

    ';'  shift, and go to state 488


State 445

   89 bnf_stmt: bnf_left $@13 ':' . bnf_right_list ';'
   91 bnf_right_list: . bnf_right_list '|' bnf_right
   92               | . bnf_right
   94 $@14: . %empty
   95 bnf_right: . $@14 bnf_right_

    $default  reduce using rule 94 ($@14)

    bnf_right_list  go to state 489
    bnf_right       go to state 490
    $@14            go to state 491


State 446

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  167 elif_stmt: ELIF $@23 bool_expr $@24 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 492


State 447

  175 times_stmt: expression TIMES DO $@28 statement_block .

    $default  reduce using rule 175 (times_stmt)


State 448

   35 assign_target: DOUBLE_DOT name_or_string .  [';', ',']
  298 postfix_object: DOUBLE_DOT name_or_string .  ['.', '[', '(']

    ';'       reduce using rule 35 (assign_target)
    ','       reduce using rule 35 (assign_target)
    $default  reduce using rule 298 (postfix_object)


State 449

   36 assign_target: DOUBLE_DOT reserved_object .  [';', ',']
  299 postfix_object: DOUBLE_DOT reserved_object .  ['.', '[', '(']

    ';'       reduce using rule 36 (assign_target)
    ','       reduce using rule 36 (assign_target)
    $default  reduce using rule 299 (postfix_object)


State 450

   37 assign_target: '.' name_or_string .  [';', ',']
  300 postfix_object: '.' name_or_string .  ['.', '[', '(']

    ';'       reduce using rule 37 (assign_target)
    ','       reduce using rule 37 (assign_target)
    $default  reduce using rule 300 (postfix_object)


State 451

   38 assign_target: '.' reserved_object .  [';', ',']
  301 postfix_object: '.' reserved_object .  ['.', '[', '(']

    ';'       reduce using rule 38 (assign_target)
    ','       reduce using rule 38 (assign_target)
    $default  reduce using rule 301 (postfix_object)


State 452

   27 channel_stmt: expression RIGHT_ARROW $@2 assign_target_list ';' .

    $default  reduce using rule 27 (channel_stmt)


State 453

   28 assign_target_list: assign_target_list ',' . assign_target
   30 assign_target: . lvar
   31              | . postfix_object '.' name_or_string
   32              | . postfix_object '.' reserved_object
   33              | . postfix_object '[' slice_expression ']' assign_type
   34              | . postfix_object '[' slice_expression ')' assign_type
   35              | . DOUBLE_DOT name_or_string
   36              | . DOUBLE_DOT reserved_object
   37              | . '.' name_or_string
   38              | . '.' reserved_object
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 387
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 388
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46

    assign_target         go to state 493
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 391
    reserved_object       go to state 102
    lvar                  go to state 392
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 454

   31 assign_target: postfix_object '.' . name_or_string
   32              | postfix_object '.' . reserved_object
  126 name_or_string: . name
  127               | . STRING
  292 postfix_object: postfix_object '.' . name_or_string
  293               | postfix_object '.' . reserved_object
  304               | postfix_object '.' . CLONE calling_body
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  331 name: . NAME

    CLONE   shift, and go to state 312
    MY      shift, and go to state 3
    OWNER   shift, and go to state 4
    CALLER  shift, and go to state 5
    ROOT    shift, and go to state 6
    MODULE  shift, and go to state 7
    NAME    shift, and go to state 29
    STRING  shift, and go to state 133

    name_or_string   go to state 494
    reserved_object  go to state 495
    name             go to state 136


State 455

   33 assign_target: postfix_object '[' . slice_expression ']' assign_type
   34              | postfix_object '[' . slice_expression ')' assign_type
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  296               | postfix_object '[' . slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  297               | postfix_object '[' . slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  306 slice_expression: . expression ':' expression
  308                 | . ':' $@49 expression
  309                 | . expression ':'
  310                 | . ':'
  311                 | . expression
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    ':'                    shift, and go to state 315
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 316
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    slice_expression      go to state 496
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 456

   25 channel_stmt: expression LEFT_ARROW $@1 expression_list ';' .

    $default  reduce using rule 25 (channel_stmt)


State 457

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  189            | postfix_object '.' name_or_string assign_type $@33 . expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 497
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 458

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  191            | postfix_object '.' reserved_object assign_type $@34 . expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 498
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 459

  308 slice_expression: ':' $@49 expression .

    $default  reduce using rule 308 (slice_expression)


State 460

  306 slice_expression: expression ':' expression .

    $default  reduce using rule 306 (slice_expression)


State 461

  192 $@35: . %empty
  193 assign_expr: postfix_object '[' slice_expression ']' assign_type . $@35 expression

    $default  reduce using rule 192 ($@35)

    $@35  go to state 499


State 462

  194 $@36: . %empty
  195 assign_expr: postfix_object '[' slice_expression ')' assign_type . $@36 expression

    $default  reduce using rule 194 ($@36)

    $@36  go to state 500


State 463

  313 calling_body: '(' expression_list ')' .

    $default  reduce using rule 313 (calling_body)


State 464

  325 format_object: '$' '{' expression FORMAT_STRING_TAIL .

    $default  reduce using rule 325 (format_object)


State 465

  173 do_stmt: DO $@27 statement_block WHILE bool_expr ';' .

    $default  reduce using rule 173 (do_stmt)


State 466

   85 decode_stmt: DECODE expression $@12 '{' decode_pattern_stmt_list '}' .

    $default  reduce using rule 85 (decode_stmt)


State 467

  180 for_stmt: FOR lvar IN object $@31 statement_block .

    $default  reduce using rule 180 (for_stmt)


State 468

   46 parallel_option: NAME . expression
   47                | NAME . expression NAME expression
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 501
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 469

   43 $@5: . %empty
   44 parallel_stmt: PARALLEL FOR lvar IN object parallel_option . $@5 statement_block

    $default  reduce using rule 43 ($@5)

    $@5  go to state 502


State 470

  156 opt_argument_list: '(' name_list ',' TRIPLE_DOT ')' .

    $default  reduce using rule 156 (opt_argument_list)


State 471

  244 list: '[' expression DOUBLE_DOT expression ':' expression . ']'

    ']'  shift, and go to state 503


State 472

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  254    | '%' '[' $@44 sbf_result '|' $@45 . sbf_rule_list ']'
  256 sbf_rule_list: . sbf_rule_list ',' sbf_rule
  257              | . sbf_rule
  258 sbf_rule: . bool_expr
  259         | . in_expr
  260 in_expr: . lvar LEFT_ARROW expression
  261        | . lvar LEFT_ARROW range_expr
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    bool_expr             go to state 504
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    sbf_rule_list         go to state 505
    sbf_rule              go to state 506
    in_expr               go to state 507
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 508
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 473

  249 tuple: '(' expression DOUBLE_DOT expression ':' expression . ')'

    ')'  shift, and go to state 509


State 474

  157 name_list: name_list ',' . name
  331 name: . NAME

    NAME  shift, and go to state 29

    name  go to state 419


State 475

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   66 catch_stmt: CATCH object_path RIGHT_ARROW name_list $@10 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 510


State 476

  138 $@20: . %empty
  139 define_stmt: def '.' DECODE name_or_string opt_argument_list opt_under . $@20 '{' decode_pattern_stmt_list '}'

    $default  reduce using rule 138 ($@20)

    $@20  go to state 511


State 477

  136 $@19: . %empty
  137 define_stmt: def '.' PARSE name_or_string opt_argument_list opt_under . $@19 '{' bnf_stmt_list '}'

    $default  reduce using rule 136 ($@19)

    $@19  go to state 512


State 478

   73 object_path: object_path . '.' name_or_string
  129 opt_under: UNDER object_path .  ['{']

    '.'  shift, and go to state 234

    $default  reduce using rule 129 (opt_under)


State 479

  135 define_stmt: def '.' name_or_string name_or_string opt_under '{' .

    $default  reduce using rule 135 (define_stmt)


State 480

  132 define_stmt: def name_or_string ASSIGNMENT $@17 expression ';' .

    $default  reduce using rule 132 (define_stmt)


State 481

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
  134 define_stmt: def name_or_string opt_argument_list opt_superclass opt_under $@18 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 513


State 482

    4 statement_or_block: . statement
    5                   | . statement_block
    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   10 statement: . expression_stmt
   11          | . control_stmt
   12          | . selection_stmt
   13          | . loop_stmt
   14          | . define_stmt
   15          | . exception_stmt
   16          | . using_stmt
   17          | . simple_call_stmt
   18          | . shell_stmt
   19          | . scope_stmt
   20          | . parallel_stmt
   21          | . debug_stmt
   22          | . channel_stmt
   23          | . ';'
   25 channel_stmt: . expression LEFT_ARROW $@1 expression_list ';'
   27             | . expression RIGHT_ARROW $@2 assign_target_list ';'
   40 scope_stmt: . expression $@3 statement_block
   42 parallel_stmt: . PARALLEL DO $@4 statement_block
   44              | . PARALLEL FOR lvar IN object parallel_option $@5 statement_block
   48 simple_call_stmt: . postfix_object ':' expression_list ';'
   49 $@6: . %empty  [SHELL_STRING_HEAD]
   50 shell_stmt: . $@6 shell_string
   53 exception_stmt: . try_stmt catch_stmt_list_with_finally
   54               | . throw_stmt
   56 try_stmt: . TRY $@7 statement_block
   69 throw_stmt: . THROW object_path ';'
   70           | . THROW object_path LEFT_ARROW expression_list ';'
   71 using_stmt: . USING object_path ';'
   72           | . USING object_path STRING ';'
   75 debug_stmt: . STACK
   76           | . LOCAL
   77 control_stmt: . RETURN_ opt_expr_list ';'
   78             | . CONTINUE ';'
   79             | . BREAK ';'
   82 selection_stmt: . if_elif_else_stmt
   83               | . decode_stmt
   85 decode_stmt: . DECODE expression $@12 '{' decode_pattern_stmt_list '}'
  110 decode_pattern_stmt: $@15 decode_pattern RIGHT_ARROW $@16 . statement_or_block
  120 loop_stmt: . for_stmt
  121          | . do_stmt
  122          | . while_stmt
  123          | . times_stmt
  124 def: . STATIC DEF
  125    | . DEF
  130 define_stmt: . def name_or_string ';'
  132            | . def name_or_string ASSIGNMENT $@17 expression ';'
  134            | . def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block
  135            | . def '.' name_or_string name_or_string opt_under '{'
  137            | . def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}'
  139            | . def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}'
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  159 if_elif_else_stmt: . if_stmt
  160                  | . if_stmt else_stmt
  161                  | . if_stmt elif_stmt_list else_stmt
  162                  | . if_stmt elif_stmt_list
  171 if_stmt: . IF bool_expr $@26 statement_block
  173 do_stmt: . DO $@27 statement_block WHILE bool_expr ';'
  175 times_stmt: . expression TIMES DO $@28 statement_block
  178 while_stmt: . WHILE $@29 bool_expr $@30 statement_block
  180 for_stmt: . FOR lvar IN object $@31 statement_block
  181 expression_stmt: . expression_list ';'
  182 expression_list: . expression_list ',' expression
  183                | . expression
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    STATIC                 shift, and go to state 1
    DEF                    shift, and go to state 2
    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    IF                     shift, and go to state 8
    DO                     shift, and go to state 9
    WHILE                  shift, and go to state 10
    DECODE                 shift, and go to state 11
    FOR                    shift, and go to state 12
    RETURN_                shift, and go to state 13
    CONTINUE               shift, and go to state 14
    BREAK                  shift, and go to state 15
    TRY                    shift, and go to state 16
    THROW                  shift, and go to state 17
    STACK                  shift, and go to state 18
    LOCAL                  shift, and go to state 19
    USING                  shift, and go to state 20
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    PARALLEL               shift, and go to state 25
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 162
    ';'                    shift, and go to state 42
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 49 ($@6)

    statement_or_block    go to state 514
    statement_block       go to state 515
    statement             go to state 516
    channel_stmt          go to state 52
    scope_stmt            go to state 53
    parallel_stmt         go to state 54
    simple_call_stmt      go to state 55
    shell_stmt            go to state 56
    $@6                   go to state 57
    exception_stmt        go to state 58
    try_stmt              go to state 59
    throw_stmt            go to state 60
    using_stmt            go to state 61
    debug_stmt            go to state 62
    control_stmt          go to state 63
    selection_stmt        go to state 64
    decode_stmt           go to state 65
    loop_stmt             go to state 66
    def                   go to state 67
    define_stmt           go to state 68
    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    if_elif_else_stmt     go to state 74
    if_stmt               go to state 75
    do_stmt               go to state 76
    times_stmt            go to state 77
    while_stmt            go to state 78
    for_stmt              go to state 79
    expression_stmt       go to state 80
    expression_list       go to state 81
    expression            go to state 82
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 100
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 483

  114 pattern_list: pattern_list ',' pattern .

    $default  reduce using rule 114 (pattern_list)


State 484

  117 pattern: p_var .  [RIGHT_ARROW, ',']
  118        | p_var . '=' expression

    '='  shift, and go to state 441

    $default  reduce using rule 117 (pattern)


State 485

  119 p_var: '%' . lvar
  320 lvar: . name
  331 name: . NAME

    NAME  shift, and go to state 29

    lvar  go to state 437
    name  go to state 126


State 486

  113 list_pattern: p_var ':' p_var .

    $default  reduce using rule 113 (list_pattern)


State 487

  118 pattern: p_var '=' expression .

    $default  reduce using rule 118 (pattern)


State 488

   90 bnf_stmt: '~' ':' terminal ';' .

    $default  reduce using rule 90 (bnf_stmt)


State 489

   89 bnf_stmt: bnf_left $@13 ':' bnf_right_list . ';'
   91 bnf_right_list: bnf_right_list . '|' bnf_right

    ';'  shift, and go to state 517
    '|'  shift, and go to state 518


State 490

   92 bnf_right_list: bnf_right .

    $default  reduce using rule 92 (bnf_right_list)


State 491

   95 bnf_right: $@14 . bnf_right_
   96 bnf_right_: . bnf_node_list
   97 bnf_node_list: . bnf_node_list bnf_node
   98              | . bnf_node
   99 bnf_node: . terminal
  100         | . non_terminal
  101         | . action_code
  102 terminal: . STRING
  103         | . RE_STRING
  104 non_terminal: . name
  105 action_code: . lambda_object
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  331 name: . NAME

    LAMBDA     shift, and go to state 28
    NAME       shift, and go to state 29
    STRING     shift, and go to state 442
    RE_STRING  shift, and go to state 443

    bnf_right_            go to state 519
    bnf_node_list         go to state 520
    bnf_node              go to state 521
    terminal              go to state 522
    non_terminal          go to state 523
    action_code           go to state 524
    lambda_object         go to state 525
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    name                  go to state 289


State 492

  167 elif_stmt: ELIF $@23 bool_expr $@24 statement_block .

    $default  reduce using rule 167 (elif_stmt)


State 493

   28 assign_target_list: assign_target_list ',' assign_target .

    $default  reduce using rule 28 (assign_target_list)


State 494

   31 assign_target: postfix_object '.' name_or_string .  [';', ',']
  292 postfix_object: postfix_object '.' name_or_string .  ['.', '[', '(']

    ';'       reduce using rule 31 (assign_target)
    ','       reduce using rule 31 (assign_target)
    $default  reduce using rule 292 (postfix_object)


State 495

   32 assign_target: postfix_object '.' reserved_object .  [';', ',']
  293 postfix_object: postfix_object '.' reserved_object .  ['.', '[', '(']

    ';'       reduce using rule 32 (assign_target)
    ','       reduce using rule 32 (assign_target)
    $default  reduce using rule 293 (postfix_object)


State 496

   33 assign_target: postfix_object '[' slice_expression . ']' assign_type
   34              | postfix_object '[' slice_expression . ')' assign_type
  296 postfix_object: postfix_object '[' slice_expression . ']'
  297               | postfix_object '[' slice_expression . ')'

    ']'  shift, and go to state 526
    ')'  shift, and go to state 527


State 497

  189 assign_expr: postfix_object '.' name_or_string assign_type $@33 expression .

    $default  reduce using rule 189 (assign_expr)


State 498

  191 assign_expr: postfix_object '.' reserved_object assign_type $@34 expression .

    $default  reduce using rule 191 (assign_expr)


State 499

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  193            | postfix_object '[' slice_expression ']' assign_type $@35 . expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 528
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 500

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  195            | postfix_object '[' slice_expression ')' assign_type $@36 . expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 529
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 501

   46 parallel_option: NAME expression .  ['{']
   47                | NAME expression . NAME expression

    NAME  shift, and go to state 530

    $default  reduce using rule 46 (parallel_option)


State 502

    6 statement_block: . '{' statement_list '}'
    7                | . '{' '}'
   44 parallel_stmt: PARALLEL FOR lvar IN object parallel_option $@5 . statement_block

    '{'  shift, and go to state 225

    statement_block  go to state 531


State 503

  244 list: '[' expression DOUBLE_DOT expression ':' expression ']' .

    $default  reduce using rule 244 (list)


State 504

  258 sbf_rule: bool_expr .

    $default  reduce using rule 258 (sbf_rule)


State 505

  254 sbf: '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list . ']'
  256 sbf_rule_list: sbf_rule_list . ',' sbf_rule

    ','  shift, and go to state 532
    ']'  shift, and go to state 533


State 506

  257 sbf_rule_list: sbf_rule .

    $default  reduce using rule 257 (sbf_rule_list)


State 507

  259 sbf_rule: in_expr .

    $default  reduce using rule 259 (sbf_rule)


State 508

  260 in_expr: lvar . LEFT_ARROW expression
  261        | lvar . LEFT_ARROW range_expr
  275 primary_object: lvar .  [EQ, NEQ, AND, OR, GT, GE, LT, LE, MINUS_NUMBER, MINUS_BIG_NUMBER, MINUS_REAL, ',', '.', '[', ']', '%', '(', '+', '-', '*', '/']

    LEFT_ARROW  shift, and go to state 534

    $default  reduce using rule 275 (primary_object)


State 509

  249 tuple: '(' expression DOUBLE_DOT expression ':' expression ')' .

    $default  reduce using rule 249 (tuple)


State 510

   66 catch_stmt: CATCH object_path RIGHT_ARROW name_list $@10 statement_block .

    $default  reduce using rule 66 (catch_stmt)


State 511

  139 define_stmt: def '.' DECODE name_or_string opt_argument_list opt_under $@20 . '{' decode_pattern_stmt_list '}'

    '{'  shift, and go to state 535


State 512

  137 define_stmt: def '.' PARSE name_or_string opt_argument_list opt_under $@19 . '{' bnf_stmt_list '}'

    '{'  shift, and go to state 536


State 513

  134 define_stmt: def name_or_string opt_argument_list opt_superclass opt_under $@18 statement_block .

    $default  reduce using rule 134 (define_stmt)


State 514

  110 decode_pattern_stmt: $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block .

    $default  reduce using rule 110 (decode_pattern_stmt)


State 515

    5 statement_or_block: statement_block .

    $default  reduce using rule 5 (statement_or_block)


State 516

    4 statement_or_block: statement .

    $default  reduce using rule 4 (statement_or_block)


State 517

   89 bnf_stmt: bnf_left $@13 ':' bnf_right_list ';' .

    $default  reduce using rule 89 (bnf_stmt)


State 518

   91 bnf_right_list: bnf_right_list '|' . bnf_right
   94 $@14: . %empty
   95 bnf_right: . $@14 bnf_right_

    $default  reduce using rule 94 ($@14)

    bnf_right  go to state 537
    $@14       go to state 491


State 519

   95 bnf_right: $@14 bnf_right_ .

    $default  reduce using rule 95 (bnf_right)


State 520

   96 bnf_right_: bnf_node_list .  [';', '|']
   97 bnf_node_list: bnf_node_list . bnf_node
   99 bnf_node: . terminal
  100         | . non_terminal
  101         | . action_code
  102 terminal: . STRING
  103         | . RE_STRING
  104 non_terminal: . name
  105 action_code: . lambda_object
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  331 name: . NAME

    LAMBDA     shift, and go to state 28
    NAME       shift, and go to state 29
    STRING     shift, and go to state 442
    RE_STRING  shift, and go to state 443

    $default  reduce using rule 96 (bnf_right_)

    bnf_node              go to state 538
    terminal              go to state 522
    non_terminal          go to state 523
    action_code           go to state 524
    lambda_object         go to state 525
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    name                  go to state 289


State 521

   98 bnf_node_list: bnf_node .

    $default  reduce using rule 98 (bnf_node_list)


State 522

   99 bnf_node: terminal .

    $default  reduce using rule 99 (bnf_node)


State 523

  100 bnf_node: non_terminal .

    $default  reduce using rule 100 (bnf_node)


State 524

  101 bnf_node: action_code .

    $default  reduce using rule 101 (bnf_node)


State 525

  105 action_code: lambda_object .

    $default  reduce using rule 105 (action_code)


State 526

   33 assign_target: postfix_object '[' slice_expression ']' . assign_type
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  296 postfix_object: postfix_object '[' slice_expression ']' .  ['.', '[', '(']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 296 (postfix_object)

    assign_type  go to state 539


State 527

   34 assign_target: postfix_object '[' slice_expression ')' . assign_type
  205 assign_type: . '='
  206            | . ADD_ASSIGN
  207            | . SUB_ASSIGN
  208            | . MUL_ASSIGN
  209            | . DIV_ASSIGN
  297 postfix_object: postfix_object '[' slice_expression ')' .  ['.', '[', '(']

    ADD_ASSIGN  shift, and go to state 208
    SUB_ASSIGN  shift, and go to state 209
    MUL_ASSIGN  shift, and go to state 210
    DIV_ASSIGN  shift, and go to state 211
    '='         shift, and go to state 212

    $default  reduce using rule 297 (postfix_object)

    assign_type  go to state 540


State 528

  193 assign_expr: postfix_object '[' slice_expression ']' assign_type $@35 expression .

    $default  reduce using rule 193 (assign_expr)


State 529

  195 assign_expr: postfix_object '[' slice_expression ')' assign_type $@36 expression .

    $default  reduce using rule 195 (assign_expr)


State 530

   47 parallel_option: NAME expression NAME . expression
  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 541
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 531

   44 parallel_stmt: PARALLEL FOR lvar IN object parallel_option $@5 statement_block .

    $default  reduce using rule 44 (parallel_stmt)


State 532

  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  256 sbf_rule_list: sbf_rule_list ',' . sbf_rule
  258 sbf_rule: . bool_expr
  259         | . in_expr
  260 in_expr: . lvar LEFT_ARROW expression
  261        | . lvar LEFT_ARROW range_expr
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 116
    NIL_                   shift, and go to state 24
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 117
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    bool_expr             go to state 504
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    sbf_rule              go to state 542
    in_expr               go to state 507
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 119
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 508
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 533

  254 sbf: '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']' .

    $default  reduce using rule 254 (sbf)


State 534

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  260 in_expr: lvar LEFT_ARROW . expression
  261        | lvar LEFT_ARROW . range_expr
  262 range_expr: . range_expr_sub ':' expression
  263           | . range_expr_sub
  264 range_expr_sub: . expression '~' expression
  265               | . expression '~'
  267               | . '~' $@46 expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '~'                    shift, and go to state 543
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 544
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    range_expr            go to state 545
    range_expr_sub        go to state 546
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 535

  106 decode_pattern_stmt_list: . decode_pattern_stmt_list decode_pattern_stmt
  107                         | . decode_pattern_stmt
  108 $@15: . %empty
  110 decode_pattern_stmt: . $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block
  139 define_stmt: def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' . decode_pattern_stmt_list '}'

    $default  reduce using rule 108 ($@15)

    decode_pattern_stmt_list  go to state 547
    decode_pattern_stmt       go to state 282
    $@15                      go to state 283


State 536

   86 bnf_stmt_list: . bnf_stmt_list bnf_stmt
   87              | . bnf_stmt
   89 bnf_stmt: . bnf_left $@13 ':' bnf_right_list ';'
   90         | . '~' ':' terminal ';'
   93 bnf_left: . non_terminal
  104 non_terminal: . name
  137 define_stmt: def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' . bnf_stmt_list '}'
  331 name: . NAME

    NAME  shift, and go to state 29
    '~'   shift, and go to state 284

    bnf_stmt_list  go to state 548
    bnf_stmt       go to state 286
    bnf_left       go to state 287
    non_terminal   go to state 288
    name           go to state 289


State 537

   91 bnf_right_list: bnf_right_list '|' bnf_right .

    $default  reduce using rule 91 (bnf_right_list)


State 538

   97 bnf_node_list: bnf_node_list bnf_node .

    $default  reduce using rule 97 (bnf_node_list)


State 539

   33 assign_target: postfix_object '[' slice_expression ']' assign_type .

    $default  reduce using rule 33 (assign_target)


State 540

   34 assign_target: postfix_object '[' slice_expression ')' assign_type .

    $default  reduce using rule 34 (assign_target)


State 541

   47 parallel_option: NAME expression NAME expression .

    $default  reduce using rule 47 (parallel_option)


State 542

  256 sbf_rule_list: sbf_rule_list ',' sbf_rule .

    $default  reduce using rule 256 (sbf_rule_list)


State 543

  266 $@46: . %empty
  267 range_expr_sub: '~' . $@46 expression

    $default  reduce using rule 266 ($@46)

    $@46  go to state 549


State 544

  260 in_expr: lvar LEFT_ARROW expression .  [',', ']']
  264 range_expr_sub: expression . '~' expression
  265               | expression . '~'

    '~'  shift, and go to state 550

    $default  reduce using rule 260 (in_expr)


State 545

  261 in_expr: lvar LEFT_ARROW range_expr .

    $default  reduce using rule 261 (in_expr)


State 546

  262 range_expr: range_expr_sub . ':' expression
  263           | range_expr_sub .  [',', ']']

    ':'  shift, and go to state 551

    $default  reduce using rule 263 (range_expr)


State 547

  106 decode_pattern_stmt_list: decode_pattern_stmt_list . decode_pattern_stmt
  108 $@15: . %empty  [MY, OWNER, CALLER, ROOT, MODULE, TRUE, FALSE, DOUBLE_DOT, NIL_, ONCE, EVAL, LAMBDA, NAME, STRING, FORMAT_STRING_HEAD, RE_STRING, RE_FORMAT_STRING_HEAD, HEX_STRING, NUMBER, MINUS_NUMBER, BIG_NUMBER, MINUS_BIG_NUMBER, REAL, MINUS_REAL, '{', '.', '[', '%', '(', '!', '+', '-']
  110 decode_pattern_stmt: . $@15 decode_pattern RIGHT_ARROW $@16 statement_or_block
  139 define_stmt: def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list . '}'

    '}'  shift, and go to state 552

    $default  reduce using rule 108 ($@15)

    decode_pattern_stmt  go to state 372
    $@15                 go to state 283


State 548

   86 bnf_stmt_list: bnf_stmt_list . bnf_stmt
   89 bnf_stmt: . bnf_left $@13 ':' bnf_right_list ';'
   90         | . '~' ':' terminal ';'
   93 bnf_left: . non_terminal
  104 non_terminal: . name
  137 define_stmt: def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list . '}'
  331 name: . NAME

    NAME  shift, and go to state 29
    '}'   shift, and go to state 553
    '~'   shift, and go to state 284

    bnf_stmt      go to state 382
    bnf_left      go to state 287
    non_terminal  go to state 288
    name          go to state 289


State 549

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  267 range_expr_sub: '~' $@46 . expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 554
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 550

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  264 range_expr_sub: expression '~' . expression
  265               | expression '~' .  [',', ']', ':']
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    $default  reduce using rule 265 (range_expr_sub)

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 555
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 551

  141 once_expr: . ONCE $@21 open_statement_block
  143 lambda_object: . lambda_define_header opt_superclass $@22 statement_block
  144              | . LAMBDA '.' name_or_string '{'
  145              | . lambda_decode_header '{' decode_pattern_stmt_list '}'
  146              | . lambda_parse_header '{' bnf_stmt_list '}'
  147 lambda_define_header: . LAMBDA opt_argument_list
  148 lambda_decode_header: . LAMBDA '.' DECODE opt_argument_list
  149 lambda_parse_header: . LAMBDA '.' PARSE opt_argument_list
  184 expression: . assign_expr
  185           | . once_expr
  187 assign_expr: . lvar assign_type $@32 expression
  189            | . postfix_object '.' name_or_string assign_type $@33 expression
  191            | . postfix_object '.' reserved_object assign_type $@34 expression
  193            | . postfix_object '[' slice_expression ']' assign_type $@35 expression
  195            | . postfix_object '[' slice_expression ')' assign_type $@36 expression
  197            | . DOUBLE_DOT name_or_string assign_type $@37 expression
  199            | . DOUBLE_DOT reserved_object assign_type $@38 expression
  201            | . '.' name_or_string assign_type $@39 expression
  203            | . '.' reserved_object assign_type $@40 expression
  204            | . bool_expr
  210 bool_expr: . or_expr
  212 or_expr: . or_expr OR $@41 and_expr
  213        | . and_expr
  215 and_expr: . and_expr AND $@42 not_expr
  216         | . not_expr
  217 not_expr: . '!' logical_expr
  218         | . logical_expr
  219 logical_expr: . numeric_expr GT numeric_expr
  220             | . numeric_expr GE numeric_expr
  221             | . numeric_expr LT numeric_expr
  222             | . numeric_expr LE numeric_expr
  223             | . numeric_expr EQ numeric_expr
  224             | . numeric_expr NEQ numeric_expr
  225             | . numeric_expr
  226 numeric_expr: . add_expr
  227 add_expr: . add_expr '+' mul_expr
  228         | . add_expr '-' mul_expr
  229         | . add_expr minus_number
  230         | . add_expr minus_big_number
  231         | . add_expr minus_real
  232         | . mul_expr
  233 mul_expr: . mul_expr '*' object
  234         | . mul_expr '/' object
  235         | . mul_expr '%' object
  236         | . unary_expr
  238 unary_expr: . '-' $@43 object
  239           | . '+' object
  240           | . object
  241 list: . '[' opt_expr_list ']'
  242     | . '[' expression_list ',' ']'
  243     | . '[' expression DOUBLE_DOT expression ']'
  244     | . '[' expression DOUBLE_DOT expression ':' expression ']'
  245     | . sbf
  246 tuple: . '(' expression_list ',' expression ')'
  247      | . '(' expression_list ',' ')'
  248      | . '(' expression DOUBLE_DOT expression ')'
  249      | . '(' expression DOUBLE_DOT expression ':' expression ')'
  250 map: . '{' pair_list '}'
  251    | . '{' pair_list ',' '}'
  254 sbf: . '%' '[' $@44 sbf_result '|' $@45 sbf_rule_list ']'
  262 range_expr: range_expr_sub ':' . expression
  271 primary_object: . list
  272               | . tuple
  273               | . map
  274               | . lambda_object
  275               | . lvar
  276               | . number
  277               | . minus_number
  278               | . big_number
  279               | . minus_big_number
  280               | . real
  281               | . minus_real
  282               | . regex
  283               | . string
  284               | . reserved_object
  285               | . TRUE
  286               | . FALSE
  287               | . NIL_
  288               | . '(' expression ')'
  289               | . reserved_functions
  290 reserved_functions: . eval_function
  291 eval_function: . EVAL '(' expression ')'
  292 postfix_object: . postfix_object '.' name_or_string
  293               | . postfix_object '.' reserved_object
  295               | . postfix_object $@47 calling_body
  296               | . postfix_object '[' slice_expression ']'
  297               | . postfix_object '[' slice_expression ')'
  298               | . DOUBLE_DOT name_or_string
  299               | . DOUBLE_DOT reserved_object
  300               | . '.' name_or_string
  301               | . '.' reserved_object
  303               | . name $@48 string
  304               | . postfix_object '.' CLONE calling_body
  305               | . primary_object
  314 object: . postfix_object
  315 reserved_object: . OWNER
  316                | . CALLER
  317                | . ROOT
  318                | . MODULE
  319                | . MY
  320 lvar: . name
  321 format_string: . format_string format_object
  322              | . FORMAT_STRING_HEAD
  323 re_format_string: . re_format_string format_object
  324                 | . RE_FORMAT_STRING_HEAD
  326 regex: . RE_STRING
  327      | . re_format_string
  328 string: . STRING
  329       | . format_string
  330       | . HEX_STRING
  331 name: . NAME
  332 minus_number: . MINUS_NUMBER
  333 number: . NUMBER
  334 minus_big_number: . MINUS_BIG_NUMBER
  335 big_number: . BIG_NUMBER
  336 real: . REAL
  337 minus_real: . MINUS_REAL

    MY                     shift, and go to state 3
    OWNER                  shift, and go to state 4
    CALLER                 shift, and go to state 5
    ROOT                   shift, and go to state 6
    MODULE                 shift, and go to state 7
    TRUE                   shift, and go to state 21
    FALSE                  shift, and go to state 22
    DOUBLE_DOT             shift, and go to state 23
    NIL_                   shift, and go to state 24
    ONCE                   shift, and go to state 26
    EVAL                   shift, and go to state 27
    LAMBDA                 shift, and go to state 28
    NAME                   shift, and go to state 29
    STRING                 shift, and go to state 30
    FORMAT_STRING_HEAD     shift, and go to state 31
    RE_STRING              shift, and go to state 32
    RE_FORMAT_STRING_HEAD  shift, and go to state 33
    HEX_STRING             shift, and go to state 34
    NUMBER                 shift, and go to state 35
    MINUS_NUMBER           shift, and go to state 36
    BIG_NUMBER             shift, and go to state 37
    MINUS_BIG_NUMBER       shift, and go to state 38
    REAL                   shift, and go to state 39
    MINUS_REAL             shift, and go to state 40
    '{'                    shift, and go to state 41
    '.'                    shift, and go to state 43
    '['                    shift, and go to state 44
    '%'                    shift, and go to state 45
    '('                    shift, and go to state 46
    '!'                    shift, and go to state 47
    '+'                    shift, and go to state 48
    '-'                    shift, and go to state 49

    once_expr             go to state 69
    lambda_object         go to state 70
    lambda_define_header  go to state 71
    lambda_decode_header  go to state 72
    lambda_parse_header   go to state 73
    expression            go to state 556
    assign_expr           go to state 83
    bool_expr             go to state 84
    or_expr               go to state 85
    and_expr              go to state 86
    not_expr              go to state 87
    logical_expr          go to state 88
    numeric_expr          go to state 89
    add_expr              go to state 90
    mul_expr              go to state 91
    unary_expr            go to state 92
    list                  go to state 93
    tuple                 go to state 94
    map                   go to state 95
    sbf                   go to state 96
    primary_object        go to state 97
    reserved_functions    go to state 98
    eval_function         go to state 99
    postfix_object        go to state 124
    object                go to state 101
    reserved_object       go to state 102
    lvar                  go to state 103
    format_string         go to state 104
    re_format_string      go to state 105
    regex                 go to state 106
    string                go to state 107
    name                  go to state 108
    minus_number          go to state 109
    number                go to state 110
    minus_big_number      go to state 111
    big_number            go to state 112
    real                  go to state 113
    minus_real            go to state 114


State 552

  139 define_stmt: def '.' DECODE name_or_string opt_argument_list opt_under $@20 '{' decode_pattern_stmt_list '}' .

    $default  reduce using rule 139 (define_stmt)


State 553

  137 define_stmt: def '.' PARSE name_or_string opt_argument_list opt_under $@19 '{' bnf_stmt_list '}' .

    $default  reduce using rule 137 (define_stmt)


State 554

  267 range_expr_sub: '~' $@46 expression .

    $default  reduce using rule 267 (range_expr_sub)


State 555

  264 range_expr_sub: expression '~' expression .

    $default  reduce using rule 264 (range_expr_sub)


State 556

  262 range_expr: range_expr_sub ':' expression .

    $default  reduce using rule 262 (range_expr)
